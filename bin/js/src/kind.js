module.exports = (function() {
    function word_to_u16(w) {
        var u = 0;
        for (var i = 0; i < 16; ++i) {
            u = u | (w._ === 'Word.i' ? 1 << i : 0);
            w = w.pred;
        };
        return u;
    };

    function u16_to_word(u) {
        var w = {
            _: 'Word.e'
        };
        for (var i = 0; i < 16; ++i) {
            w = {
                _: (u >>> (16 - i - 1)) & 1 ? 'Word.i' : 'Word.o',
                pred: w
            };
        };
        return w;
    };

    function u16_to_bits(x) {
        var s = '';
        for (var i = 0; i < 16; ++i) {
            s = (x & 1 ? '1' : '0') + s;
            x = x >>> 1;
        }
        return s;
    };
    var bitsmap_new = {
        _: 'BitsMap.new'
    };
    var bitsmap_tie = function(val, lft, rgt) {
        return {
            _: 'BitsMap.tip',
            val,
            lft,
            rgt
        };
    }
    var maybe_none = {
        _: 'Maybe.none'
    };
    var maybe_some = function(value) {
        return {
            _: 'Maybe.some',
            value
        };
    }
    var bitsmap_get = function(bits, map) {
        for (var i = bits.length - 1; i >= 0; --i) {
            if (map._ !== 'BitsMap.new') {
                map = bits[i] === '0' ? map.lft : map.rgt;
            }
        }
        return map._ === 'BitsMap.new' ? maybe_none : map.val;
    }
    var bitsmap_set = function(bits, val, map, mode) {
        var res = {
            value: map
        };
        var key = 'value';
        var obj = res;
        for (var i = bits.length - 1; i >= 0; --i) {
            var map = obj[key];
            if (map._ === 'BitsMap.new') {
                obj[key] = {
                    _: 'BitsMap.tie',
                    val: maybe_none,
                    lft: bitsmap_new,
                    rgt: bitsmap_new
                };
            } else {
                obj[key] = {
                    _: 'BitsMap.tie',
                    val: map.val,
                    lft: map.lft,
                    rgt: map.rgt
                };
            }
            obj = obj[key];
            key = bits[i] === '0' ? 'lft' : 'rgt';
        }
        var map = obj[key];
        if (map._ === 'BitsMap.new') {
            var x = mode === 'del' ? maybe_none : {
                _: 'Maybe.some',
                value: val
            };
            obj[key] = {
                _: 'BitsMap.tie',
                val: x,
                lft: bitsmap_new,
                rgt: bitsmap_new
            };
        } else {
            var x = mode === 'set' ? {
                _: 'Maybe.some',
                value: val
            } : mode === 'del' ? maybe_none : map.val;
            obj[key] = {
                _: 'BitsMap.tie',
                val: x,
                lft: map.lft,
                rgt: map.rgt
            };
        }
        return res.value;
    };
    var list_for = list => nil => cons => {
        while (list._ !== 'List.nil') {
            nil = cons(list.head)(nil);
            list = list.tail;
        }
        return nil;
    };
    var list_length = list => {
        var len = 0;
        while (list._ === 'List.cons') {
            len += 1;
            list = list.tail;
        };
        return BigInt(len);
    };
    var nat_to_bits = n => {
        return n === 0n ? '' : n.toString(2);
    };
    var kind_name_to_bits = name => {
        const TABLE = {
            'A': '000000',
            'B': '100000',
            'C': '010000',
            'D': '110000',
            'E': '001000',
            'F': '101000',
            'G': '011000',
            'H': '111000',
            'I': '000100',
            'J': '100100',
            'K': '010100',
            'L': '110100',
            'M': '001100',
            'N': '101100',
            'O': '011100',
            'P': '111100',
            'Q': '000010',
            'R': '100010',
            'S': '010010',
            'T': '110010',
            'U': '001010',
            'V': '101010',
            'W': '011010',
            'X': '111010',
            'Y': '000110',
            'Z': '100110',
            'a': '010110',
            'b': '110110',
            'c': '001110',
            'd': '101110',
            'e': '011110',
            'f': '111110',
            'g': '000001',
            'h': '100001',
            'i': '010001',
            'j': '110001',
            'k': '001001',
            'l': '101001',
            'm': '011001',
            'n': '111001',
            'o': '000101',
            'p': '100101',
            'q': '010101',
            'r': '110101',
            's': '001101',
            't': '101101',
            'u': '011101',
            'v': '111101',
            'w': '000011',
            'x': '100011',
            'y': '010011',
            'z': '110011',
            '0': '001011',
            '1': '101011',
            '2': '011011',
            '3': '111011',
            '4': '000111',
            '5': '100111',
            '6': '010111',
            '7': '110111',
            '8': '001111',
            '9': '101111',
            '.': '011111',
            '_': '111111',
        }
        var a = '';
        for (var i = name.length - 1; i >= 0; --i) {
            a += TABLE[name[i]];
        }
        return a;
    };
    const inst_unit = x => x(null);
    const elim_unit = (x => {
        var $1 = (() => c0 => {
            var self = x;
            switch ("unit") {
                case 'unit':
                    var $0 = c0;
                    return $0;
            };
        })();
        return $1;
    });
    const inst_bool = x => x(true)(false);
    const elim_bool = (x => {
        var $4 = (() => c0 => c1 => {
            var self = x;
            if (self) {
                var $2 = c0;
                return $2;
            } else {
                var $3 = c1;
                return $3;
            };
        })();
        return $4;
    });
    const inst_nat = x => x(0n)(x0 => 1n + x0);
    const elim_nat = (x => {
        var $8 = (() => c0 => c1 => {
            var self = x;
            if (self === 0n) {
                var $5 = c0;
                return $5;
            } else {
                var $6 = (self - 1n);
                var $7 = c1($6);
                return $7;
            };
        })();
        return $8;
    });
    const inst_bits = x => x('')(x0 => x0 + '0')(x0 => x0 + '1');
    const elim_bits = (x => {
        var $14 = (() => c0 => c1 => c2 => {
            var self = x;
            switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                case 'o':
                    var $9 = self.slice(0, -1);
                    var $10 = c1($9);
                    return $10;
                case 'i':
                    var $11 = self.slice(0, -1);
                    var $12 = c2($11);
                    return $12;
                case 'e':
                    var $13 = c0;
                    return $13;
            };
        })();
        return $14;
    });
    const inst_u16 = x => x(x0 => word_to_u16(x0));
    const elim_u16 = (x => {
        var $17 = (() => c0 => {
            var self = x;
            switch ('u16') {
                case 'u16':
                    var $15 = u16_to_word(self);
                    var $16 = c0($15);
                    return $16;
            };
        })();
        return $17;
    });
    const inst_string = x => x('')(x0 => x1 => (String.fromCharCode(x0) + x1));
    const elim_string = (x => {
        var $22 = (() => c0 => c1 => {
            var self = x;
            if (self.length === 0) {
                var $18 = c0;
                return $18;
            } else {
                var $19 = self.charCodeAt(0);
                var $20 = self.slice(1);
                var $21 = c1($19)($20);
                return $21;
            };
        })();
        return $22;
    });
    var run = (p) => {
        if (typeof window === 'undefined') {
            var rl = eval("require('readline')").createInterface({
                input: process.stdin,
                output: process.stdout,
                terminal: false
            });
            var fs = eval("require('fs')");
            var pc = eval("process");
            var ht = eval("require('http')");
            var hs = eval("require('https')");
        } else {
            var rl = {
                question: (x, f) => f(''),
                close: () => {}
            };
            var fs = {
                readFileSync: () => ''
            };
            var pc = {
                exit: () => {},
                argv: []
            };
            var ht = null;
            var hs = null;
        };
        return run_io({
            rl,
            fs,
            pc,
            ht,
            hs
        }, p).then((x) => {
            rl.close();
            return x;
        }).catch((e) => {
            rl.close();
            throw e;
        });
    };
    var set_file = (lib, param) => {
        var path = '';
        for (var i = 0; i < param.length && param[i] !== '='; ++i) {
            path += param[i];
        };
        var data = param.slice(i + 1);
        lib.fs.mkdirSync(path.split('/').slice(0, -1).join('/'), {
            recursive: true
        });
        lib.fs.writeFileSync(path, data);
        return '';
    };
    var del_file = (lib, param) => {
        try {
            lib.fs.unlinkSync(param);
            return '';
        } catch (e) {
            if (e.message.indexOf('EPERM') !== -1) {
                lib.fs.rmdirSync(param);
                return '';
            } else {
                throw e;
            }
        }
    };
    var get_file = (lib, param) => {
        return lib.fs.readFileSync(param, 'utf8');
    }
    var get_dir = (lib, param) => {
        return lib.fs.readdirSync(param).join(';');
    };
    var get_file_mtime = (lib, param) => {
        return String(lib.fs.statSync(param).mtime.getTime());
    };
    var request = (lib, param) => {
        if (typeof fetch === 'undefined') {
            return new Promise((res, err) => {
                (/^https/.test(param) ? lib.hs : lib.ht).get(param, r => {
                    let data = '';
                    r.on('data', chunk => {
                        data += chunk;
                    });
                    r.on('end', () => res(data));
                }).on('error', e => res(''));
            });
        } else {
            return fetch(param).then(res => res.text()).catch(e => '');
        }
    }
    var file_error = e => {
        if (e.message.indexOf('NOENT') !== -1) {
            return '';
        } else {
            throw e;
        }
    };
    var io_action = {
        print: async (lib, param) => {
            console.log(param);
            return '';
        },
        put_string: async (lib, param) => {
            process.stdout.write(param);
            return '';
        },
        get_file: async (lib, param) => {
            try {
                return get_file(lib, param);
            } catch (e) {
                return file_error(e);
            }
        },
        set_file: async (lib, param) => {
            try {
                return set_file(lib, param)
            } catch (e) {
                return file_error(e);
            }
        },
        del_file: async (lib, param) => {
            try {
                return del_file(lib, param);
            } catch (e) {
                return file_error(e);
            }
        },
        get_dir: async (lib, param) => {
            try {
                return get_dir(lib, param);
            } catch (e) {
                return file_error(e);
            }
        },
        get_file_mtime: async (lib, param) => {
            try {
                return get_file_mtime(lib, param);
            } catch (e) {
                return file_error(e);
            }
        },
        get_time: async (lib, param) => {
            return String(Date.now());
        },
        exit: async (lib, param) => {
            lib.pc.exit();
            return '';
        },
        request: async (lib, param) => {
            return request(lib, param);
        },
        get_time: async (lib, param) => {
            return String(Date.now());
        },
        get_line: async (lib, param) => {
            return await new Promise((res, err) => {
                lib.rl.question(p.param, (line) => res(line));
            });
        },
        get_args: async (lib, param) => {
            return lib.pc.argv[2] || '';
        },
    };
    var run_io = async (lib, io, depth = 0) => {
        switch (io._) {
            case 'IO.end':
                return Promise.resolve(io.value);
            case 'IO.ask':
                var action = io_action[io.query];
                var answer = await action(lib, io.param);
                return await run_io(lib, io.then(answer), depth + 1);
        }
    };

    function IO$(_A$1) {
        var $23 = null;
        return $23;
    };
    const IO = x0 => IO$(x0);

    function IO$ask$(_query$2, _param$3, _then$4) {
        var $24 = ({
            _: 'IO.ask',
            'query': _query$2,
            'param': _param$3,
            'then': _then$4
        });
        return $24;
    };
    const IO$ask = x0 => x1 => x2 => IO$ask$(x0, x1, x2);

    function IO$bind$(_a$3, _f$4) {
        var self = _a$3;
        switch (self._) {
            case 'IO.end':
                var $26 = self.value;
                var $27 = _f$4($26);
                var $25 = $27;
                break;
            case 'IO.ask':
                var $28 = self.query;
                var $29 = self.param;
                var $30 = self.then;
                var $31 = IO$ask$($28, $29, (_x$8 => {
                    var $32 = IO$bind$($30(_x$8), _f$4);
                    return $32;
                }));
                var $25 = $31;
                break;
        };
        return $25;
    };
    const IO$bind = x0 => x1 => IO$bind$(x0, x1);

    function IO$end$(_value$2) {
        var $33 = ({
            _: 'IO.end',
            'value': _value$2
        });
        return $33;
    };
    const IO$end = x0 => IO$end$(x0);

    function IO$monad$(_new$2) {
        var $34 = _new$2(IO$bind)(IO$end);
        return $34;
    };
    const IO$monad = x0 => IO$monad$(x0);

    function Maybe$(_A$1) {
        var $35 = null;
        return $35;
    };
    const Maybe = x0 => Maybe$(x0);

    function BitsMap$(_A$1) {
        var $36 = null;
        return $36;
    };
    const BitsMap = x0 => BitsMap$(x0);
    const Maybe$none = ({
        _: 'Maybe.none'
    });
    const BitsMap$get = a0 => a1 => (bitsmap_get(a0, a1));
    const Bits$e = '';
    const Bits$o = a0 => (a0 + '0');
    const Bits$i = a0 => (a0 + '1');
    const Bool$true = true;
    const Bool$false = false;

    function Cmp$as_ltn$(_cmp$1) {
        var self = _cmp$1;
        switch (self._) {
            case 'Cmp.ltn':
                var $38 = Bool$true;
                var $37 = $38;
                break;
            case 'Cmp.eql':
            case 'Cmp.gtn':
                var $39 = Bool$false;
                var $37 = $39;
                break;
        };
        return $37;
    };
    const Cmp$as_ltn = x0 => Cmp$as_ltn$(x0);
    const Cmp$ltn = ({
        _: 'Cmp.ltn'
    });
    const Cmp$gtn = ({
        _: 'Cmp.gtn'
    });

    function Word$cmp$go$(_a$2, _b$3, _c$4) {
        var self = _a$2;
        switch (self._) {
            case 'Word.o':
                var $41 = self.pred;
                var $42 = (_b$7 => {
                    var self = _b$7;
                    switch (self._) {
                        case 'Word.o':
                            var $44 = self.pred;
                            var $45 = (_a$pred$10 => {
                                var $46 = Word$cmp$go$(_a$pred$10, $44, _c$4);
                                return $46;
                            });
                            var $43 = $45;
                            break;
                        case 'Word.i':
                            var $47 = self.pred;
                            var $48 = (_a$pred$10 => {
                                var $49 = Word$cmp$go$(_a$pred$10, $47, Cmp$ltn);
                                return $49;
                            });
                            var $43 = $48;
                            break;
                        case 'Word.e':
                            var $50 = (_a$pred$8 => {
                                var $51 = _c$4;
                                return $51;
                            });
                            var $43 = $50;
                            break;
                    };
                    var $43 = $43($41);
                    return $43;
                });
                var $40 = $42;
                break;
            case 'Word.i':
                var $52 = self.pred;
                var $53 = (_b$7 => {
                    var self = _b$7;
                    switch (self._) {
                        case 'Word.o':
                            var $55 = self.pred;
                            var $56 = (_a$pred$10 => {
                                var $57 = Word$cmp$go$(_a$pred$10, $55, Cmp$gtn);
                                return $57;
                            });
                            var $54 = $56;
                            break;
                        case 'Word.i':
                            var $58 = self.pred;
                            var $59 = (_a$pred$10 => {
                                var $60 = Word$cmp$go$(_a$pred$10, $58, _c$4);
                                return $60;
                            });
                            var $54 = $59;
                            break;
                        case 'Word.e':
                            var $61 = (_a$pred$8 => {
                                var $62 = _c$4;
                                return $62;
                            });
                            var $54 = $61;
                            break;
                    };
                    var $54 = $54($52);
                    return $54;
                });
                var $40 = $53;
                break;
            case 'Word.e':
                var $63 = (_b$5 => {
                    var $64 = _c$4;
                    return $64;
                });
                var $40 = $63;
                break;
        };
        var $40 = $40(_b$3);
        return $40;
    };
    const Word$cmp$go = x0 => x1 => x2 => Word$cmp$go$(x0, x1, x2);
    const Cmp$eql = ({
        _: 'Cmp.eql'
    });

    function Word$cmp$(_a$2, _b$3) {
        var $65 = Word$cmp$go$(_a$2, _b$3, Cmp$eql);
        return $65;
    };
    const Word$cmp = x0 => x1 => Word$cmp$(x0, x1);

    function Word$ltn$(_a$2, _b$3) {
        var $66 = Cmp$as_ltn$(Word$cmp$(_a$2, _b$3));
        return $66;
    };
    const Word$ltn = x0 => x1 => Word$ltn$(x0, x1);

    function Nat$succ$(_pred$1) {
        var $67 = 1n + _pred$1;
        return $67;
    };
    const Nat$succ = x0 => Nat$succ$(x0);
    const Nat$zero = 0n;
    const U16$ltn = a0 => a1 => (a0 < a1);

    function U16$new$(_value$1) {
        var $68 = word_to_u16(_value$1);
        return $68;
    };
    const U16$new = x0 => U16$new$(x0);

    function Nat$apply$(_n$2, _f$3, _x$4) {
        var Nat$apply$ = (_n$2, _f$3, _x$4) => ({
            ctr: 'TCO',
            arg: [_n$2, _f$3, _x$4]
        });
        var Nat$apply = _n$2 => _f$3 => _x$4 => Nat$apply$(_n$2, _f$3, _x$4);
        var arg = [_n$2, _f$3, _x$4];
        while (true) {
            let [_n$2, _f$3, _x$4] = arg;
            var R = (() => {
                var self = _n$2;
                if (self === 0n) {
                    var $69 = _x$4;
                    return $69;
                } else {
                    var $70 = (self - 1n);
                    var $71 = Nat$apply$($70, _f$3, _f$3(_x$4));
                    return $71;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Nat$apply = x0 => x1 => x2 => Nat$apply$(x0, x1, x2);

    function Word$(_size$1) {
        var $72 = null;
        return $72;
    };
    const Word = x0 => Word$(x0);
    const Word$e = ({
        _: 'Word.e'
    });

    function Word$i$(_pred$2) {
        var $73 = ({
            _: 'Word.i',
            'pred': _pred$2
        });
        return $73;
    };
    const Word$i = x0 => Word$i$(x0);

    function Word$o$(_pred$2) {
        var $74 = ({
            _: 'Word.o',
            'pred': _pred$2
        });
        return $74;
    };
    const Word$o = x0 => Word$o$(x0);

    function Word$inc$(_word$2) {
        var self = _word$2;
        switch (self._) {
            case 'Word.o':
                var $76 = self.pred;
                var $77 = Word$i$($76);
                var $75 = $77;
                break;
            case 'Word.i':
                var $78 = self.pred;
                var $79 = Word$o$(Word$inc$($78));
                var $75 = $79;
                break;
            case 'Word.e':
                var $80 = Word$e;
                var $75 = $80;
                break;
        };
        return $75;
    };
    const Word$inc = x0 => Word$inc$(x0);

    function Word$zero$(_size$1) {
        var self = _size$1;
        if (self === 0n) {
            var $82 = Word$e;
            var $81 = $82;
        } else {
            var $83 = (self - 1n);
            var $84 = Word$o$(Word$zero$($83));
            var $81 = $84;
        };
        return $81;
    };
    const Word$zero = x0 => Word$zero$(x0);

    function Nat$to_word$(_size$1, _n$2) {
        var $85 = Nat$apply$(_n$2, Word$inc, Word$zero$(_size$1));
        return $85;
    };
    const Nat$to_word = x0 => x1 => Nat$to_word$(x0, x1);
    const Nat$to_u16 = a0 => (Number(a0) & 0xFFFF);
    const Kind$Name$to_bits = a0 => (kind_name_to_bits(a0));

    function Kind$Map$get$(_name$2, _map$3) {
        var $86 = (bitsmap_get((kind_name_to_bits(_name$2)), _map$3));
        return $86;
    };
    const Kind$Map$get = x0 => x1 => Kind$Map$get$(x0, x1);

    function Parser$Reply$(_V$1) {
        var $87 = null;
        return $87;
    };
    const Parser$Reply = x0 => Parser$Reply$(x0);

    function List$(_A$1) {
        var $88 = null;
        return $88;
    };
    const List = x0 => List$(x0);

    function Parser$Reply$error$(_idx$2, _code$3, _err$4) {
        var $89 = ({
            _: 'Parser.Reply.error',
            'idx': _idx$2,
            'code': _code$3,
            'err': _err$4
        });
        return $89;
    };
    const Parser$Reply$error = x0 => x1 => x2 => Parser$Reply$error$(x0, x1, x2);

    function Parser$Reply$value$(_idx$2, _code$3, _val$4) {
        var $90 = ({
            _: 'Parser.Reply.value',
            'idx': _idx$2,
            'code': _code$3,
            'val': _val$4
        });
        return $90;
    };
    const Parser$Reply$value = x0 => x1 => x2 => Parser$Reply$value$(x0, x1, x2);
    const List$nil = ({
        _: 'List.nil'
    });

    function List$cons$(_head$2, _tail$3) {
        var $91 = ({
            _: 'List.cons',
            'head': _head$2,
            'tail': _tail$3
        });
        return $91;
    };
    const List$cons = x0 => x1 => List$cons$(x0, x1);

    function Parser$many$go$(_parse$2, _values$3, _idx$4, _code$5) {
        var Parser$many$go$ = (_parse$2, _values$3, _idx$4, _code$5) => ({
            ctr: 'TCO',
            arg: [_parse$2, _values$3, _idx$4, _code$5]
        });
        var Parser$many$go = _parse$2 => _values$3 => _idx$4 => _code$5 => Parser$many$go$(_parse$2, _values$3, _idx$4, _code$5);
        var arg = [_parse$2, _values$3, _idx$4, _code$5];
        while (true) {
            let [_parse$2, _values$3, _idx$4, _code$5] = arg;
            var R = (() => {
                var self = _parse$2(_idx$4)(_code$5);
                switch (self._) {
                    case 'Parser.Reply.value':
                        var $92 = self.idx;
                        var $93 = self.code;
                        var $94 = self.val;
                        var $95 = Parser$many$go$(_parse$2, (_xs$9 => {
                            var $96 = _values$3(List$cons$($94, _xs$9));
                            return $96;
                        }), $92, $93);
                        return $95;
                    case 'Parser.Reply.error':
                        var $97 = Parser$Reply$value$(_idx$4, _code$5, _values$3(List$nil));
                        return $97;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Parser$many$go = x0 => x1 => x2 => x3 => Parser$many$go$(x0, x1, x2, x3);

    function Parser$many$(_parser$2) {
        var $98 = Parser$many$go(_parser$2)((_x$3 => {
            var $99 = _x$3;
            return $99;
        }));
        return $98;
    };
    const Parser$many = x0 => Parser$many$(x0);

    function Parser$many1$(_parser$2, _idx$3, _code$4) {
        var self = _parser$2(_idx$3)(_code$4);
        switch (self._) {
            case 'Parser.Reply.error':
                var $101 = self.idx;
                var $102 = self.code;
                var $103 = self.err;
                var $104 = Parser$Reply$error$($101, $102, $103);
                var $100 = $104;
                break;
            case 'Parser.Reply.value':
                var $105 = self.idx;
                var $106 = self.code;
                var $107 = self.val;
                var self = Parser$many$(_parser$2)($105)($106);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $109 = self.idx;
                        var $110 = self.code;
                        var $111 = self.err;
                        var $112 = Parser$Reply$error$($109, $110, $111);
                        var $108 = $112;
                        break;
                    case 'Parser.Reply.value':
                        var $113 = self.idx;
                        var $114 = self.code;
                        var $115 = self.val;
                        var $116 = Parser$Reply$value$($113, $114, List$cons$($107, $115));
                        var $108 = $116;
                        break;
                };
                var $100 = $108;
                break;
        };
        return $100;
    };
    const Parser$many1 = x0 => x1 => x2 => Parser$many1$(x0, x1, x2);

    function Cmp$as_eql$(_cmp$1) {
        var self = _cmp$1;
        switch (self._) {
            case 'Cmp.ltn':
            case 'Cmp.gtn':
                var $118 = Bool$false;
                var $117 = $118;
                break;
            case 'Cmp.eql':
                var $119 = Bool$true;
                var $117 = $119;
                break;
        };
        return $117;
    };
    const Cmp$as_eql = x0 => Cmp$as_eql$(x0);

    function Word$eql$(_a$2, _b$3) {
        var $120 = Cmp$as_eql$(Word$cmp$(_a$2, _b$3));
        return $120;
    };
    const Word$eql = x0 => x1 => Word$eql$(x0, x1);
    const U16$eql = a0 => a1 => (a0 === a1);

    function Parser$digit$(_idx$1, _code$2) {
        var self = _code$2;
        if (self.length === 0) {
            var $122 = Parser$Reply$error$(_idx$1, _code$2, "Not a digit.");
            var $121 = $122;
        } else {
            var $123 = self.charCodeAt(0);
            var $124 = self.slice(1);
            var _sidx$5 = Nat$succ$(_idx$1);
            var self = ($123 === 48);
            if (self) {
                var $126 = Parser$Reply$value$(_sidx$5, $124, 0n);
                var $125 = $126;
            } else {
                var self = ($123 === 49);
                if (self) {
                    var $128 = Parser$Reply$value$(_sidx$5, $124, 1n);
                    var $127 = $128;
                } else {
                    var self = ($123 === 50);
                    if (self) {
                        var $130 = Parser$Reply$value$(_sidx$5, $124, 2n);
                        var $129 = $130;
                    } else {
                        var self = ($123 === 51);
                        if (self) {
                            var $132 = Parser$Reply$value$(_sidx$5, $124, 3n);
                            var $131 = $132;
                        } else {
                            var self = ($123 === 52);
                            if (self) {
                                var $134 = Parser$Reply$value$(_sidx$5, $124, 4n);
                                var $133 = $134;
                            } else {
                                var self = ($123 === 53);
                                if (self) {
                                    var $136 = Parser$Reply$value$(_sidx$5, $124, 5n);
                                    var $135 = $136;
                                } else {
                                    var self = ($123 === 54);
                                    if (self) {
                                        var $138 = Parser$Reply$value$(_sidx$5, $124, 6n);
                                        var $137 = $138;
                                    } else {
                                        var self = ($123 === 55);
                                        if (self) {
                                            var $140 = Parser$Reply$value$(_sidx$5, $124, 7n);
                                            var $139 = $140;
                                        } else {
                                            var self = ($123 === 56);
                                            if (self) {
                                                var $142 = Parser$Reply$value$(_sidx$5, $124, 8n);
                                                var $141 = $142;
                                            } else {
                                                var self = ($123 === 57);
                                                if (self) {
                                                    var $144 = Parser$Reply$value$(_sidx$5, $124, 9n);
                                                    var $143 = $144;
                                                } else {
                                                    var $145 = Parser$Reply$error$(_idx$1, _code$2, "Not a digit.");
                                                    var $143 = $145;
                                                };
                                                var $141 = $143;
                                            };
                                            var $139 = $141;
                                        };
                                        var $137 = $139;
                                    };
                                    var $135 = $137;
                                };
                                var $133 = $135;
                            };
                            var $131 = $133;
                        };
                        var $129 = $131;
                    };
                    var $127 = $129;
                };
                var $125 = $127;
            };
            var $121 = $125;
        };
        return $121;
    };
    const Parser$digit = x0 => x1 => Parser$digit$(x0, x1);
    const Nat$add = a0 => a1 => (a0 + a1);
    const Nat$mul = a0 => a1 => (a0 * a1);

    function Nat$from_base$go$(_b$1, _ds$2, _p$3, _res$4) {
        var Nat$from_base$go$ = (_b$1, _ds$2, _p$3, _res$4) => ({
            ctr: 'TCO',
            arg: [_b$1, _ds$2, _p$3, _res$4]
        });
        var Nat$from_base$go = _b$1 => _ds$2 => _p$3 => _res$4 => Nat$from_base$go$(_b$1, _ds$2, _p$3, _res$4);
        var arg = [_b$1, _ds$2, _p$3, _res$4];
        while (true) {
            let [_b$1, _ds$2, _p$3, _res$4] = arg;
            var R = (() => {
                var self = _ds$2;
                switch (self._) {
                    case 'List.cons':
                        var $146 = self.head;
                        var $147 = self.tail;
                        var $148 = Nat$from_base$go$(_b$1, $147, (_b$1 * _p$3), (($146 * _p$3) + _res$4));
                        return $148;
                    case 'List.nil':
                        var $149 = _res$4;
                        return $149;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Nat$from_base$go = x0 => x1 => x2 => x3 => Nat$from_base$go$(x0, x1, x2, x3);

    function List$reverse$go$(_xs$2, _res$3) {
        var List$reverse$go$ = (_xs$2, _res$3) => ({
            ctr: 'TCO',
            arg: [_xs$2, _res$3]
        });
        var List$reverse$go = _xs$2 => _res$3 => List$reverse$go$(_xs$2, _res$3);
        var arg = [_xs$2, _res$3];
        while (true) {
            let [_xs$2, _res$3] = arg;
            var R = (() => {
                var self = _xs$2;
                switch (self._) {
                    case 'List.cons':
                        var $150 = self.head;
                        var $151 = self.tail;
                        var $152 = List$reverse$go$($151, List$cons$($150, _res$3));
                        return $152;
                    case 'List.nil':
                        var $153 = _res$3;
                        return $153;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const List$reverse$go = x0 => x1 => List$reverse$go$(x0, x1);

    function List$reverse$(_xs$2) {
        var $154 = List$reverse$go$(_xs$2, List$nil);
        return $154;
    };
    const List$reverse = x0 => List$reverse$(x0);

    function Nat$from_base$(_base$1, _ds$2) {
        var $155 = Nat$from_base$go$(_base$1, List$reverse$(_ds$2), 1n, 0n);
        return $155;
    };
    const Nat$from_base = x0 => x1 => Nat$from_base$(x0, x1);

    function Parser$nat$(_idx$1, _code$2) {
        var self = Parser$many1$(Parser$digit, _idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $157 = self.idx;
                var $158 = self.code;
                var $159 = self.err;
                var $160 = Parser$Reply$error$($157, $158, $159);
                var $156 = $160;
                break;
            case 'Parser.Reply.value':
                var $161 = self.idx;
                var $162 = self.code;
                var $163 = self.val;
                var $164 = Parser$Reply$value$($161, $162, Nat$from_base$(10n, $163));
                var $156 = $164;
                break;
        };
        return $156;
    };
    const Parser$nat = x0 => x1 => Parser$nat$(x0, x1);

    function Nat$read$(_str$1) {
        var _p$2 = Parser$nat$(0n, _str$1);
        var self = _p$2;
        switch (self._) {
            case 'Parser.Reply.value':
                var $166 = self.val;
                var $167 = $166;
                var $165 = $167;
                break;
            case 'Parser.Reply.error':
                var $168 = 0n;
                var $165 = $168;
                break;
        };
        return $165;
    };
    const Nat$read = x0 => Nat$read$(x0);
    const IO$get_time = IO$ask$("get_time", "", (_time$1 => {
        var $169 = IO$end$(Nat$read$(_time$1));
        return $169;
    }));

    function Maybe$some$(_value$2) {
        var $170 = ({
            _: 'Maybe.some',
            'value': _value$2
        });
        return $170;
    };
    const Maybe$some = x0 => Maybe$some$(x0);

    function Kind$Synth$load$cached$is_loop$(_name$1, _defs$2) {
        var self = Kind$Map$get$(_name$1, _defs$2);
        switch (self._) {
            case 'Maybe.some':
                var $172 = self.value;
                var self = $172;
                switch (self._) {
                    case 'Kind.Def.new':
                        var $174 = self.stat;
                        var self = $174;
                        switch (self._) {
                            case 'Kind.Status.done':
                                var $176 = self.cached;
                                var $177 = $176;
                                var $175 = $177;
                                break;
                            case 'Kind.Status.init':
                            case 'Kind.Status.wait':
                            case 'Kind.Status.fail':
                                var $178 = Bool$false;
                                var $175 = $178;
                                break;
                        };
                        var $173 = $175;
                        break;
                };
                var $171 = $173;
                break;
            case 'Maybe.none':
                var $179 = Bool$false;
                var $171 = $179;
                break;
        };
        return $171;
    };
    const Kind$Synth$load$cached$is_loop = x0 => x1 => Kind$Synth$load$cached$is_loop$(x0, x1);

    function IO$get_file$(_name$1) {
        var $180 = IO$ask$("get_file", _name$1, (_file$2 => {
            var $181 = IO$end$(_file$2);
            return $181;
        }));
        return $180;
    };
    const IO$get_file = x0 => IO$get_file$(x0);

    function String$cons$(_head$1, _tail$2) {
        var $182 = (String.fromCharCode(_head$1) + _tail$2);
        return $182;
    };
    const String$cons = x0 => x1 => String$cons$(x0, x1);
    const String$concat = a0 => a1 => (a0 + a1);
    const Bool$not = a0 => (!a0);

    function String$is_empty$(_str$1) {
        var self = _str$1;
        if (self.length === 0) {
            var $184 = Bool$true;
            var $183 = $184;
        } else {
            var $185 = self.charCodeAt(0);
            var $186 = self.slice(1);
            var $187 = Bool$false;
            var $183 = $187;
        };
        return $183;
    };
    const String$is_empty = x0 => String$is_empty$(x0);

    function IO$get_file_mtime$(_name$1) {
        var $188 = IO$ask$("get_file_mtime", _name$1, (_file$2 => {
            var $189 = IO$end$(_file$2);
            return $189;
        }));
        return $188;
    };
    const IO$get_file_mtime = x0 => IO$get_file_mtime$(x0);
    const Bool$and = a0 => a1 => (a0 && a1);
    const String$eql = a0 => a1 => (a0 === a1);

    function Pair$new$(_fst$3, _snd$4) {
        var $190 = ({
            _: 'Pair.new',
            'fst': _fst$3,
            'snd': _snd$4
        });
        return $190;
    };
    const Pair$new = x0 => x1 => Pair$new$(x0, x1);

    function Maybe$bind$(_m$3, _f$4) {
        var self = _m$3;
        switch (self._) {
            case 'Maybe.some':
                var $192 = self.value;
                var $193 = _f$4($192);
                var $191 = $193;
                break;
            case 'Maybe.none':
                var $194 = Maybe$none;
                var $191 = $194;
                break;
        };
        return $191;
    };
    const Maybe$bind = x0 => x1 => Maybe$bind$(x0, x1);

    function Maybe$monad$(_new$2) {
        var $195 = _new$2(Maybe$bind)(Maybe$some);
        return $195;
    };
    const Maybe$monad = x0 => Maybe$monad$(x0);

    function Pair$(_A$1, _B$2) {
        var $196 = null;
        return $196;
    };
    const Pair = x0 => x1 => Pair$(x0, x1);
    const Unit$new = null;
    const Bool$or = a0 => a1 => (a0 || a1);

    function Kind$Core$read$spaces$(_code$1) {
        var Kind$Core$read$spaces$ = (_code$1) => ({
            ctr: 'TCO',
            arg: [_code$1]
        });
        var Kind$Core$read$spaces = _code$1 => Kind$Core$read$spaces$(_code$1);
        var arg = [_code$1];
        while (true) {
            let [_code$1] = arg;
            var R = (() => {
                var self = _code$1;
                if (self.length === 0) {
                    var $197 = Pair$new$(_code$1, Unit$new);
                    return $197;
                } else {
                    var $198 = self.charCodeAt(0);
                    var $199 = self.slice(1);
                    var _is_space$4 = (($198 === 32) || (($198 === 10) || (($198 === 13) || (($198 === 9) || (($198 === 11) || (($198 === 12) || Bool$false))))));
                    var self = _is_space$4;
                    if (self) {
                        var $201 = Kind$Core$read$spaces$($199);
                        var $200 = $201;
                    } else {
                        var $202 = Pair$new$(_code$1, Unit$new);
                        var $200 = $202;
                    };
                    return $200;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Kind$Core$read$spaces = x0 => Kind$Core$read$spaces$(x0);

    function Kind$Term$ref$(_name$1) {
        var $203 = ({
            _: 'Kind.Term.ref',
            'name': _name$1
        });
        return $203;
    };
    const Kind$Term$ref = x0 => Kind$Term$ref$(x0);

    function Char$eql$(_a$1, _b$2) {
        var $204 = (_a$1 === _b$2);
        return $204;
    };
    const Char$eql = x0 => x1 => Char$eql$(x0, x1);
    const Kind$Term$typ = ({
        _: 'Kind.Term.typ'
    });

    function Cmp$as_gte$(_cmp$1) {
        var self = _cmp$1;
        switch (self._) {
            case 'Cmp.ltn':
                var $206 = Bool$false;
                var $205 = $206;
                break;
            case 'Cmp.eql':
            case 'Cmp.gtn':
                var $207 = Bool$true;
                var $205 = $207;
                break;
        };
        return $205;
    };
    const Cmp$as_gte = x0 => Cmp$as_gte$(x0);

    function Word$gte$(_a$2, _b$3) {
        var $208 = Cmp$as_gte$(Word$cmp$(_a$2, _b$3));
        return $208;
    };
    const Word$gte = x0 => x1 => Word$gte$(x0, x1);
    const U16$gte = a0 => a1 => (a0 >= a1);

    function Cmp$as_lte$(_cmp$1) {
        var self = _cmp$1;
        switch (self._) {
            case 'Cmp.ltn':
            case 'Cmp.eql':
                var $210 = Bool$true;
                var $209 = $210;
                break;
            case 'Cmp.gtn':
                var $211 = Bool$false;
                var $209 = $211;
                break;
        };
        return $209;
    };
    const Cmp$as_lte = x0 => Cmp$as_lte$(x0);

    function Word$lte$(_a$2, _b$3) {
        var $212 = Cmp$as_lte$(Word$cmp$(_a$2, _b$3));
        return $212;
    };
    const Word$lte = x0 => x1 => Word$lte$(x0, x1);
    const U16$lte = a0 => a1 => (a0 <= a1);

    function Kind$Core$read$is_name$(_chr$1) {
        var $213 = (((_chr$1 >= 46) && (_chr$1 <= 47)) || (((_chr$1 >= 48) && (_chr$1 < 58)) || (((_chr$1 >= 65) && (_chr$1 < 91)) || (((_chr$1 >= 95) && (_chr$1 < 96)) || (((_chr$1 >= 97) && (_chr$1 < 123)) || Bool$false)))));
        return $213;
    };
    const Kind$Core$read$is_name = x0 => Kind$Core$read$is_name$(x0);

    function Kind$Core$read$name$(_code$1) {
        var self = _code$1;
        if (self.length === 0) {
            var $215 = Pair$new$(_code$1, "");
            var $214 = $215;
        } else {
            var $216 = self.charCodeAt(0);
            var $217 = self.slice(1);
            var self = Kind$Core$read$is_name$($216);
            if (self) {
                var self = Kind$Core$read$name$($217);
                switch (self._) {
                    case 'Pair.new':
                        var $220 = self.fst;
                        var $221 = self.snd;
                        var $222 = Pair$new$($220, String$cons$($216, $221));
                        var $219 = $222;
                        break;
                };
                var $218 = $219;
            } else {
                var $223 = Pair$new$(_code$1, "");
                var $218 = $223;
            };
            var $214 = $218;
        };
        return $214;
    };
    const Kind$Core$read$name = x0 => Kind$Core$read$name$(x0);

    function Kind$Core$read$char$(_code$1, _chr$2) {
        var self = Kind$Core$read$spaces$(_code$1);
        switch (self._) {
            case 'Pair.new':
                var $225 = self.fst;
                var self = $225;
                if (self.length === 0) {
                    var $227 = Pair$new$("", Unit$new);
                    var $226 = $227;
                } else {
                    var $228 = self.charCodeAt(0);
                    var $229 = self.slice(1);
                    var self = ($228 === _chr$2);
                    if (self) {
                        var $231 = Pair$new$($229, Unit$new);
                        var $230 = $231;
                    } else {
                        var $232 = Pair$new$("", Unit$new);
                        var $230 = $232;
                    };
                    var $226 = $230;
                };
                var $224 = $226;
                break;
        };
        return $224;
    };
    const Kind$Core$read$char = x0 => x1 => Kind$Core$read$char$(x0, x1);

    function Kind$Term$all$(_eras$1, _self$2, _name$3, _xtyp$4, _body$5) {
        var $233 = ({
            _: 'Kind.Term.all',
            'eras': _eras$1,
            'self': _self$2,
            'name': _name$3,
            'xtyp': _xtyp$4,
            'body': _body$5
        });
        return $233;
    };
    const Kind$Term$all = x0 => x1 => x2 => x3 => x4 => Kind$Term$all$(x0, x1, x2, x3, x4);

    function Kind$Term$lam$(_name$1, _body$2) {
        var $234 = ({
            _: 'Kind.Term.lam',
            'name': _name$1,
            'body': _body$2
        });
        return $234;
    };
    const Kind$Term$lam = x0 => x1 => Kind$Term$lam$(x0, x1);

    function Kind$Term$app$(_func$1, _argm$2) {
        var $235 = ({
            _: 'Kind.Term.app',
            'func': _func$1,
            'argm': _argm$2
        });
        return $235;
    };
    const Kind$Term$app = x0 => x1 => Kind$Term$app$(x0, x1);

    function Kind$Term$let$(_name$1, _expr$2, _body$3) {
        var $236 = ({
            _: 'Kind.Term.let',
            'name': _name$1,
            'expr': _expr$2,
            'body': _body$3
        });
        return $236;
    };
    const Kind$Term$let = x0 => x1 => x2 => Kind$Term$let$(x0, x1, x2);

    function Kind$Term$def$(_name$1, _expr$2, _body$3) {
        var $237 = ({
            _: 'Kind.Term.def',
            'name': _name$1,
            'expr': _expr$2,
            'body': _body$3
        });
        return $237;
    };
    const Kind$Term$def = x0 => x1 => x2 => Kind$Term$def$(x0, x1, x2);

    function Kind$Term$ann$(_done$1, _term$2, _type$3) {
        var $238 = ({
            _: 'Kind.Term.ann',
            'done': _done$1,
            'term': _term$2,
            'type': _type$3
        });
        return $238;
    };
    const Kind$Term$ann = x0 => x1 => x2 => Kind$Term$ann$(x0, x1, x2);

    function String$starts_with$(_xs$1, _match$2) {
        var String$starts_with$ = (_xs$1, _match$2) => ({
            ctr: 'TCO',
            arg: [_xs$1, _match$2]
        });
        var String$starts_with = _xs$1 => _match$2 => String$starts_with$(_xs$1, _match$2);
        var arg = [_xs$1, _match$2];
        while (true) {
            let [_xs$1, _match$2] = arg;
            var R = (() => {
                var self = _match$2;
                if (self.length === 0) {
                    var $239 = Bool$true;
                    return $239;
                } else {
                    var $240 = self.charCodeAt(0);
                    var $241 = self.slice(1);
                    var self = _xs$1;
                    if (self.length === 0) {
                        var $243 = Bool$false;
                        var $242 = $243;
                    } else {
                        var $244 = self.charCodeAt(0);
                        var $245 = self.slice(1);
                        var self = Char$eql$($240, $244);
                        if (self) {
                            var $247 = String$starts_with$($245, $241);
                            var $246 = $247;
                        } else {
                            var $248 = Bool$false;
                            var $246 = $248;
                        };
                        var $242 = $246;
                    };
                    return $242;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const String$starts_with = x0 => x1 => String$starts_with$(x0, x1);
    const String$nil = '';

    function String$drop$(_n$1, _xs$2) {
        var String$drop$ = (_n$1, _xs$2) => ({
            ctr: 'TCO',
            arg: [_n$1, _xs$2]
        });
        var String$drop = _n$1 => _xs$2 => String$drop$(_n$1, _xs$2);
        var arg = [_n$1, _xs$2];
        while (true) {
            let [_n$1, _xs$2] = arg;
            var R = (() => {
                var self = _n$1;
                if (self === 0n) {
                    var $249 = _xs$2;
                    return $249;
                } else {
                    var $250 = (self - 1n);
                    var self = _xs$2;
                    if (self.length === 0) {
                        var $252 = String$nil;
                        var $251 = $252;
                    } else {
                        var $253 = self.charCodeAt(0);
                        var $254 = self.slice(1);
                        var $255 = String$drop$($250, $254);
                        var $251 = $255;
                    };
                    return $251;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const String$drop = x0 => x1 => String$drop$(x0, x1);

    function Char$is_hex$(_chr$1) {
        var $256 = (((_chr$1 >= 48) && (_chr$1 <= 57)) || (((_chr$1 >= 97) && (_chr$1 <= 102)) || (((_chr$1 >= 65) && (_chr$1 <= 70)) || Bool$false)));
        return $256;
    };
    const Char$is_hex = x0 => Char$is_hex$(x0);

    function Word$adder$(_a$2, _b$3, _c$4) {
        var self = _a$2;
        switch (self._) {
            case 'Word.o':
                var $258 = self.pred;
                var $259 = (_b$7 => {
                    var self = _b$7;
                    switch (self._) {
                        case 'Word.o':
                            var $261 = self.pred;
                            var $262 = (_a$pred$10 => {
                                var self = _c$4;
                                if (self) {
                                    var $264 = Word$i$(Word$adder$(_a$pred$10, $261, Bool$false));
                                    var $263 = $264;
                                } else {
                                    var $265 = Word$o$(Word$adder$(_a$pred$10, $261, Bool$false));
                                    var $263 = $265;
                                };
                                return $263;
                            });
                            var $260 = $262;
                            break;
                        case 'Word.i':
                            var $266 = self.pred;
                            var $267 = (_a$pred$10 => {
                                var self = _c$4;
                                if (self) {
                                    var $269 = Word$o$(Word$adder$(_a$pred$10, $266, Bool$true));
                                    var $268 = $269;
                                } else {
                                    var $270 = Word$i$(Word$adder$(_a$pred$10, $266, Bool$false));
                                    var $268 = $270;
                                };
                                return $268;
                            });
                            var $260 = $267;
                            break;
                        case 'Word.e':
                            var $271 = (_a$pred$8 => {
                                var $272 = Word$e;
                                return $272;
                            });
                            var $260 = $271;
                            break;
                    };
                    var $260 = $260($258);
                    return $260;
                });
                var $257 = $259;
                break;
            case 'Word.i':
                var $273 = self.pred;
                var $274 = (_b$7 => {
                    var self = _b$7;
                    switch (self._) {
                        case 'Word.o':
                            var $276 = self.pred;
                            var $277 = (_a$pred$10 => {
                                var self = _c$4;
                                if (self) {
                                    var $279 = Word$o$(Word$adder$(_a$pred$10, $276, Bool$true));
                                    var $278 = $279;
                                } else {
                                    var $280 = Word$i$(Word$adder$(_a$pred$10, $276, Bool$false));
                                    var $278 = $280;
                                };
                                return $278;
                            });
                            var $275 = $277;
                            break;
                        case 'Word.i':
                            var $281 = self.pred;
                            var $282 = (_a$pred$10 => {
                                var self = _c$4;
                                if (self) {
                                    var $284 = Word$i$(Word$adder$(_a$pred$10, $281, Bool$true));
                                    var $283 = $284;
                                } else {
                                    var $285 = Word$o$(Word$adder$(_a$pred$10, $281, Bool$true));
                                    var $283 = $285;
                                };
                                return $283;
                            });
                            var $275 = $282;
                            break;
                        case 'Word.e':
                            var $286 = (_a$pred$8 => {
                                var $287 = Word$e;
                                return $287;
                            });
                            var $275 = $286;
                            break;
                    };
                    var $275 = $275($273);
                    return $275;
                });
                var $257 = $274;
                break;
            case 'Word.e':
                var $288 = (_b$5 => {
                    var $289 = Word$e;
                    return $289;
                });
                var $257 = $288;
                break;
        };
        var $257 = $257(_b$3);
        return $257;
    };
    const Word$adder = x0 => x1 => x2 => Word$adder$(x0, x1, x2);

    function Word$add$(_a$2, _b$3) {
        var $290 = Word$adder$(_a$2, _b$3, Bool$false);
        return $290;
    };
    const Word$add = x0 => x1 => Word$add$(x0, x1);
    const U16$add = a0 => a1 => ((a0 + a1) & 0xFFFF);

    function Word$shift_left1$aux$(_word$2, _prev$3) {
        var self = _word$2;
        switch (self._) {
            case 'Word.o':
                var $292 = self.pred;
                var self = _prev$3;
                if (self) {
                    var $294 = Word$i$(Word$shift_left1$aux$($292, Bool$false));
                    var $293 = $294;
                } else {
                    var $295 = Word$o$(Word$shift_left1$aux$($292, Bool$false));
                    var $293 = $295;
                };
                var $291 = $293;
                break;
            case 'Word.i':
                var $296 = self.pred;
                var self = _prev$3;
                if (self) {
                    var $298 = Word$i$(Word$shift_left1$aux$($296, Bool$true));
                    var $297 = $298;
                } else {
                    var $299 = Word$o$(Word$shift_left1$aux$($296, Bool$true));
                    var $297 = $299;
                };
                var $291 = $297;
                break;
            case 'Word.e':
                var $300 = Word$e;
                var $291 = $300;
                break;
        };
        return $291;
    };
    const Word$shift_left1$aux = x0 => x1 => Word$shift_left1$aux$(x0, x1);

    function Word$shift_left1$(_word$2) {
        var self = _word$2;
        switch (self._) {
            case 'Word.o':
                var $302 = self.pred;
                var $303 = Word$o$(Word$shift_left1$aux$($302, Bool$false));
                var $301 = $303;
                break;
            case 'Word.i':
                var $304 = self.pred;
                var $305 = Word$o$(Word$shift_left1$aux$($304, Bool$true));
                var $301 = $305;
                break;
            case 'Word.e':
                var $306 = Word$e;
                var $301 = $306;
                break;
        };
        return $301;
    };
    const Word$shift_left1 = x0 => Word$shift_left1$(x0);

    function Word$mul$go$(_a$3, _b$4, _acc$5) {
        var Word$mul$go$ = (_a$3, _b$4, _acc$5) => ({
            ctr: 'TCO',
            arg: [_a$3, _b$4, _acc$5]
        });
        var Word$mul$go = _a$3 => _b$4 => _acc$5 => Word$mul$go$(_a$3, _b$4, _acc$5);
        var arg = [_a$3, _b$4, _acc$5];
        while (true) {
            let [_a$3, _b$4, _acc$5] = arg;
            var R = (() => {
                var self = _a$3;
                switch (self._) {
                    case 'Word.o':
                        var $307 = self.pred;
                        var $308 = Word$mul$go$($307, Word$shift_left1$(_b$4), _acc$5);
                        return $308;
                    case 'Word.i':
                        var $309 = self.pred;
                        var $310 = Word$mul$go$($309, Word$shift_left1$(_b$4), Word$add$(_b$4, _acc$5));
                        return $310;
                    case 'Word.e':
                        var $311 = _acc$5;
                        return $311;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Word$mul$go = x0 => x1 => x2 => Word$mul$go$(x0, x1, x2);

    function Word$to_zero$(_word$2) {
        var self = _word$2;
        switch (self._) {
            case 'Word.o':
                var $313 = self.pred;
                var $314 = Word$o$(Word$to_zero$($313));
                var $312 = $314;
                break;
            case 'Word.i':
                var $315 = self.pred;
                var $316 = Word$o$(Word$to_zero$($315));
                var $312 = $316;
                break;
            case 'Word.e':
                var $317 = Word$e;
                var $312 = $317;
                break;
        };
        return $312;
    };
    const Word$to_zero = x0 => Word$to_zero$(x0);

    function Word$mul$(_a$2, _b$3) {
        var $318 = Word$mul$go$(_a$2, _b$3, Word$to_zero$(_a$2));
        return $318;
    };
    const Word$mul = x0 => x1 => Word$mul$(x0, x1);
    const U16$mul = a0 => a1 => ((a0 * a1) & 0xFFFF);
    const U16$inc = a0 => ((a0 + 1) & 0xFFFF);

    function Word$subber$(_a$2, _b$3, _c$4) {
        var self = _a$2;
        switch (self._) {
            case 'Word.o':
                var $320 = self.pred;
                var $321 = (_b$7 => {
                    var self = _b$7;
                    switch (self._) {
                        case 'Word.o':
                            var $323 = self.pred;
                            var $324 = (_a$pred$10 => {
                                var self = _c$4;
                                if (self) {
                                    var $326 = Word$i$(Word$subber$(_a$pred$10, $323, Bool$true));
                                    var $325 = $326;
                                } else {
                                    var $327 = Word$o$(Word$subber$(_a$pred$10, $323, Bool$false));
                                    var $325 = $327;
                                };
                                return $325;
                            });
                            var $322 = $324;
                            break;
                        case 'Word.i':
                            var $328 = self.pred;
                            var $329 = (_a$pred$10 => {
                                var self = _c$4;
                                if (self) {
                                    var $331 = Word$o$(Word$subber$(_a$pred$10, $328, Bool$true));
                                    var $330 = $331;
                                } else {
                                    var $332 = Word$i$(Word$subber$(_a$pred$10, $328, Bool$true));
                                    var $330 = $332;
                                };
                                return $330;
                            });
                            var $322 = $329;
                            break;
                        case 'Word.e':
                            var $333 = (_a$pred$8 => {
                                var $334 = Word$e;
                                return $334;
                            });
                            var $322 = $333;
                            break;
                    };
                    var $322 = $322($320);
                    return $322;
                });
                var $319 = $321;
                break;
            case 'Word.i':
                var $335 = self.pred;
                var $336 = (_b$7 => {
                    var self = _b$7;
                    switch (self._) {
                        case 'Word.o':
                            var $338 = self.pred;
                            var $339 = (_a$pred$10 => {
                                var self = _c$4;
                                if (self) {
                                    var $341 = Word$o$(Word$subber$(_a$pred$10, $338, Bool$false));
                                    var $340 = $341;
                                } else {
                                    var $342 = Word$i$(Word$subber$(_a$pred$10, $338, Bool$false));
                                    var $340 = $342;
                                };
                                return $340;
                            });
                            var $337 = $339;
                            break;
                        case 'Word.i':
                            var $343 = self.pred;
                            var $344 = (_a$pred$10 => {
                                var self = _c$4;
                                if (self) {
                                    var $346 = Word$i$(Word$subber$(_a$pred$10, $343, Bool$true));
                                    var $345 = $346;
                                } else {
                                    var $347 = Word$o$(Word$subber$(_a$pred$10, $343, Bool$false));
                                    var $345 = $347;
                                };
                                return $345;
                            });
                            var $337 = $344;
                            break;
                        case 'Word.e':
                            var $348 = (_a$pred$8 => {
                                var $349 = Word$e;
                                return $349;
                            });
                            var $337 = $348;
                            break;
                    };
                    var $337 = $337($335);
                    return $337;
                });
                var $319 = $336;
                break;
            case 'Word.e':
                var $350 = (_b$5 => {
                    var $351 = Word$e;
                    return $351;
                });
                var $319 = $350;
                break;
        };
        var $319 = $319(_b$3);
        return $319;
    };
    const Word$subber = x0 => x1 => x2 => Word$subber$(x0, x1, x2);

    function Word$sub$(_a$2, _b$3) {
        var $352 = Word$subber$(_a$2, _b$3, Bool$false);
        return $352;
    };
    const Word$sub = x0 => x1 => Word$sub$(x0, x1);
    const U16$sub = a0 => a1 => ((a0 - a1) & 0xFFFF);
    const U16$zero = U16$new$(Word$zero$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$zero))))))))))))))))));

    function Char$hex_value16$(_chr$1) {
        var self = ((_chr$1 >= 48) && (_chr$1 <= 57));
        if (self) {
            var $354 = ((_chr$1 - 48) & 0xFFFF);
            var $353 = $354;
        } else {
            var self = ((_chr$1 >= 97) && (_chr$1 <= 102));
            if (self) {
                var $356 = (_x0$2 => {
                    var $357 = ((((((((((((((((((((_x0$2 + 1) & 0xFFFF) + 1) & 0xFFFF) + 1) & 0xFFFF) + 1) & 0xFFFF) + 1) & 0xFFFF) + 1) & 0xFFFF) + 1) & 0xFFFF) + 1) & 0xFFFF) + 1) & 0xFFFF) + 1) & 0xFFFF);
                    return $357;
                })(((_chr$1 - 97) & 0xFFFF));
                var $355 = $356;
            } else {
                var self = ((_chr$1 >= 65) && (_chr$1 <= 70));
                if (self) {
                    var $359 = (_x0$2 => {
                        var $360 = ((((((((((((((((((((_x0$2 + 1) & 0xFFFF) + 1) & 0xFFFF) + 1) & 0xFFFF) + 1) & 0xFFFF) + 1) & 0xFFFF) + 1) & 0xFFFF) + 1) & 0xFFFF) + 1) & 0xFFFF) + 1) & 0xFFFF) + 1) & 0xFFFF);
                        return $360;
                    })(((_chr$1 - 65) & 0xFFFF));
                    var $358 = $359;
                } else {
                    var $361 = U16$zero;
                    var $358 = $361;
                };
                var $355 = $358;
            };
            var $353 = $355;
        };
        return $353;
    };
    const Char$hex_value16 = x0 => Char$hex_value16$(x0);

    function Kind$Core$read$u16$(_code$1, _u16$2) {
        var Kind$Core$read$u16$ = (_code$1, _u16$2) => ({
            ctr: 'TCO',
            arg: [_code$1, _u16$2]
        });
        var Kind$Core$read$u16 = _code$1 => _u16$2 => Kind$Core$read$u16$(_code$1, _u16$2);
        var arg = [_code$1, _u16$2];
        while (true) {
            let [_code$1, _u16$2] = arg;
            var R = (() => {
                var self = _code$1;
                if (self.length === 0) {
                    var $362 = Pair$new$(_code$1, _u16$2);
                    return $362;
                } else {
                    var $363 = self.charCodeAt(0);
                    var $364 = self.slice(1);
                    var self = Char$is_hex$($363);
                    if (self) {
                        var _u16$5 = ((((_u16$2 * 16) & 0xFFFF) + Char$hex_value16$($363)) & 0xFFFF);
                        var $366 = Kind$Core$read$u16$($364, _u16$5);
                        var $365 = $366;
                    } else {
                        var $367 = Pair$new$(_code$1, _u16$2);
                        var $365 = $367;
                    };
                    return $365;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Kind$Core$read$u16 = x0 => x1 => Kind$Core$read$u16$(x0, x1);

    function Kind$Core$read$chrx$(_code$1) {
        var self = String$starts_with$(_code$1, "\\u{");
        if (self) {
            var _code$2 = String$drop$(3n, _code$1);
            var self = Kind$Core$read$u16$(_code$2, 0);
            switch (self._) {
                case 'Pair.new':
                    var $370 = self.fst;
                    var $371 = self.snd;
                    var self = String$starts_with$($370, "}");
                    if (self) {
                        var $373 = Pair$new$(String$drop$(1n, $370), $371);
                        var $372 = $373;
                    } else {
                        var $374 = Pair$new$("", 63);
                        var $372 = $374;
                    };
                    var $369 = $372;
                    break;
            };
            var $368 = $369;
        } else {
            var self = String$starts_with$(_code$1, "\\\'");
            if (self) {
                var $376 = Pair$new$(String$drop$(2n, _code$1), 39);
                var $375 = $376;
            } else {
                var self = String$starts_with$(_code$1, "\\\"");
                if (self) {
                    var $378 = Pair$new$(String$drop$(2n, _code$1), 34);
                    var $377 = $378;
                } else {
                    var self = String$starts_with$(_code$1, "\\\\");
                    if (self) {
                        var $380 = Pair$new$(String$drop$(2n, _code$1), 92);
                        var $379 = $380;
                    } else {
                        var self = _code$1;
                        if (self.length === 0) {
                            var $382 = Pair$new$("", 63);
                            var $381 = $382;
                        } else {
                            var $383 = self.charCodeAt(0);
                            var $384 = self.slice(1);
                            var $385 = Pair$new$($384, $383);
                            var $381 = $385;
                        };
                        var $379 = $381;
                    };
                    var $377 = $379;
                };
                var $375 = $377;
            };
            var $368 = $375;
        };
        return $368;
    };
    const Kind$Core$read$chrx = x0 => Kind$Core$read$chrx$(x0);

    function Kind$Term$chr$(_chrx$1) {
        var $386 = ({
            _: 'Kind.Term.chr',
            'chrx': _chrx$1
        });
        return $386;
    };
    const Kind$Term$chr = x0 => Kind$Term$chr$(x0);

    function Kind$Core$read$strx$(_code$1) {
        var self = String$starts_with$(_code$1, "\"");
        if (self) {
            var $388 = Pair$new$(_code$1, "");
            var $387 = $388;
        } else {
            var self = Kind$Core$read$chrx$(_code$1);
            switch (self._) {
                case 'Pair.new':
                    var $390 = self.fst;
                    var $391 = self.snd;
                    var self = Kind$Core$read$strx$($390);
                    switch (self._) {
                        case 'Pair.new':
                            var $393 = self.fst;
                            var $394 = self.snd;
                            var $395 = Pair$new$($393, String$cons$($391, $394));
                            var $392 = $395;
                            break;
                    };
                    var $389 = $392;
                    break;
            };
            var $387 = $389;
        };
        return $387;
    };
    const Kind$Core$read$strx = x0 => Kind$Core$read$strx$(x0);

    function Kind$Term$str$(_strx$1) {
        var $396 = ({
            _: 'Kind.Term.str',
            'strx': _strx$1
        });
        return $396;
    };
    const Kind$Term$str = x0 => Kind$Term$str$(x0);

    function Char$dec_value$(_chr$1) {
        var self = (_chr$1 === 48);
        if (self) {
            var $398 = 0n;
            var $397 = $398;
        } else {
            var self = (_chr$1 === 49);
            if (self) {
                var $400 = 1n;
                var $399 = $400;
            } else {
                var self = (_chr$1 === 50);
                if (self) {
                    var $402 = 2n;
                    var $401 = $402;
                } else {
                    var self = (_chr$1 === 51);
                    if (self) {
                        var $404 = 3n;
                        var $403 = $404;
                    } else {
                        var self = (_chr$1 === 52);
                        if (self) {
                            var $406 = 4n;
                            var $405 = $406;
                        } else {
                            var self = (_chr$1 === 53);
                            if (self) {
                                var $408 = 5n;
                                var $407 = $408;
                            } else {
                                var self = (_chr$1 === 54);
                                if (self) {
                                    var $410 = 6n;
                                    var $409 = $410;
                                } else {
                                    var self = (_chr$1 === 55);
                                    if (self) {
                                        var $412 = 7n;
                                        var $411 = $412;
                                    } else {
                                        var self = (_chr$1 === 56);
                                        if (self) {
                                            var $414 = 8n;
                                            var $413 = $414;
                                        } else {
                                            var self = (_chr$1 === 57);
                                            if (self) {
                                                var $416 = 9n;
                                                var $415 = $416;
                                            } else {
                                                var $417 = 0n;
                                                var $415 = $417;
                                            };
                                            var $413 = $415;
                                        };
                                        var $411 = $413;
                                    };
                                    var $409 = $411;
                                };
                                var $407 = $409;
                            };
                            var $405 = $407;
                        };
                        var $403 = $405;
                    };
                    var $401 = $403;
                };
                var $399 = $401;
            };
            var $397 = $399;
        };
        return $397;
    };
    const Char$dec_value = x0 => Char$dec_value$(x0);

    function Kind$Core$read$natx$(_code$1, _nat$2) {
        var Kind$Core$read$natx$ = (_code$1, _nat$2) => ({
            ctr: 'TCO',
            arg: [_code$1, _nat$2]
        });
        var Kind$Core$read$natx = _code$1 => _nat$2 => Kind$Core$read$natx$(_code$1, _nat$2);
        var arg = [_code$1, _nat$2];
        while (true) {
            let [_code$1, _nat$2] = arg;
            var R = (() => {
                var self = _code$1;
                if (self.length === 0) {
                    var $418 = Pair$new$(_code$1, _nat$2);
                    return $418;
                } else {
                    var $419 = self.charCodeAt(0);
                    var $420 = self.slice(1);
                    var self = Char$is_hex$($419);
                    if (self) {
                        var _nat$5 = ((_nat$2 * 10n) + Char$dec_value$($419));
                        var $422 = Kind$Core$read$natx$($420, _nat$5);
                        var $421 = $422;
                    } else {
                        var $423 = Pair$new$(_code$1, _nat$2);
                        var $421 = $423;
                    };
                    return $421;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Kind$Core$read$natx = x0 => x1 => Kind$Core$read$natx$(x0, x1);

    function Kind$Term$nat$(_natx$1) {
        var $424 = ({
            _: 'Kind.Term.nat',
            'natx': _natx$1
        });
        return $424;
    };
    const Kind$Term$nat = x0 => Kind$Term$nat$(x0);

    function Pair$fst$(_pair$3) {
        var self = _pair$3;
        switch (self._) {
            case 'Pair.new':
                var $426 = self.fst;
                var $427 = $426;
                var $425 = $427;
                break;
        };
        return $425;
    };
    const Pair$fst = x0 => Pair$fst$(x0);
    const Nat$eql = a0 => a1 => (a0 === a1);

    function Nat$pred$(_n$1) {
        var self = _n$1;
        if (self === 0n) {
            var $429 = Nat$zero;
            var $428 = $429;
        } else {
            var $430 = (self - 1n);
            var $431 = $430;
            var $428 = $431;
        };
        return $428;
    };
    const Nat$pred = x0 => Nat$pred$(x0);

    function Kind$Core$read$find$(_list$2, _cond$3, _indx$4, _skip$5) {
        var Kind$Core$read$find$ = (_list$2, _cond$3, _indx$4, _skip$5) => ({
            ctr: 'TCO',
            arg: [_list$2, _cond$3, _indx$4, _skip$5]
        });
        var Kind$Core$read$find = _list$2 => _cond$3 => _indx$4 => _skip$5 => Kind$Core$read$find$(_list$2, _cond$3, _indx$4, _skip$5);
        var arg = [_list$2, _cond$3, _indx$4, _skip$5];
        while (true) {
            let [_list$2, _cond$3, _indx$4, _skip$5] = arg;
            var R = (() => {
                var self = _list$2;
                switch (self._) {
                    case 'List.cons':
                        var $432 = self.head;
                        var $433 = self.tail;
                        var self = _cond$3($432)(_indx$4);
                        if (self) {
                            var self = (_skip$5 === 0n);
                            if (self) {
                                var $436 = Maybe$some$(Pair$new$($432, _indx$4));
                                var $435 = $436;
                            } else {
                                var $437 = Kind$Core$read$find$($433, _cond$3, Nat$succ$(_indx$4), Nat$pred$(_skip$5));
                                var $435 = $437;
                            };
                            var $434 = $435;
                        } else {
                            var $438 = Kind$Core$read$find$($433, _cond$3, Nat$succ$(_indx$4), _skip$5);
                            var $434 = $438;
                        };
                        return $434;
                    case 'List.nil':
                        var $439 = Maybe$none;
                        return $439;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Kind$Core$read$find = x0 => x1 => x2 => x3 => Kind$Core$read$find$(x0, x1, x2, x3);

    function Pair$snd$(_pair$3) {
        var self = _pair$3;
        switch (self._) {
            case 'Pair.new':
                var $441 = self.snd;
                var $442 = $441;
                var $440 = $442;
                break;
        };
        return $440;
    };
    const Pair$snd = x0 => Pair$snd$(x0);

    function Kind$Core$read$term$(_code$1) {
        var self = Kind$Core$read$spaces$(_code$1);
        switch (self._) {
            case 'Pair.new':
                var $444 = self.fst;
                var self = $444;
                if (self.length === 0) {
                    var $446 = Pair$new$("", (_ctx$4 => {
                        var $447 = Kind$Term$ref$("error");
                        return $447;
                    }));
                    var $445 = $446;
                } else {
                    var $448 = self.charCodeAt(0);
                    var $449 = self.slice(1);
                    var _head$6 = $448;
                    var _code$7 = $449;
                    var self = Char$eql$(_head$6, 42);
                    if (self) {
                        var $451 = Pair$new$(_code$7, (_ctx$8 => {
                            var $452 = Kind$Term$typ;
                            return $452;
                        }));
                        var $450 = $451;
                    } else {
                        var self = (_head$6 === 64);
                        if (self) {
                            var self = Kind$Core$read$name$(_code$7);
                            switch (self._) {
                                case 'Pair.new':
                                    var $455 = self.fst;
                                    var $456 = self.snd;
                                    var self = Kind$Core$read$char$($455, 40);
                                    switch (self._) {
                                        case 'Pair.new':
                                            var $458 = self.fst;
                                            var self = Kind$Core$read$name$($458);
                                            switch (self._) {
                                                case 'Pair.new':
                                                    var $460 = self.fst;
                                                    var $461 = self.snd;
                                                    var self = Kind$Core$read$char$($460, 58);
                                                    switch (self._) {
                                                        case 'Pair.new':
                                                            var $463 = self.fst;
                                                            var self = Kind$Core$read$term$($463);
                                                            switch (self._) {
                                                                case 'Pair.new':
                                                                    var $465 = self.fst;
                                                                    var $466 = self.snd;
                                                                    var self = Kind$Core$read$char$($465, 41);
                                                                    switch (self._) {
                                                                        case 'Pair.new':
                                                                            var $468 = self.fst;
                                                                            var self = Kind$Core$read$term$($468);
                                                                            switch (self._) {
                                                                                case 'Pair.new':
                                                                                    var $470 = self.fst;
                                                                                    var $471 = self.snd;
                                                                                    var $472 = Pair$new$($470, (_ctx$22 => {
                                                                                        var $473 = Kind$Term$all$(Bool$false, $456, $461, $466(_ctx$22), (_s$23 => _x$24 => {
                                                                                            var $474 = $471(List$cons$(Pair$new$($461, _x$24), List$cons$(Pair$new$($456, _s$23), _ctx$22)));
                                                                                            return $474;
                                                                                        }));
                                                                                        return $473;
                                                                                    }));
                                                                                    var $469 = $472;
                                                                                    break;
                                                                            };
                                                                            var $467 = $469;
                                                                            break;
                                                                    };
                                                                    var $464 = $467;
                                                                    break;
                                                            };
                                                            var $462 = $464;
                                                            break;
                                                    };
                                                    var $459 = $462;
                                                    break;
                                            };
                                            var $457 = $459;
                                            break;
                                    };
                                    var $454 = $457;
                                    break;
                            };
                            var $453 = $454;
                        } else {
                            var self = (_head$6 === 37);
                            if (self) {
                                var self = Kind$Core$read$name$(_code$7);
                                switch (self._) {
                                    case 'Pair.new':
                                        var $477 = self.fst;
                                        var $478 = self.snd;
                                        var self = Kind$Core$read$char$($477, 40);
                                        switch (self._) {
                                            case 'Pair.new':
                                                var $480 = self.fst;
                                                var self = Kind$Core$read$name$($480);
                                                switch (self._) {
                                                    case 'Pair.new':
                                                        var $482 = self.fst;
                                                        var $483 = self.snd;
                                                        var self = Kind$Core$read$char$($482, 58);
                                                        switch (self._) {
                                                            case 'Pair.new':
                                                                var $485 = self.fst;
                                                                var self = Kind$Core$read$term$($485);
                                                                switch (self._) {
                                                                    case 'Pair.new':
                                                                        var $487 = self.fst;
                                                                        var $488 = self.snd;
                                                                        var self = Kind$Core$read$char$($487, 41);
                                                                        switch (self._) {
                                                                            case 'Pair.new':
                                                                                var $490 = self.fst;
                                                                                var self = Kind$Core$read$term$($490);
                                                                                switch (self._) {
                                                                                    case 'Pair.new':
                                                                                        var $492 = self.fst;
                                                                                        var $493 = self.snd;
                                                                                        var $494 = Pair$new$($492, (_ctx$22 => {
                                                                                            var $495 = Kind$Term$all$(Bool$true, $478, $483, $488(_ctx$22), (_s$23 => _x$24 => {
                                                                                                var $496 = $493(List$cons$(Pair$new$($483, _x$24), List$cons$(Pair$new$($478, _s$23), _ctx$22)));
                                                                                                return $496;
                                                                                            }));
                                                                                            return $495;
                                                                                        }));
                                                                                        var $491 = $494;
                                                                                        break;
                                                                                };
                                                                                var $489 = $491;
                                                                                break;
                                                                        };
                                                                        var $486 = $489;
                                                                        break;
                                                                };
                                                                var $484 = $486;
                                                                break;
                                                        };
                                                        var $481 = $484;
                                                        break;
                                                };
                                                var $479 = $481;
                                                break;
                                        };
                                        var $476 = $479;
                                        break;
                                };
                                var $475 = $476;
                            } else {
                                var self = (_head$6 === 35);
                                if (self) {
                                    var self = Kind$Core$read$name$(_code$7);
                                    switch (self._) {
                                        case 'Pair.new':
                                            var $499 = self.fst;
                                            var $500 = self.snd;
                                            var self = Kind$Core$read$term$($499);
                                            switch (self._) {
                                                case 'Pair.new':
                                                    var $502 = self.fst;
                                                    var $503 = self.snd;
                                                    var $504 = Pair$new$($502, (_ctx$12 => {
                                                        var $505 = Kind$Term$lam$($500, (_x$13 => {
                                                            var $506 = $503(List$cons$(Pair$new$($500, _x$13), _ctx$12));
                                                            return $506;
                                                        }));
                                                        return $505;
                                                    }));
                                                    var $501 = $504;
                                                    break;
                                            };
                                            var $498 = $501;
                                            break;
                                    };
                                    var $497 = $498;
                                } else {
                                    var self = (_head$6 === 40);
                                    if (self) {
                                        var self = Kind$Core$read$term$(_code$7);
                                        switch (self._) {
                                            case 'Pair.new':
                                                var $509 = self.fst;
                                                var $510 = self.snd;
                                                var self = Kind$Core$read$term$($509);
                                                switch (self._) {
                                                    case 'Pair.new':
                                                        var $512 = self.fst;
                                                        var $513 = self.snd;
                                                        var self = Kind$Core$read$char$($512, 41);
                                                        switch (self._) {
                                                            case 'Pair.new':
                                                                var $515 = self.fst;
                                                                var $516 = Pair$new$($515, (_ctx$14 => {
                                                                    var $517 = Kind$Term$app$($510(_ctx$14), $513(_ctx$14));
                                                                    return $517;
                                                                }));
                                                                var $514 = $516;
                                                                break;
                                                        };
                                                        var $511 = $514;
                                                        break;
                                                };
                                                var $508 = $511;
                                                break;
                                        };
                                        var $507 = $508;
                                    } else {
                                        var self = (_head$6 === 33);
                                        if (self) {
                                            var self = Kind$Core$read$name$(_code$7);
                                            switch (self._) {
                                                case 'Pair.new':
                                                    var $520 = self.fst;
                                                    var $521 = self.snd;
                                                    var self = Kind$Core$read$char$($520, 61);
                                                    switch (self._) {
                                                        case 'Pair.new':
                                                            var $523 = self.fst;
                                                            var self = Kind$Core$read$term$($523);
                                                            switch (self._) {
                                                                case 'Pair.new':
                                                                    var $525 = self.fst;
                                                                    var $526 = self.snd;
                                                                    var self = Kind$Core$read$char$($525, 59);
                                                                    switch (self._) {
                                                                        case 'Pair.new':
                                                                            var $528 = self.fst;
                                                                            var self = Kind$Core$read$term$($528);
                                                                            switch (self._) {
                                                                                case 'Pair.new':
                                                                                    var $530 = self.fst;
                                                                                    var $531 = self.snd;
                                                                                    var $532 = Pair$new$($530, (_ctx$18 => {
                                                                                        var $533 = Kind$Term$let$($521, $526(_ctx$18), (_x$19 => {
                                                                                            var $534 = $531(List$cons$(Pair$new$($521, _x$19), _ctx$18));
                                                                                            return $534;
                                                                                        }));
                                                                                        return $533;
                                                                                    }));
                                                                                    var $529 = $532;
                                                                                    break;
                                                                            };
                                                                            var $527 = $529;
                                                                            break;
                                                                    };
                                                                    var $524 = $527;
                                                                    break;
                                                            };
                                                            var $522 = $524;
                                                            break;
                                                    };
                                                    var $519 = $522;
                                                    break;
                                            };
                                            var $518 = $519;
                                        } else {
                                            var self = (_head$6 === 36);
                                            if (self) {
                                                var self = Kind$Core$read$name$(_code$7);
                                                switch (self._) {
                                                    case 'Pair.new':
                                                        var $537 = self.fst;
                                                        var $538 = self.snd;
                                                        var self = Kind$Core$read$char$($537, 61);
                                                        switch (self._) {
                                                            case 'Pair.new':
                                                                var $540 = self.fst;
                                                                var self = Kind$Core$read$term$($540);
                                                                switch (self._) {
                                                                    case 'Pair.new':
                                                                        var $542 = self.fst;
                                                                        var $543 = self.snd;
                                                                        var self = Kind$Core$read$char$($542, 59);
                                                                        switch (self._) {
                                                                            case 'Pair.new':
                                                                                var $545 = self.fst;
                                                                                var self = Kind$Core$read$term$($545);
                                                                                switch (self._) {
                                                                                    case 'Pair.new':
                                                                                        var $547 = self.fst;
                                                                                        var $548 = self.snd;
                                                                                        var $549 = Pair$new$($547, (_ctx$18 => {
                                                                                            var $550 = Kind$Term$def$($538, $543(_ctx$18), (_x$19 => {
                                                                                                var $551 = $548(List$cons$(Pair$new$($538, _x$19), _ctx$18));
                                                                                                return $551;
                                                                                            }));
                                                                                            return $550;
                                                                                        }));
                                                                                        var $546 = $549;
                                                                                        break;
                                                                                };
                                                                                var $544 = $546;
                                                                                break;
                                                                        };
                                                                        var $541 = $544;
                                                                        break;
                                                                };
                                                                var $539 = $541;
                                                                break;
                                                        };
                                                        var $536 = $539;
                                                        break;
                                                };
                                                var $535 = $536;
                                            } else {
                                                var self = (_head$6 === 123);
                                                if (self) {
                                                    var self = Kind$Core$read$term$(_code$7);
                                                    switch (self._) {
                                                        case 'Pair.new':
                                                            var $554 = self.fst;
                                                            var $555 = self.snd;
                                                            var self = Kind$Core$read$char$($554, 58);
                                                            switch (self._) {
                                                                case 'Pair.new':
                                                                    var $557 = self.fst;
                                                                    var self = Kind$Core$read$term$($557);
                                                                    switch (self._) {
                                                                        case 'Pair.new':
                                                                            var $559 = self.fst;
                                                                            var $560 = self.snd;
                                                                            var self = Kind$Core$read$char$($559, 125);
                                                                            switch (self._) {
                                                                                case 'Pair.new':
                                                                                    var $562 = self.fst;
                                                                                    var $563 = Pair$new$($562, (_ctx$16 => {
                                                                                        var $564 = Kind$Term$ann$(Bool$false, $555(_ctx$16), $560(_ctx$16));
                                                                                        return $564;
                                                                                    }));
                                                                                    var $561 = $563;
                                                                                    break;
                                                                            };
                                                                            var $558 = $561;
                                                                            break;
                                                                    };
                                                                    var $556 = $558;
                                                                    break;
                                                            };
                                                            var $553 = $556;
                                                            break;
                                                    };
                                                    var $552 = $553;
                                                } else {
                                                    var self = (_head$6 === 39);
                                                    if (self) {
                                                        var self = Kind$Core$read$chrx$(_code$7);
                                                        switch (self._) {
                                                            case 'Pair.new':
                                                                var $567 = self.fst;
                                                                var $568 = self.snd;
                                                                var self = Kind$Core$read$char$($567, 39);
                                                                switch (self._) {
                                                                    case 'Pair.new':
                                                                        var $570 = self.fst;
                                                                        var $571 = Pair$new$($570, (_ctx$12 => {
                                                                            var $572 = Kind$Term$chr$($568);
                                                                            return $572;
                                                                        }));
                                                                        var $569 = $571;
                                                                        break;
                                                                };
                                                                var $566 = $569;
                                                                break;
                                                        };
                                                        var $565 = $566;
                                                    } else {
                                                        var self = (_head$6 === 34);
                                                        if (self) {
                                                            var self = Kind$Core$read$strx$(_code$7);
                                                            switch (self._) {
                                                                case 'Pair.new':
                                                                    var $575 = self.fst;
                                                                    var $576 = self.snd;
                                                                    var self = Kind$Core$read$char$($575, 34);
                                                                    switch (self._) {
                                                                        case 'Pair.new':
                                                                            var $578 = self.fst;
                                                                            var $579 = Pair$new$($578, (_ctx$12 => {
                                                                                var $580 = Kind$Term$str$($576);
                                                                                return $580;
                                                                            }));
                                                                            var $577 = $579;
                                                                            break;
                                                                    };
                                                                    var $574 = $577;
                                                                    break;
                                                            };
                                                            var $573 = $574;
                                                        } else {
                                                            var self = (_head$6 === 43);
                                                            if (self) {
                                                                var self = Kind$Core$read$natx$(_code$7, 0n);
                                                                switch (self._) {
                                                                    case 'Pair.new':
                                                                        var $583 = self.fst;
                                                                        var $584 = self.snd;
                                                                        var $585 = Pair$new$($583, (_ctx$10 => {
                                                                            var $586 = Kind$Term$nat$($584);
                                                                            return $586;
                                                                        }));
                                                                        var $582 = $585;
                                                                        break;
                                                                };
                                                                var $581 = $582;
                                                            } else {
                                                                var self = Kind$Core$read$is_name$(_head$6);
                                                                if (self) {
                                                                    var self = Kind$Core$read$name$(_code$7);
                                                                    switch (self._) {
                                                                        case 'Pair.new':
                                                                            var $589 = self.fst;
                                                                            var $590 = self.snd;
                                                                            var _name$10 = String$cons$(_head$6, $590);
                                                                            var self = $589;
                                                                            if (self.length === 0) {
                                                                                var $592 = Pair$new$("", 0n);
                                                                                var self = $592;
                                                                            } else {
                                                                                var $593 = self.charCodeAt(0);
                                                                                var $594 = self.slice(1);
                                                                                var self = ($593 === 94);
                                                                                if (self) {
                                                                                    var $596 = Kind$Core$read$natx$($594, 0n);
                                                                                    var $595 = $596;
                                                                                } else {
                                                                                    var $597 = Pair$new$($589, 0n);
                                                                                    var $595 = $597;
                                                                                };
                                                                                var self = $595;
                                                                            };
                                                                            switch (self._) {
                                                                                case 'Pair.new':
                                                                                    var $598 = self.fst;
                                                                                    var $599 = self.snd;
                                                                                    var $600 = Pair$new$($598, (_ctx$13 => {
                                                                                        var _got$14 = Kind$Core$read$find$(_ctx$13, (_x$14 => _i$15 => {
                                                                                            var $602 = (Pair$fst$(_x$14) === _name$10);
                                                                                            return $602;
                                                                                        }), 0n, $599);
                                                                                        var self = _got$14;
                                                                                        switch (self._) {
                                                                                            case 'Maybe.some':
                                                                                                var $603 = self.value;
                                                                                                var $604 = Pair$snd$(Pair$fst$($603));
                                                                                                var $601 = $604;
                                                                                                break;
                                                                                            case 'Maybe.none':
                                                                                                var $605 = Kind$Term$ref$(_name$10);
                                                                                                var $601 = $605;
                                                                                                break;
                                                                                        };
                                                                                        return $601;
                                                                                    }));
                                                                                    var $591 = $600;
                                                                                    break;
                                                                            };
                                                                            var $588 = $591;
                                                                            break;
                                                                    };
                                                                    var $587 = $588;
                                                                } else {
                                                                    var $606 = Pair$new$("", (_ctx$8 => {
                                                                        var $607 = Kind$Term$ref$("error");
                                                                        return $607;
                                                                    }));
                                                                    var $587 = $606;
                                                                };
                                                                var $581 = $587;
                                                            };
                                                            var $573 = $581;
                                                        };
                                                        var $565 = $573;
                                                    };
                                                    var $552 = $565;
                                                };
                                                var $535 = $552;
                                            };
                                            var $518 = $535;
                                        };
                                        var $507 = $518;
                                    };
                                    var $497 = $507;
                                };
                                var $475 = $497;
                            };
                            var $453 = $475;
                        };
                        var $450 = $453;
                    };
                    var $445 = $450;
                };
                var $443 = $445;
                break;
        };
        return $443;
    };
    const Kind$Core$read$term = x0 => Kind$Core$read$term$(x0);

    function Kind$Core$read$(_code$1) {
        var self = Kind$Core$read$term$((_code$1 + ";"));
        switch (self._) {
            case 'Pair.new':
                var $609 = self.fst;
                var $610 = self.snd;
                var self = $609;
                if (self.length === 0) {
                    var $612 = Maybe$none;
                    var $611 = $612;
                } else {
                    var $613 = self.charCodeAt(0);
                    var $614 = self.slice(1);
                    var $615 = Maybe$some$($610(List$nil));
                    var $611 = $615;
                };
                var $608 = $611;
                break;
        };
        return $608;
    };
    const Kind$Core$read = x0 => Kind$Core$read$(x0);

    function Bool$read$(_code$1) {
        var self = (_code$1 === "Bool.true");
        if (self) {
            var $617 = Maybe$some$(Bool$true);
            var $616 = $617;
        } else {
            var self = (_code$1 === "Bool.false");
            if (self) {
                var $619 = Maybe$some$(Bool$false);
                var $618 = $619;
            } else {
                var $620 = Maybe$none;
                var $618 = $620;
            };
            var $616 = $618;
        };
        return $616;
    };
    const Bool$read = x0 => Bool$read$(x0);

    function Kind$Status$done$(_cached$1) {
        var $621 = ({
            _: 'Kind.Status.done',
            'cached': _cached$1
        });
        return $621;
    };
    const Kind$Status$done = x0 => Kind$Status$done$(x0);

    function Kind$Def$new$(_file$1, _code$2, _orig$3, _name$4, _term$5, _type$6, _isct$7, _arit$8, _stat$9) {
        var $622 = ({
            _: 'Kind.Def.new',
            'file': _file$1,
            'code': _code$2,
            'orig': _orig$3,
            'name': _name$4,
            'term': _term$5,
            'type': _type$6,
            'isct': _isct$7,
            'arit': _arit$8,
            'stat': _stat$9
        });
        return $622;
    };
    const Kind$Def$new = x0 => x1 => x2 => x3 => x4 => x5 => x6 => x7 => x8 => Kind$Def$new$(x0, x1, x2, x3, x4, x5, x6, x7, x8);

    function Kind$Synth$load$cached$def$(_name$1) {
        var $623 = IO$monad$((_m$bind$2 => _m$pure$3 => {
            var $624 = _m$bind$2;
            return $624;
        }))(IO$get_file$((".cache/" + (_name$1 + ".file"))))((_cache_file$2 => {
            var self = (!String$is_empty$(_cache_file$2));
            if (self) {
                var $626 = IO$monad$((_m$bind$3 => _m$pure$4 => {
                    var $627 = _m$bind$3;
                    return $627;
                }))(IO$get_file$((".cache/" + (_name$1 + ".time"))))((_cache_time$3 => {
                    var $628 = IO$monad$((_m$bind$4 => _m$pure$5 => {
                        var $629 = _m$bind$4;
                        return $629;
                    }))(IO$get_file_mtime$(_cache_file$2))((_cache_file_time$4 => {
                        var self = (_cache_time$3 === _cache_file_time$4);
                        if (self) {
                            var $631 = IO$monad$((_m$bind$5 => _m$pure$6 => {
                                var $632 = _m$bind$5;
                                return $632;
                            }))(IO$get_file$((".cache/" + (_name$1 + ".term"))))((_cache_term$5 => {
                                var $633 = IO$monad$((_m$bind$6 => _m$pure$7 => {
                                    var $634 = _m$bind$6;
                                    return $634;
                                }))(IO$get_file$((".cache/" + (_name$1 + ".type"))))((_cache_type$6 => {
                                    var $635 = IO$monad$((_m$bind$7 => _m$pure$8 => {
                                        var $636 = _m$bind$7;
                                        return $636;
                                    }))(IO$get_file$((".cache/" + (_name$1 + ".isct"))))((_cache_isct$7 => {
                                        var $637 = IO$monad$((_m$bind$8 => _m$pure$9 => {
                                            var $638 = _m$bind$8;
                                            return $638;
                                        }))(IO$get_file$((".cache/" + (_name$1 + ".arit"))))((_cache_arit$8 => {
                                            var $639 = IO$monad$((_m$bind$9 => _m$pure$10 => {
                                                var $640 = _m$pure$10;
                                                return $640;
                                            }))((() => {
                                                var _file$9 = _cache_file$2;
                                                var _code$10 = "<cached>";
                                                var _orig$11 = Pair$new$(0n, 0n);
                                                var $641 = Maybe$monad$((_m$bind$12 => _m$pure$13 => {
                                                    var $642 = _m$bind$12;
                                                    return $642;
                                                }))(Kind$Core$read$(_cache_term$5))((_term$12 => {
                                                    var $643 = Maybe$monad$((_m$bind$13 => _m$pure$14 => {
                                                        var $644 = _m$bind$13;
                                                        return $644;
                                                    }))(Kind$Core$read$(_cache_type$6))((_type$13 => {
                                                        var $645 = Maybe$monad$((_m$bind$14 => _m$pure$15 => {
                                                            var $646 = _m$bind$14;
                                                            return $646;
                                                        }))(Bool$read$(_cache_isct$7))((_isct$14 => {
                                                            var $647 = Maybe$monad$((_m$bind$15 => _m$pure$16 => {
                                                                var $648 = _m$bind$15;
                                                                return $648;
                                                            }))(Maybe$some$(Nat$read$(_cache_arit$8)))((_arit$15 => {
                                                                var _stat$16 = Kind$Status$done$(Bool$true);
                                                                var $649 = Maybe$monad$((_m$bind$17 => _m$pure$18 => {
                                                                    var $650 = _m$pure$18;
                                                                    return $650;
                                                                }))(Kind$Def$new$(_file$9, _code$10, _orig$11, _name$1, _term$12, _type$13, _isct$14, _arit$15, _stat$16));
                                                                return $649;
                                                            }));
                                                            return $647;
                                                        }));
                                                        return $645;
                                                    }));
                                                    return $643;
                                                }));
                                                return $641;
                                            })());
                                            return $639;
                                        }));
                                        return $637;
                                    }));
                                    return $635;
                                }));
                                return $633;
                            }));
                            var $630 = $631;
                        } else {
                            var $651 = IO$monad$((_m$bind$5 => _m$pure$6 => {
                                var $652 = _m$pure$6;
                                return $652;
                            }))(Maybe$none);
                            var $630 = $651;
                        };
                        return $630;
                    }));
                    return $628;
                }));
                var $625 = $626;
            } else {
                var $653 = IO$monad$((_m$bind$3 => _m$pure$4 => {
                    var $654 = _m$pure$4;
                    return $654;
                }))(Maybe$none);
                var $625 = $653;
            };
            return $625;
        }));
        return $623;
    };
    const Kind$Synth$load$cached$def = x0 => Kind$Synth$load$cached$def$(x0);

    function BitsMap$tie$(_val$2, _lft$3, _rgt$4) {
        var $655 = ({
            _: 'BitsMap.tie',
            'val': _val$2,
            'lft': _lft$3,
            'rgt': _rgt$4
        });
        return $655;
    };
    const BitsMap$tie = x0 => x1 => x2 => BitsMap$tie$(x0, x1, x2);
    const BitsMap$new = ({
        _: 'BitsMap.new'
    });
    const BitsMap$set = a0 => a1 => a2 => (bitsmap_set(a0, a1, a2, 'set'));

    function Kind$Map$set$(_name$2, _val$3, _map$4) {
        var $656 = (bitsmap_set((kind_name_to_bits(_name$2)), _val$3, _map$4, 'set'));
        return $656;
    };
    const Kind$Map$set = x0 => x1 => x2 => Kind$Map$set$(x0, x1, x2);
    const Kind$Map$new = BitsMap$new;
    const Kind$Map = null;

    function Kind$Core$dependencies$go$(_term$1, _deps$2) {
        var _nil$3 = Kind$Term$typ;
        var self = _term$1;
        switch (self._) {
            case 'Kind.Term.ref':
                var $658 = self.name;
                var $659 = Kind$Map$set$($658, Unit$new, _deps$2);
                var $657 = $659;
                break;
            case 'Kind.Term.all':
                var $660 = self.xtyp;
                var $661 = self.body;
                var _deps$9 = Kind$Core$dependencies$go$($660, _deps$2);
                var _deps$10 = Kind$Core$dependencies$go$($661(_nil$3)(_nil$3), _deps$9);
                var $662 = _deps$10;
                var $657 = $662;
                break;
            case 'Kind.Term.lam':
                var $663 = self.body;
                var _deps$6 = Kind$Core$dependencies$go$($663(_nil$3), _deps$2);
                var $664 = _deps$6;
                var $657 = $664;
                break;
            case 'Kind.Term.app':
                var $665 = self.func;
                var $666 = self.argm;
                var _deps$6 = Kind$Core$dependencies$go$($665, _deps$2);
                var _deps$7 = Kind$Core$dependencies$go$($666, _deps$6);
                var $667 = _deps$7;
                var $657 = $667;
                break;
            case 'Kind.Term.let':
                var $668 = self.expr;
                var $669 = self.body;
                var _deps$7 = Kind$Core$dependencies$go$($668, _deps$2);
                var _deps$8 = Kind$Core$dependencies$go$($669(_nil$3), _deps$7);
                var $670 = _deps$8;
                var $657 = $670;
                break;
            case 'Kind.Term.def':
                var $671 = self.expr;
                var $672 = self.body;
                var _deps$7 = Kind$Core$dependencies$go$($671, _deps$2);
                var _deps$8 = Kind$Core$dependencies$go$($672(_nil$3), _deps$7);
                var $673 = _deps$8;
                var $657 = $673;
                break;
            case 'Kind.Term.ann':
                var $674 = self.term;
                var $675 = self.type;
                var _deps$7 = Kind$Core$dependencies$go$($674, _deps$2);
                var _deps$8 = Kind$Core$dependencies$go$($675, _deps$7);
                var $676 = _deps$8;
                var $657 = $676;
                break;
            case 'Kind.Term.var':
            case 'Kind.Term.typ':
            case 'Kind.Term.gol':
            case 'Kind.Term.hol':
            case 'Kind.Term.nat':
            case 'Kind.Term.chr':
            case 'Kind.Term.str':
            case 'Kind.Term.cse':
            case 'Kind.Term.ori':
                var $677 = _deps$2;
                var $657 = $677;
                break;
        };
        return $657;
    };
    const Kind$Core$dependencies$go = x0 => x1 => Kind$Core$dependencies$go$(x0, x1);

    function List$mapped$(_as$2, _f$4) {
        var self = _as$2;
        switch (self._) {
            case 'List.cons':
                var $679 = self.head;
                var $680 = self.tail;
                var $681 = List$cons$(_f$4($679), List$mapped$($680, _f$4));
                var $678 = $681;
                break;
            case 'List.nil':
                var $682 = List$nil;
                var $678 = $682;
                break;
        };
        return $678;
    };
    const List$mapped = x0 => x1 => List$mapped$(x0, x1);

    function Bits$reverse$tco$(_a$1, _r$2) {
        var Bits$reverse$tco$ = (_a$1, _r$2) => ({
            ctr: 'TCO',
            arg: [_a$1, _r$2]
        });
        var Bits$reverse$tco = _a$1 => _r$2 => Bits$reverse$tco$(_a$1, _r$2);
        var arg = [_a$1, _r$2];
        while (true) {
            let [_a$1, _r$2] = arg;
            var R = (() => {
                var self = _a$1;
                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                    case 'o':
                        var $683 = self.slice(0, -1);
                        var $684 = Bits$reverse$tco$($683, (_r$2 + '0'));
                        return $684;
                    case 'i':
                        var $685 = self.slice(0, -1);
                        var $686 = Bits$reverse$tco$($685, (_r$2 + '1'));
                        return $686;
                    case 'e':
                        var $687 = _r$2;
                        return $687;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Bits$reverse$tco = x0 => x1 => Bits$reverse$tco$(x0, x1);

    function Bits$reverse$(_a$1) {
        var $688 = Bits$reverse$tco$(_a$1, Bits$e);
        return $688;
    };
    const Bits$reverse = x0 => Bits$reverse$(x0);

    function BitsMap$to_list$go$(_xs$2, _key$3, _list$4) {
        var self = _xs$2;
        switch (self._) {
            case 'BitsMap.tie':
                var $690 = self.val;
                var $691 = self.lft;
                var $692 = self.rgt;
                var self = $690;
                switch (self._) {
                    case 'Maybe.some':
                        var $694 = self.value;
                        var $695 = List$cons$(Pair$new$(Bits$reverse$(_key$3), $694), _list$4);
                        var _list0$8 = $695;
                        break;
                    case 'Maybe.none':
                        var $696 = _list$4;
                        var _list0$8 = $696;
                        break;
                };
                var _list1$9 = BitsMap$to_list$go$($691, (_key$3 + '0'), _list0$8);
                var _list2$10 = BitsMap$to_list$go$($692, (_key$3 + '1'), _list1$9);
                var $693 = _list2$10;
                var $689 = $693;
                break;
            case 'BitsMap.new':
                var $697 = _list$4;
                var $689 = $697;
                break;
        };
        return $689;
    };
    const BitsMap$to_list$go = x0 => x1 => x2 => BitsMap$to_list$go$(x0, x1, x2);

    function Kind$Name$from_bits$(_bs$1) {
        var self = _bs$1;
        switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
            case 'o':
                var $699 = self.slice(0, -1);
                var _bs$3 = $699;
                var self = _bs$3;
                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                    case 'o':
                        var $701 = self.slice(0, -1);
                        var _bs$5 = $701;
                        var self = _bs$5;
                        switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                            case 'o':
                                var $703 = self.slice(0, -1);
                                var _bs$7 = $703;
                                var self = _bs$7;
                                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                                    case 'o':
                                        var $705 = self.slice(0, -1);
                                        var _bs$9 = $705;
                                        var self = _bs$9;
                                        switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                                            case 'o':
                                                var $707 = self.slice(0, -1);
                                                var _bs$11 = $707;
                                                var self = _bs$11;
                                                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                                                    case 'o':
                                                        var $709 = self.slice(0, -1);
                                                        var _bs$13 = $709;
                                                        var $710 = String$cons$(65, Kind$Name$from_bits$(_bs$13));
                                                        var $708 = $710;
                                                        break;
                                                    case 'i':
                                                        var $711 = self.slice(0, -1);
                                                        var _bs$13 = $711;
                                                        var $712 = String$cons$(66, Kind$Name$from_bits$(_bs$13));
                                                        var $708 = $712;
                                                        break;
                                                    case 'e':
                                                        var $713 = String$nil;
                                                        var $708 = $713;
                                                        break;
                                                };
                                                var $706 = $708;
                                                break;
                                            case 'i':
                                                var $714 = self.slice(0, -1);
                                                var _bs$11 = $714;
                                                var self = _bs$11;
                                                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                                                    case 'o':
                                                        var $716 = self.slice(0, -1);
                                                        var _bs$13 = $716;
                                                        var $717 = String$cons$(67, Kind$Name$from_bits$(_bs$13));
                                                        var $715 = $717;
                                                        break;
                                                    case 'i':
                                                        var $718 = self.slice(0, -1);
                                                        var _bs$13 = $718;
                                                        var $719 = String$cons$(68, Kind$Name$from_bits$(_bs$13));
                                                        var $715 = $719;
                                                        break;
                                                    case 'e':
                                                        var $720 = String$nil;
                                                        var $715 = $720;
                                                        break;
                                                };
                                                var $706 = $715;
                                                break;
                                            case 'e':
                                                var $721 = String$nil;
                                                var $706 = $721;
                                                break;
                                        };
                                        var $704 = $706;
                                        break;
                                    case 'i':
                                        var $722 = self.slice(0, -1);
                                        var _bs$9 = $722;
                                        var self = _bs$9;
                                        switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                                            case 'o':
                                                var $724 = self.slice(0, -1);
                                                var _bs$11 = $724;
                                                var self = _bs$11;
                                                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                                                    case 'o':
                                                        var $726 = self.slice(0, -1);
                                                        var _bs$13 = $726;
                                                        var $727 = String$cons$(69, Kind$Name$from_bits$(_bs$13));
                                                        var $725 = $727;
                                                        break;
                                                    case 'i':
                                                        var $728 = self.slice(0, -1);
                                                        var _bs$13 = $728;
                                                        var $729 = String$cons$(70, Kind$Name$from_bits$(_bs$13));
                                                        var $725 = $729;
                                                        break;
                                                    case 'e':
                                                        var $730 = String$nil;
                                                        var $725 = $730;
                                                        break;
                                                };
                                                var $723 = $725;
                                                break;
                                            case 'i':
                                                var $731 = self.slice(0, -1);
                                                var _bs$11 = $731;
                                                var self = _bs$11;
                                                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                                                    case 'o':
                                                        var $733 = self.slice(0, -1);
                                                        var _bs$13 = $733;
                                                        var $734 = String$cons$(71, Kind$Name$from_bits$(_bs$13));
                                                        var $732 = $734;
                                                        break;
                                                    case 'i':
                                                        var $735 = self.slice(0, -1);
                                                        var _bs$13 = $735;
                                                        var $736 = String$cons$(72, Kind$Name$from_bits$(_bs$13));
                                                        var $732 = $736;
                                                        break;
                                                    case 'e':
                                                        var $737 = String$nil;
                                                        var $732 = $737;
                                                        break;
                                                };
                                                var $723 = $732;
                                                break;
                                            case 'e':
                                                var $738 = String$nil;
                                                var $723 = $738;
                                                break;
                                        };
                                        var $704 = $723;
                                        break;
                                    case 'e':
                                        var $739 = String$nil;
                                        var $704 = $739;
                                        break;
                                };
                                var $702 = $704;
                                break;
                            case 'i':
                                var $740 = self.slice(0, -1);
                                var _bs$7 = $740;
                                var self = _bs$7;
                                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                                    case 'o':
                                        var $742 = self.slice(0, -1);
                                        var _bs$9 = $742;
                                        var self = _bs$9;
                                        switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                                            case 'o':
                                                var $744 = self.slice(0, -1);
                                                var _bs$11 = $744;
                                                var self = _bs$11;
                                                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                                                    case 'o':
                                                        var $746 = self.slice(0, -1);
                                                        var _bs$13 = $746;
                                                        var $747 = String$cons$(73, Kind$Name$from_bits$(_bs$13));
                                                        var $745 = $747;
                                                        break;
                                                    case 'i':
                                                        var $748 = self.slice(0, -1);
                                                        var _bs$13 = $748;
                                                        var $749 = String$cons$(74, Kind$Name$from_bits$(_bs$13));
                                                        var $745 = $749;
                                                        break;
                                                    case 'e':
                                                        var $750 = String$nil;
                                                        var $745 = $750;
                                                        break;
                                                };
                                                var $743 = $745;
                                                break;
                                            case 'i':
                                                var $751 = self.slice(0, -1);
                                                var _bs$11 = $751;
                                                var self = _bs$11;
                                                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                                                    case 'o':
                                                        var $753 = self.slice(0, -1);
                                                        var _bs$13 = $753;
                                                        var $754 = String$cons$(75, Kind$Name$from_bits$(_bs$13));
                                                        var $752 = $754;
                                                        break;
                                                    case 'i':
                                                        var $755 = self.slice(0, -1);
                                                        var _bs$13 = $755;
                                                        var $756 = String$cons$(76, Kind$Name$from_bits$(_bs$13));
                                                        var $752 = $756;
                                                        break;
                                                    case 'e':
                                                        var $757 = String$nil;
                                                        var $752 = $757;
                                                        break;
                                                };
                                                var $743 = $752;
                                                break;
                                            case 'e':
                                                var $758 = String$nil;
                                                var $743 = $758;
                                                break;
                                        };
                                        var $741 = $743;
                                        break;
                                    case 'i':
                                        var $759 = self.slice(0, -1);
                                        var _bs$9 = $759;
                                        var self = _bs$9;
                                        switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                                            case 'o':
                                                var $761 = self.slice(0, -1);
                                                var _bs$11 = $761;
                                                var self = _bs$11;
                                                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                                                    case 'o':
                                                        var $763 = self.slice(0, -1);
                                                        var _bs$13 = $763;
                                                        var $764 = String$cons$(77, Kind$Name$from_bits$(_bs$13));
                                                        var $762 = $764;
                                                        break;
                                                    case 'i':
                                                        var $765 = self.slice(0, -1);
                                                        var _bs$13 = $765;
                                                        var $766 = String$cons$(78, Kind$Name$from_bits$(_bs$13));
                                                        var $762 = $766;
                                                        break;
                                                    case 'e':
                                                        var $767 = String$nil;
                                                        var $762 = $767;
                                                        break;
                                                };
                                                var $760 = $762;
                                                break;
                                            case 'i':
                                                var $768 = self.slice(0, -1);
                                                var _bs$11 = $768;
                                                var self = _bs$11;
                                                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                                                    case 'o':
                                                        var $770 = self.slice(0, -1);
                                                        var _bs$13 = $770;
                                                        var $771 = String$cons$(79, Kind$Name$from_bits$(_bs$13));
                                                        var $769 = $771;
                                                        break;
                                                    case 'i':
                                                        var $772 = self.slice(0, -1);
                                                        var _bs$13 = $772;
                                                        var $773 = String$cons$(80, Kind$Name$from_bits$(_bs$13));
                                                        var $769 = $773;
                                                        break;
                                                    case 'e':
                                                        var $774 = String$nil;
                                                        var $769 = $774;
                                                        break;
                                                };
                                                var $760 = $769;
                                                break;
                                            case 'e':
                                                var $775 = String$nil;
                                                var $760 = $775;
                                                break;
                                        };
                                        var $741 = $760;
                                        break;
                                    case 'e':
                                        var $776 = String$nil;
                                        var $741 = $776;
                                        break;
                                };
                                var $702 = $741;
                                break;
                            case 'e':
                                var $777 = String$nil;
                                var $702 = $777;
                                break;
                        };
                        var $700 = $702;
                        break;
                    case 'i':
                        var $778 = self.slice(0, -1);
                        var _bs$5 = $778;
                        var self = _bs$5;
                        switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                            case 'o':
                                var $780 = self.slice(0, -1);
                                var _bs$7 = $780;
                                var self = _bs$7;
                                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                                    case 'o':
                                        var $782 = self.slice(0, -1);
                                        var _bs$9 = $782;
                                        var self = _bs$9;
                                        switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                                            case 'o':
                                                var $784 = self.slice(0, -1);
                                                var _bs$11 = $784;
                                                var self = _bs$11;
                                                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                                                    case 'o':
                                                        var $786 = self.slice(0, -1);
                                                        var _bs$13 = $786;
                                                        var $787 = String$cons$(81, Kind$Name$from_bits$(_bs$13));
                                                        var $785 = $787;
                                                        break;
                                                    case 'i':
                                                        var $788 = self.slice(0, -1);
                                                        var _bs$13 = $788;
                                                        var $789 = String$cons$(82, Kind$Name$from_bits$(_bs$13));
                                                        var $785 = $789;
                                                        break;
                                                    case 'e':
                                                        var $790 = String$nil;
                                                        var $785 = $790;
                                                        break;
                                                };
                                                var $783 = $785;
                                                break;
                                            case 'i':
                                                var $791 = self.slice(0, -1);
                                                var _bs$11 = $791;
                                                var self = _bs$11;
                                                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                                                    case 'o':
                                                        var $793 = self.slice(0, -1);
                                                        var _bs$13 = $793;
                                                        var $794 = String$cons$(83, Kind$Name$from_bits$(_bs$13));
                                                        var $792 = $794;
                                                        break;
                                                    case 'i':
                                                        var $795 = self.slice(0, -1);
                                                        var _bs$13 = $795;
                                                        var $796 = String$cons$(84, Kind$Name$from_bits$(_bs$13));
                                                        var $792 = $796;
                                                        break;
                                                    case 'e':
                                                        var $797 = String$nil;
                                                        var $792 = $797;
                                                        break;
                                                };
                                                var $783 = $792;
                                                break;
                                            case 'e':
                                                var $798 = String$nil;
                                                var $783 = $798;
                                                break;
                                        };
                                        var $781 = $783;
                                        break;
                                    case 'i':
                                        var $799 = self.slice(0, -1);
                                        var _bs$9 = $799;
                                        var self = _bs$9;
                                        switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                                            case 'o':
                                                var $801 = self.slice(0, -1);
                                                var _bs$11 = $801;
                                                var self = _bs$11;
                                                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                                                    case 'o':
                                                        var $803 = self.slice(0, -1);
                                                        var _bs$13 = $803;
                                                        var $804 = String$cons$(85, Kind$Name$from_bits$(_bs$13));
                                                        var $802 = $804;
                                                        break;
                                                    case 'i':
                                                        var $805 = self.slice(0, -1);
                                                        var _bs$13 = $805;
                                                        var $806 = String$cons$(86, Kind$Name$from_bits$(_bs$13));
                                                        var $802 = $806;
                                                        break;
                                                    case 'e':
                                                        var $807 = String$nil;
                                                        var $802 = $807;
                                                        break;
                                                };
                                                var $800 = $802;
                                                break;
                                            case 'i':
                                                var $808 = self.slice(0, -1);
                                                var _bs$11 = $808;
                                                var self = _bs$11;
                                                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                                                    case 'o':
                                                        var $810 = self.slice(0, -1);
                                                        var _bs$13 = $810;
                                                        var $811 = String$cons$(87, Kind$Name$from_bits$(_bs$13));
                                                        var $809 = $811;
                                                        break;
                                                    case 'i':
                                                        var $812 = self.slice(0, -1);
                                                        var _bs$13 = $812;
                                                        var $813 = String$cons$(88, Kind$Name$from_bits$(_bs$13));
                                                        var $809 = $813;
                                                        break;
                                                    case 'e':
                                                        var $814 = String$nil;
                                                        var $809 = $814;
                                                        break;
                                                };
                                                var $800 = $809;
                                                break;
                                            case 'e':
                                                var $815 = String$nil;
                                                var $800 = $815;
                                                break;
                                        };
                                        var $781 = $800;
                                        break;
                                    case 'e':
                                        var $816 = String$nil;
                                        var $781 = $816;
                                        break;
                                };
                                var $779 = $781;
                                break;
                            case 'i':
                                var $817 = self.slice(0, -1);
                                var _bs$7 = $817;
                                var self = _bs$7;
                                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                                    case 'o':
                                        var $819 = self.slice(0, -1);
                                        var _bs$9 = $819;
                                        var self = _bs$9;
                                        switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                                            case 'o':
                                                var $821 = self.slice(0, -1);
                                                var _bs$11 = $821;
                                                var self = _bs$11;
                                                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                                                    case 'o':
                                                        var $823 = self.slice(0, -1);
                                                        var _bs$13 = $823;
                                                        var $824 = String$cons$(89, Kind$Name$from_bits$(_bs$13));
                                                        var $822 = $824;
                                                        break;
                                                    case 'i':
                                                        var $825 = self.slice(0, -1);
                                                        var _bs$13 = $825;
                                                        var $826 = String$cons$(90, Kind$Name$from_bits$(_bs$13));
                                                        var $822 = $826;
                                                        break;
                                                    case 'e':
                                                        var $827 = String$nil;
                                                        var $822 = $827;
                                                        break;
                                                };
                                                var $820 = $822;
                                                break;
                                            case 'i':
                                                var $828 = self.slice(0, -1);
                                                var _bs$11 = $828;
                                                var self = _bs$11;
                                                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                                                    case 'o':
                                                        var $830 = self.slice(0, -1);
                                                        var _bs$13 = $830;
                                                        var $831 = String$cons$(97, Kind$Name$from_bits$(_bs$13));
                                                        var $829 = $831;
                                                        break;
                                                    case 'i':
                                                        var $832 = self.slice(0, -1);
                                                        var _bs$13 = $832;
                                                        var $833 = String$cons$(98, Kind$Name$from_bits$(_bs$13));
                                                        var $829 = $833;
                                                        break;
                                                    case 'e':
                                                        var $834 = String$nil;
                                                        var $829 = $834;
                                                        break;
                                                };
                                                var $820 = $829;
                                                break;
                                            case 'e':
                                                var $835 = String$nil;
                                                var $820 = $835;
                                                break;
                                        };
                                        var $818 = $820;
                                        break;
                                    case 'i':
                                        var $836 = self.slice(0, -1);
                                        var _bs$9 = $836;
                                        var self = _bs$9;
                                        switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                                            case 'o':
                                                var $838 = self.slice(0, -1);
                                                var _bs$11 = $838;
                                                var self = _bs$11;
                                                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                                                    case 'o':
                                                        var $840 = self.slice(0, -1);
                                                        var _bs$13 = $840;
                                                        var $841 = String$cons$(99, Kind$Name$from_bits$(_bs$13));
                                                        var $839 = $841;
                                                        break;
                                                    case 'i':
                                                        var $842 = self.slice(0, -1);
                                                        var _bs$13 = $842;
                                                        var $843 = String$cons$(100, Kind$Name$from_bits$(_bs$13));
                                                        var $839 = $843;
                                                        break;
                                                    case 'e':
                                                        var $844 = String$nil;
                                                        var $839 = $844;
                                                        break;
                                                };
                                                var $837 = $839;
                                                break;
                                            case 'i':
                                                var $845 = self.slice(0, -1);
                                                var _bs$11 = $845;
                                                var self = _bs$11;
                                                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                                                    case 'o':
                                                        var $847 = self.slice(0, -1);
                                                        var _bs$13 = $847;
                                                        var $848 = String$cons$(101, Kind$Name$from_bits$(_bs$13));
                                                        var $846 = $848;
                                                        break;
                                                    case 'i':
                                                        var $849 = self.slice(0, -1);
                                                        var _bs$13 = $849;
                                                        var $850 = String$cons$(102, Kind$Name$from_bits$(_bs$13));
                                                        var $846 = $850;
                                                        break;
                                                    case 'e':
                                                        var $851 = String$nil;
                                                        var $846 = $851;
                                                        break;
                                                };
                                                var $837 = $846;
                                                break;
                                            case 'e':
                                                var $852 = String$nil;
                                                var $837 = $852;
                                                break;
                                        };
                                        var $818 = $837;
                                        break;
                                    case 'e':
                                        var $853 = String$nil;
                                        var $818 = $853;
                                        break;
                                };
                                var $779 = $818;
                                break;
                            case 'e':
                                var $854 = String$nil;
                                var $779 = $854;
                                break;
                        };
                        var $700 = $779;
                        break;
                    case 'e':
                        var $855 = String$nil;
                        var $700 = $855;
                        break;
                };
                var $698 = $700;
                break;
            case 'i':
                var $856 = self.slice(0, -1);
                var _bs$3 = $856;
                var self = _bs$3;
                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                    case 'o':
                        var $858 = self.slice(0, -1);
                        var _bs$5 = $858;
                        var self = _bs$5;
                        switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                            case 'o':
                                var $860 = self.slice(0, -1);
                                var _bs$7 = $860;
                                var self = _bs$7;
                                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                                    case 'o':
                                        var $862 = self.slice(0, -1);
                                        var _bs$9 = $862;
                                        var self = _bs$9;
                                        switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                                            case 'o':
                                                var $864 = self.slice(0, -1);
                                                var _bs$11 = $864;
                                                var self = _bs$11;
                                                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                                                    case 'o':
                                                        var $866 = self.slice(0, -1);
                                                        var _bs$13 = $866;
                                                        var $867 = String$cons$(103, Kind$Name$from_bits$(_bs$13));
                                                        var $865 = $867;
                                                        break;
                                                    case 'i':
                                                        var $868 = self.slice(0, -1);
                                                        var _bs$13 = $868;
                                                        var $869 = String$cons$(104, Kind$Name$from_bits$(_bs$13));
                                                        var $865 = $869;
                                                        break;
                                                    case 'e':
                                                        var $870 = String$nil;
                                                        var $865 = $870;
                                                        break;
                                                };
                                                var $863 = $865;
                                                break;
                                            case 'i':
                                                var $871 = self.slice(0, -1);
                                                var _bs$11 = $871;
                                                var self = _bs$11;
                                                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                                                    case 'o':
                                                        var $873 = self.slice(0, -1);
                                                        var _bs$13 = $873;
                                                        var $874 = String$cons$(105, Kind$Name$from_bits$(_bs$13));
                                                        var $872 = $874;
                                                        break;
                                                    case 'i':
                                                        var $875 = self.slice(0, -1);
                                                        var _bs$13 = $875;
                                                        var $876 = String$cons$(106, Kind$Name$from_bits$(_bs$13));
                                                        var $872 = $876;
                                                        break;
                                                    case 'e':
                                                        var $877 = String$nil;
                                                        var $872 = $877;
                                                        break;
                                                };
                                                var $863 = $872;
                                                break;
                                            case 'e':
                                                var $878 = String$nil;
                                                var $863 = $878;
                                                break;
                                        };
                                        var $861 = $863;
                                        break;
                                    case 'i':
                                        var $879 = self.slice(0, -1);
                                        var _bs$9 = $879;
                                        var self = _bs$9;
                                        switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                                            case 'o':
                                                var $881 = self.slice(0, -1);
                                                var _bs$11 = $881;
                                                var self = _bs$11;
                                                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                                                    case 'o':
                                                        var $883 = self.slice(0, -1);
                                                        var _bs$13 = $883;
                                                        var $884 = String$cons$(107, Kind$Name$from_bits$(_bs$13));
                                                        var $882 = $884;
                                                        break;
                                                    case 'i':
                                                        var $885 = self.slice(0, -1);
                                                        var _bs$13 = $885;
                                                        var $886 = String$cons$(108, Kind$Name$from_bits$(_bs$13));
                                                        var $882 = $886;
                                                        break;
                                                    case 'e':
                                                        var $887 = String$nil;
                                                        var $882 = $887;
                                                        break;
                                                };
                                                var $880 = $882;
                                                break;
                                            case 'i':
                                                var $888 = self.slice(0, -1);
                                                var _bs$11 = $888;
                                                var self = _bs$11;
                                                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                                                    case 'o':
                                                        var $890 = self.slice(0, -1);
                                                        var _bs$13 = $890;
                                                        var $891 = String$cons$(109, Kind$Name$from_bits$(_bs$13));
                                                        var $889 = $891;
                                                        break;
                                                    case 'i':
                                                        var $892 = self.slice(0, -1);
                                                        var _bs$13 = $892;
                                                        var $893 = String$cons$(110, Kind$Name$from_bits$(_bs$13));
                                                        var $889 = $893;
                                                        break;
                                                    case 'e':
                                                        var $894 = String$nil;
                                                        var $889 = $894;
                                                        break;
                                                };
                                                var $880 = $889;
                                                break;
                                            case 'e':
                                                var $895 = String$nil;
                                                var $880 = $895;
                                                break;
                                        };
                                        var $861 = $880;
                                        break;
                                    case 'e':
                                        var $896 = String$nil;
                                        var $861 = $896;
                                        break;
                                };
                                var $859 = $861;
                                break;
                            case 'i':
                                var $897 = self.slice(0, -1);
                                var _bs$7 = $897;
                                var self = _bs$7;
                                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                                    case 'o':
                                        var $899 = self.slice(0, -1);
                                        var _bs$9 = $899;
                                        var self = _bs$9;
                                        switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                                            case 'o':
                                                var $901 = self.slice(0, -1);
                                                var _bs$11 = $901;
                                                var self = _bs$11;
                                                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                                                    case 'o':
                                                        var $903 = self.slice(0, -1);
                                                        var _bs$13 = $903;
                                                        var $904 = String$cons$(111, Kind$Name$from_bits$(_bs$13));
                                                        var $902 = $904;
                                                        break;
                                                    case 'i':
                                                        var $905 = self.slice(0, -1);
                                                        var _bs$13 = $905;
                                                        var $906 = String$cons$(112, Kind$Name$from_bits$(_bs$13));
                                                        var $902 = $906;
                                                        break;
                                                    case 'e':
                                                        var $907 = String$nil;
                                                        var $902 = $907;
                                                        break;
                                                };
                                                var $900 = $902;
                                                break;
                                            case 'i':
                                                var $908 = self.slice(0, -1);
                                                var _bs$11 = $908;
                                                var self = _bs$11;
                                                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                                                    case 'o':
                                                        var $910 = self.slice(0, -1);
                                                        var _bs$13 = $910;
                                                        var $911 = String$cons$(113, Kind$Name$from_bits$(_bs$13));
                                                        var $909 = $911;
                                                        break;
                                                    case 'i':
                                                        var $912 = self.slice(0, -1);
                                                        var _bs$13 = $912;
                                                        var $913 = String$cons$(114, Kind$Name$from_bits$(_bs$13));
                                                        var $909 = $913;
                                                        break;
                                                    case 'e':
                                                        var $914 = String$nil;
                                                        var $909 = $914;
                                                        break;
                                                };
                                                var $900 = $909;
                                                break;
                                            case 'e':
                                                var $915 = String$nil;
                                                var $900 = $915;
                                                break;
                                        };
                                        var $898 = $900;
                                        break;
                                    case 'i':
                                        var $916 = self.slice(0, -1);
                                        var _bs$9 = $916;
                                        var self = _bs$9;
                                        switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                                            case 'o':
                                                var $918 = self.slice(0, -1);
                                                var _bs$11 = $918;
                                                var self = _bs$11;
                                                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                                                    case 'o':
                                                        var $920 = self.slice(0, -1);
                                                        var _bs$13 = $920;
                                                        var $921 = String$cons$(115, Kind$Name$from_bits$(_bs$13));
                                                        var $919 = $921;
                                                        break;
                                                    case 'i':
                                                        var $922 = self.slice(0, -1);
                                                        var _bs$13 = $922;
                                                        var $923 = String$cons$(116, Kind$Name$from_bits$(_bs$13));
                                                        var $919 = $923;
                                                        break;
                                                    case 'e':
                                                        var $924 = String$nil;
                                                        var $919 = $924;
                                                        break;
                                                };
                                                var $917 = $919;
                                                break;
                                            case 'i':
                                                var $925 = self.slice(0, -1);
                                                var _bs$11 = $925;
                                                var self = _bs$11;
                                                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                                                    case 'o':
                                                        var $927 = self.slice(0, -1);
                                                        var _bs$13 = $927;
                                                        var $928 = String$cons$(117, Kind$Name$from_bits$(_bs$13));
                                                        var $926 = $928;
                                                        break;
                                                    case 'i':
                                                        var $929 = self.slice(0, -1);
                                                        var _bs$13 = $929;
                                                        var $930 = String$cons$(118, Kind$Name$from_bits$(_bs$13));
                                                        var $926 = $930;
                                                        break;
                                                    case 'e':
                                                        var $931 = String$nil;
                                                        var $926 = $931;
                                                        break;
                                                };
                                                var $917 = $926;
                                                break;
                                            case 'e':
                                                var $932 = String$nil;
                                                var $917 = $932;
                                                break;
                                        };
                                        var $898 = $917;
                                        break;
                                    case 'e':
                                        var $933 = String$nil;
                                        var $898 = $933;
                                        break;
                                };
                                var $859 = $898;
                                break;
                            case 'e':
                                var $934 = String$nil;
                                var $859 = $934;
                                break;
                        };
                        var $857 = $859;
                        break;
                    case 'i':
                        var $935 = self.slice(0, -1);
                        var _bs$5 = $935;
                        var self = _bs$5;
                        switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                            case 'o':
                                var $937 = self.slice(0, -1);
                                var _bs$7 = $937;
                                var self = _bs$7;
                                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                                    case 'o':
                                        var $939 = self.slice(0, -1);
                                        var _bs$9 = $939;
                                        var self = _bs$9;
                                        switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                                            case 'o':
                                                var $941 = self.slice(0, -1);
                                                var _bs$11 = $941;
                                                var self = _bs$11;
                                                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                                                    case 'o':
                                                        var $943 = self.slice(0, -1);
                                                        var _bs$13 = $943;
                                                        var $944 = String$cons$(119, Kind$Name$from_bits$(_bs$13));
                                                        var $942 = $944;
                                                        break;
                                                    case 'i':
                                                        var $945 = self.slice(0, -1);
                                                        var _bs$13 = $945;
                                                        var $946 = String$cons$(120, Kind$Name$from_bits$(_bs$13));
                                                        var $942 = $946;
                                                        break;
                                                    case 'e':
                                                        var $947 = String$nil;
                                                        var $942 = $947;
                                                        break;
                                                };
                                                var $940 = $942;
                                                break;
                                            case 'i':
                                                var $948 = self.slice(0, -1);
                                                var _bs$11 = $948;
                                                var self = _bs$11;
                                                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                                                    case 'o':
                                                        var $950 = self.slice(0, -1);
                                                        var _bs$13 = $950;
                                                        var $951 = String$cons$(121, Kind$Name$from_bits$(_bs$13));
                                                        var $949 = $951;
                                                        break;
                                                    case 'i':
                                                        var $952 = self.slice(0, -1);
                                                        var _bs$13 = $952;
                                                        var $953 = String$cons$(122, Kind$Name$from_bits$(_bs$13));
                                                        var $949 = $953;
                                                        break;
                                                    case 'e':
                                                        var $954 = String$nil;
                                                        var $949 = $954;
                                                        break;
                                                };
                                                var $940 = $949;
                                                break;
                                            case 'e':
                                                var $955 = String$nil;
                                                var $940 = $955;
                                                break;
                                        };
                                        var $938 = $940;
                                        break;
                                    case 'i':
                                        var $956 = self.slice(0, -1);
                                        var _bs$9 = $956;
                                        var self = _bs$9;
                                        switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                                            case 'o':
                                                var $958 = self.slice(0, -1);
                                                var _bs$11 = $958;
                                                var self = _bs$11;
                                                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                                                    case 'o':
                                                        var $960 = self.slice(0, -1);
                                                        var _bs$13 = $960;
                                                        var $961 = String$cons$(48, Kind$Name$from_bits$(_bs$13));
                                                        var $959 = $961;
                                                        break;
                                                    case 'i':
                                                        var $962 = self.slice(0, -1);
                                                        var _bs$13 = $962;
                                                        var $963 = String$cons$(49, Kind$Name$from_bits$(_bs$13));
                                                        var $959 = $963;
                                                        break;
                                                    case 'e':
                                                        var $964 = String$nil;
                                                        var $959 = $964;
                                                        break;
                                                };
                                                var $957 = $959;
                                                break;
                                            case 'i':
                                                var $965 = self.slice(0, -1);
                                                var _bs$11 = $965;
                                                var self = _bs$11;
                                                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                                                    case 'o':
                                                        var $967 = self.slice(0, -1);
                                                        var _bs$13 = $967;
                                                        var $968 = String$cons$(50, Kind$Name$from_bits$(_bs$13));
                                                        var $966 = $968;
                                                        break;
                                                    case 'i':
                                                        var $969 = self.slice(0, -1);
                                                        var _bs$13 = $969;
                                                        var $970 = String$cons$(51, Kind$Name$from_bits$(_bs$13));
                                                        var $966 = $970;
                                                        break;
                                                    case 'e':
                                                        var $971 = String$nil;
                                                        var $966 = $971;
                                                        break;
                                                };
                                                var $957 = $966;
                                                break;
                                            case 'e':
                                                var $972 = String$nil;
                                                var $957 = $972;
                                                break;
                                        };
                                        var $938 = $957;
                                        break;
                                    case 'e':
                                        var $973 = String$nil;
                                        var $938 = $973;
                                        break;
                                };
                                var $936 = $938;
                                break;
                            case 'i':
                                var $974 = self.slice(0, -1);
                                var _bs$7 = $974;
                                var self = _bs$7;
                                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                                    case 'o':
                                        var $976 = self.slice(0, -1);
                                        var _bs$9 = $976;
                                        var self = _bs$9;
                                        switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                                            case 'o':
                                                var $978 = self.slice(0, -1);
                                                var _bs$11 = $978;
                                                var self = _bs$11;
                                                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                                                    case 'o':
                                                        var $980 = self.slice(0, -1);
                                                        var _bs$13 = $980;
                                                        var $981 = String$cons$(52, Kind$Name$from_bits$(_bs$13));
                                                        var $979 = $981;
                                                        break;
                                                    case 'i':
                                                        var $982 = self.slice(0, -1);
                                                        var _bs$13 = $982;
                                                        var $983 = String$cons$(53, Kind$Name$from_bits$(_bs$13));
                                                        var $979 = $983;
                                                        break;
                                                    case 'e':
                                                        var $984 = String$nil;
                                                        var $979 = $984;
                                                        break;
                                                };
                                                var $977 = $979;
                                                break;
                                            case 'i':
                                                var $985 = self.slice(0, -1);
                                                var _bs$11 = $985;
                                                var self = _bs$11;
                                                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                                                    case 'o':
                                                        var $987 = self.slice(0, -1);
                                                        var _bs$13 = $987;
                                                        var $988 = String$cons$(54, Kind$Name$from_bits$(_bs$13));
                                                        var $986 = $988;
                                                        break;
                                                    case 'i':
                                                        var $989 = self.slice(0, -1);
                                                        var _bs$13 = $989;
                                                        var $990 = String$cons$(55, Kind$Name$from_bits$(_bs$13));
                                                        var $986 = $990;
                                                        break;
                                                    case 'e':
                                                        var $991 = String$nil;
                                                        var $986 = $991;
                                                        break;
                                                };
                                                var $977 = $986;
                                                break;
                                            case 'e':
                                                var $992 = String$nil;
                                                var $977 = $992;
                                                break;
                                        };
                                        var $975 = $977;
                                        break;
                                    case 'i':
                                        var $993 = self.slice(0, -1);
                                        var _bs$9 = $993;
                                        var self = _bs$9;
                                        switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                                            case 'o':
                                                var $995 = self.slice(0, -1);
                                                var _bs$11 = $995;
                                                var self = _bs$11;
                                                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                                                    case 'o':
                                                        var $997 = self.slice(0, -1);
                                                        var _bs$13 = $997;
                                                        var $998 = String$cons$(56, Kind$Name$from_bits$(_bs$13));
                                                        var $996 = $998;
                                                        break;
                                                    case 'i':
                                                        var $999 = self.slice(0, -1);
                                                        var _bs$13 = $999;
                                                        var $1000 = String$cons$(57, Kind$Name$from_bits$(_bs$13));
                                                        var $996 = $1000;
                                                        break;
                                                    case 'e':
                                                        var $1001 = String$nil;
                                                        var $996 = $1001;
                                                        break;
                                                };
                                                var $994 = $996;
                                                break;
                                            case 'i':
                                                var $1002 = self.slice(0, -1);
                                                var _bs$11 = $1002;
                                                var self = _bs$11;
                                                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                                                    case 'o':
                                                        var $1004 = self.slice(0, -1);
                                                        var _bs$13 = $1004;
                                                        var $1005 = String$cons$(46, Kind$Name$from_bits$(_bs$13));
                                                        var $1003 = $1005;
                                                        break;
                                                    case 'i':
                                                        var $1006 = self.slice(0, -1);
                                                        var _bs$13 = $1006;
                                                        var $1007 = String$cons$(95, Kind$Name$from_bits$(_bs$13));
                                                        var $1003 = $1007;
                                                        break;
                                                    case 'e':
                                                        var $1008 = String$nil;
                                                        var $1003 = $1008;
                                                        break;
                                                };
                                                var $994 = $1003;
                                                break;
                                            case 'e':
                                                var $1009 = String$nil;
                                                var $994 = $1009;
                                                break;
                                        };
                                        var $975 = $994;
                                        break;
                                    case 'e':
                                        var $1010 = String$nil;
                                        var $975 = $1010;
                                        break;
                                };
                                var $936 = $975;
                                break;
                            case 'e':
                                var $1011 = String$nil;
                                var $936 = $1011;
                                break;
                        };
                        var $857 = $936;
                        break;
                    case 'e':
                        var $1012 = String$nil;
                        var $857 = $1012;
                        break;
                };
                var $698 = $857;
                break;
            case 'e':
                var $1013 = String$nil;
                var $698 = $1013;
                break;
        };
        return $698;
    };
    const Kind$Name$from_bits = x0 => Kind$Name$from_bits$(x0);

    function Kind$Map$to_list$(_xs$2) {
        var _kvs$3 = List$reverse$(BitsMap$to_list$go$(_xs$2, Bits$e, List$nil));
        var $1014 = List$mapped$(_kvs$3, (_kv$4 => {
            var self = _kv$4;
            switch (self._) {
                case 'Pair.new':
                    var $1016 = self.fst;
                    var $1017 = self.snd;
                    var $1018 = Pair$new$(Kind$Name$from_bits$($1016), $1017);
                    var $1015 = $1018;
                    break;
            };
            return $1015;
        }));
        return $1014;
    };
    const Kind$Map$to_list = x0 => Kind$Map$to_list$(x0);

    function Kind$Map$keys$(_xs$2) {
        var $1019 = List$mapped$(Kind$Map$to_list$(_xs$2), Pair$fst);
        return $1019;
    };
    const Kind$Map$keys = x0 => Kind$Map$keys$(x0);

    function Kind$Synth$load$cached$(_names$1, _defs$2) {
        var self = _names$1;
        switch (self._) {
            case 'List.cons':
                var $1021 = self.head;
                var $1022 = self.tail;
                var self = Kind$Synth$load$cached$is_loop$($1021, _defs$2);
                if (self) {
                    var $1024 = Kind$Synth$load$cached$($1022, _defs$2);
                    var $1023 = $1024;
                } else {
                    var _name$5 = $1021;
                    var $1025 = IO$monad$((_m$bind$6 => _m$pure$7 => {
                        var $1026 = _m$bind$6;
                        return $1026;
                    }))(Kind$Synth$load$cached$def$(_name$5))((_defn$6 => {
                        var self = _defn$6;
                        switch (self._) {
                            case 'Maybe.some':
                                var $1028 = self.value;
                                var self = $1028;
                                switch (self._) {
                                    case 'Kind.Def.new':
                                        var $1030 = self.term;
                                        var $1031 = self.type;
                                        var _defs$17 = Kind$Map$set$(_name$5, $1028, _defs$2);
                                        var _deps$18 = Kind$Map$new;
                                        var _deps$19 = Kind$Core$dependencies$go$($1030, _deps$18);
                                        var _deps$20 = Kind$Core$dependencies$go$($1031, _deps$19);
                                        var _deps$21 = Kind$Map$keys$(_deps$20);
                                        var $1032 = IO$monad$((_m$bind$22 => _m$pure$23 => {
                                            var $1033 = _m$bind$22;
                                            return $1033;
                                        }))(Kind$Synth$load$cached$(_deps$21, _defs$17))((_defs$22 => {
                                            var self = _defs$22;
                                            switch (self._) {
                                                case 'Maybe.some':
                                                    var $1035 = self.value;
                                                    var $1036 = Kind$Synth$load$cached$($1022, $1035);
                                                    var $1034 = $1036;
                                                    break;
                                                case 'Maybe.none':
                                                    var $1037 = IO$monad$((_m$bind$23 => _m$pure$24 => {
                                                        var $1038 = _m$pure$24;
                                                        return $1038;
                                                    }))(Maybe$none);
                                                    var $1034 = $1037;
                                                    break;
                                            };
                                            return $1034;
                                        }));
                                        var $1029 = $1032;
                                        break;
                                };
                                var $1027 = $1029;
                                break;
                            case 'Maybe.none':
                                var $1039 = IO$monad$((_m$bind$7 => _m$pure$8 => {
                                    var $1040 = _m$pure$8;
                                    return $1040;
                                }))(Maybe$none);
                                var $1027 = $1039;
                                break;
                        };
                        return $1027;
                    }));
                    var $1023 = $1025;
                };
                var $1020 = $1023;
                break;
            case 'List.nil':
                var $1041 = IO$monad$((_m$bind$3 => _m$pure$4 => {
                    var $1042 = _m$pure$4;
                    return $1042;
                }))(Maybe$some$(_defs$2));
                var $1020 = $1041;
                break;
        };
        return $1020;
    };
    const Kind$Synth$load$cached = x0 => x1 => Kind$Synth$load$cached$(x0, x1);

    function Parser$is_eof$(_idx$1, _code$2) {
        var self = _code$2;
        if (self.length === 0) {
            var $1044 = Parser$Reply$value$(_idx$1, _code$2, Bool$true);
            var $1043 = $1044;
        } else {
            var $1045 = self.charCodeAt(0);
            var $1046 = self.slice(1);
            var $1047 = Parser$Reply$value$(_idx$1, _code$2, Bool$false);
            var $1043 = $1047;
        };
        return $1043;
    };
    const Parser$is_eof = x0 => x1 => Parser$is_eof$(x0, x1);

    function Parser$(_V$1) {
        var $1048 = null;
        return $1048;
    };
    const Parser = x0 => Parser$(x0);

    function Parser$ErrorAt$new$(_idx$1, _code$2, _err$3) {
        var $1049 = ({
            _: 'Parser.ErrorAt.new',
            'idx': _idx$1,
            'code': _code$2,
            'err': _err$3
        });
        return $1049;
    };
    const Parser$ErrorAt$new = x0 => x1 => x2 => Parser$ErrorAt$new$(x0, x1, x2);
    const Nat$gtn = a0 => a1 => (a0 > a1);

    function Parser$ErrorAt$combine$(_a$1, _b$2) {
        var self = _a$1;
        switch (self._) {
            case 'Maybe.some':
                var $1051 = self.value;
                var self = _b$2;
                switch (self._) {
                    case 'Maybe.some':
                        var $1053 = self.value;
                        var self = $1051;
                        switch (self._) {
                            case 'Parser.ErrorAt.new':
                                var $1055 = self.idx;
                                var self = $1053;
                                switch (self._) {
                                    case 'Parser.ErrorAt.new':
                                        var $1057 = self.idx;
                                        var self = ($1055 > $1057);
                                        if (self) {
                                            var $1059 = _a$1;
                                            var $1058 = $1059;
                                        } else {
                                            var $1060 = _b$2;
                                            var $1058 = $1060;
                                        };
                                        var $1056 = $1058;
                                        break;
                                };
                                var $1054 = $1056;
                                break;
                        };
                        var $1052 = $1054;
                        break;
                    case 'Maybe.none':
                        var $1061 = _a$1;
                        var $1052 = $1061;
                        break;
                };
                var $1050 = $1052;
                break;
            case 'Maybe.none':
                var $1062 = _b$2;
                var $1050 = $1062;
                break;
        };
        return $1050;
    };
    const Parser$ErrorAt$combine = x0 => x1 => Parser$ErrorAt$combine$(x0, x1);

    function Parser$first_of$go$(_pars$2, _err$3, _idx$4, _code$5) {
        var Parser$first_of$go$ = (_pars$2, _err$3, _idx$4, _code$5) => ({
            ctr: 'TCO',
            arg: [_pars$2, _err$3, _idx$4, _code$5]
        });
        var Parser$first_of$go = _pars$2 => _err$3 => _idx$4 => _code$5 => Parser$first_of$go$(_pars$2, _err$3, _idx$4, _code$5);
        var arg = [_pars$2, _err$3, _idx$4, _code$5];
        while (true) {
            let [_pars$2, _err$3, _idx$4, _code$5] = arg;
            var R = (() => {
                var self = _pars$2;
                switch (self._) {
                    case 'List.cons':
                        var $1063 = self.head;
                        var $1064 = self.tail;
                        var _parsed$8 = $1063(_idx$4)(_code$5);
                        var self = _parsed$8;
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $1066 = self.idx;
                                var $1067 = self.code;
                                var $1068 = self.err;
                                var _neo$12 = Maybe$some$(Parser$ErrorAt$new$($1066, $1067, $1068));
                                var _err$13 = Parser$ErrorAt$combine$(_neo$12, _err$3);
                                var $1069 = Parser$first_of$go$($1064, _err$13, _idx$4, _code$5);
                                var $1065 = $1069;
                                break;
                            case 'Parser.Reply.value':
                                var $1070 = self.idx;
                                var $1071 = self.code;
                                var $1072 = self.val;
                                var $1073 = Parser$Reply$value$($1070, $1071, $1072);
                                var $1065 = $1073;
                                break;
                        };
                        return $1065;
                    case 'List.nil':
                        var self = _err$3;
                        switch (self._) {
                            case 'Maybe.some':
                                var $1075 = self.value;
                                var self = $1075;
                                switch (self._) {
                                    case 'Parser.ErrorAt.new':
                                        var $1077 = self.idx;
                                        var $1078 = self.code;
                                        var $1079 = self.err;
                                        var $1080 = Parser$Reply$error$($1077, $1078, $1079);
                                        var $1076 = $1080;
                                        break;
                                };
                                var $1074 = $1076;
                                break;
                            case 'Maybe.none':
                                var $1081 = Parser$Reply$error$(_idx$4, _code$5, "No parse.");
                                var $1074 = $1081;
                                break;
                        };
                        return $1074;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Parser$first_of$go = x0 => x1 => x2 => x3 => Parser$first_of$go$(x0, x1, x2, x3);

    function Parser$first_of$(_pars$2) {
        var $1082 = Parser$first_of$go(_pars$2)(Maybe$none);
        return $1082;
    };
    const Parser$first_of = x0 => Parser$first_of$(x0);

    function String$flatten$go$(_xs$1, _res$2) {
        var String$flatten$go$ = (_xs$1, _res$2) => ({
            ctr: 'TCO',
            arg: [_xs$1, _res$2]
        });
        var String$flatten$go = _xs$1 => _res$2 => String$flatten$go$(_xs$1, _res$2);
        var arg = [_xs$1, _res$2];
        while (true) {
            let [_xs$1, _res$2] = arg;
            var R = (() => {
                var self = _xs$1;
                switch (self._) {
                    case 'List.cons':
                        var $1083 = self.head;
                        var $1084 = self.tail;
                        var $1085 = String$flatten$go$($1084, (_res$2 + $1083));
                        return $1085;
                    case 'List.nil':
                        var $1086 = _res$2;
                        return $1086;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const String$flatten$go = x0 => x1 => String$flatten$go$(x0, x1);

    function String$flatten$(_xs$1) {
        var $1087 = String$flatten$go$(_xs$1, "");
        return $1087;
    };
    const String$flatten = x0 => String$flatten$(x0);

    function Parser$text$go$(_text$1, _idx$2, _code$3) {
        var self = _text$1;
        if (self.length === 0) {
            var $1089 = Parser$Reply$value$(_idx$2, _code$3, Unit$new);
            var $1088 = $1089;
        } else {
            var $1090 = self.charCodeAt(0);
            var $1091 = self.slice(1);
            var self = _code$3;
            if (self.length === 0) {
                var _error$6 = String$flatten$(List$cons$("Expected \'", List$cons$(_text$1, List$cons$("\', found end of file.", List$nil))));
                var $1093 = Parser$Reply$error$(_idx$2, _code$3, _error$6);
                var $1092 = $1093;
            } else {
                var $1094 = self.charCodeAt(0);
                var $1095 = self.slice(1);
                var self = ($1090 === $1094);
                if (self) {
                    var $1097 = Parser$text$($1091, Nat$succ$(_idx$2), $1095);
                    var $1096 = $1097;
                } else {
                    var _error$8 = String$flatten$(List$cons$("Expected \'", List$cons$(_text$1, List$cons$("\', found \'", List$cons$(String$cons$($1094, String$nil), List$cons$("\'.", List$nil))))));
                    var $1098 = Parser$Reply$error$(_idx$2, _code$3, _error$8);
                    var $1096 = $1098;
                };
                var $1092 = $1096;
            };
            var $1088 = $1092;
        };
        return $1088;
    };
    const Parser$text$go = x0 => x1 => x2 => Parser$text$go$(x0, x1, x2);

    function Parser$text$(_text$1, _idx$2, _code$3) {
        var self = Parser$text$go$(_text$1, _idx$2, _code$3);
        switch (self._) {
            case 'Parser.Reply.error':
                var $1100 = self.err;
                var $1101 = Parser$Reply$error$(_idx$2, _code$3, $1100);
                var $1099 = $1101;
                break;
            case 'Parser.Reply.value':
                var $1102 = self.idx;
                var $1103 = self.code;
                var $1104 = self.val;
                var $1105 = Parser$Reply$value$($1102, $1103, $1104);
                var $1099 = $1105;
                break;
        };
        return $1099;
    };
    const Parser$text = x0 => x1 => x2 => Parser$text$(x0, x1, x2);

    function Parser$eof$(_idx$1, _code$2) {
        var self = _code$2;
        if (self.length === 0) {
            var $1107 = Parser$Reply$value$(_idx$1, _code$2, Unit$new);
            var $1106 = $1107;
        } else {
            var $1108 = self.charCodeAt(0);
            var $1109 = self.slice(1);
            var $1110 = Parser$Reply$error$(_idx$1, _code$2, "Expected end-of-file.");
            var $1106 = $1110;
        };
        return $1106;
    };
    const Parser$eof = x0 => x1 => Parser$eof$(x0, x1);

    function Parser$until$go$(_until$2, _parse$3, _values$4, _idx$5, _code$6) {
        var Parser$until$go$ = (_until$2, _parse$3, _values$4, _idx$5, _code$6) => ({
            ctr: 'TCO',
            arg: [_until$2, _parse$3, _values$4, _idx$5, _code$6]
        });
        var Parser$until$go = _until$2 => _parse$3 => _values$4 => _idx$5 => _code$6 => Parser$until$go$(_until$2, _parse$3, _values$4, _idx$5, _code$6);
        var arg = [_until$2, _parse$3, _values$4, _idx$5, _code$6];
        while (true) {
            let [_until$2, _parse$3, _values$4, _idx$5, _code$6] = arg;
            var R = (() => {
                var _until_reply$7 = _until$2(_idx$5)(_code$6);
                var self = _until_reply$7;
                switch (self._) {
                    case 'Parser.Reply.value':
                        var $1112 = self.idx;
                        var $1113 = self.code;
                        var $1114 = Parser$Reply$value$($1112, $1113, List$reverse$(_values$4));
                        var $1111 = $1114;
                        break;
                    case 'Parser.Reply.error':
                        var _reply$11 = _parse$3(_idx$5)(_code$6);
                        var self = _reply$11;
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $1116 = self.idx;
                                var $1117 = self.code;
                                var $1118 = self.err;
                                var $1119 = Parser$Reply$error$($1116, $1117, $1118);
                                var $1115 = $1119;
                                break;
                            case 'Parser.Reply.value':
                                var $1120 = self.idx;
                                var $1121 = self.code;
                                var $1122 = self.val;
                                var $1123 = Parser$until$go$(_until$2, _parse$3, List$cons$($1122, _values$4), $1120, $1121);
                                var $1115 = $1123;
                                break;
                        };
                        var $1111 = $1115;
                        break;
                };
                return $1111;
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Parser$until$go = x0 => x1 => x2 => x3 => x4 => Parser$until$go$(x0, x1, x2, x3, x4);

    function Parser$until$(_until$2, _parse$3) {
        var $1124 = Parser$until$go(_until$2)(_parse$3)(List$nil);
        return $1124;
    };
    const Parser$until = x0 => x1 => Parser$until$(x0, x1);

    function Parser$one$(_idx$1, _code$2) {
        var self = _code$2;
        if (self.length === 0) {
            var $1126 = Parser$Reply$error$(_idx$1, _code$2, "Unexpected end of file.");
            var $1125 = $1126;
        } else {
            var $1127 = self.charCodeAt(0);
            var $1128 = self.slice(1);
            var $1129 = Parser$Reply$value$(Nat$succ$(_idx$1), $1128, $1127);
            var $1125 = $1129;
        };
        return $1125;
    };
    const Parser$one = x0 => x1 => Parser$one$(x0, x1);
    const Kind$Parser$spaces = Parser$many$(Parser$first_of$(List$cons$(Parser$text(" "), List$cons$(Parser$text("\u{9}"), List$cons$(Parser$text("\u{a}"), List$cons$((_idx$1 => _code$2 => {
        var self = Parser$text$("//", _idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $1131 = self.idx;
                var $1132 = self.code;
                var $1133 = self.err;
                var $1134 = Parser$Reply$error$($1131, $1132, $1133);
                var $1130 = $1134;
                break;
            case 'Parser.Reply.value':
                var $1135 = self.idx;
                var $1136 = self.code;
                var _endl_or_eof$6 = Parser$first_of$(List$cons$(Parser$text("\u{a}"), List$cons$(Parser$eof, List$nil)));
                var self = Parser$until$(_endl_or_eof$6, Parser$one)($1135)($1136);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $1138 = self.idx;
                        var $1139 = self.code;
                        var $1140 = self.err;
                        var $1141 = Parser$Reply$error$($1138, $1139, $1140);
                        var $1137 = $1141;
                        break;
                    case 'Parser.Reply.value':
                        var $1142 = self.idx;
                        var $1143 = self.code;
                        var $1144 = Parser$Reply$value$($1142, $1143, Unit$new);
                        var $1137 = $1144;
                        break;
                };
                var $1130 = $1137;
                break;
        };
        return $1130;
    }), List$nil))))));

    function Parser$get_index$(_idx$1, _code$2) {
        var $1145 = Parser$Reply$value$(_idx$1, _code$2, _idx$1);
        return $1145;
    };
    const Parser$get_index = x0 => x1 => Parser$get_index$(x0, x1);

    function Kind$Parser$init$(_idx$1, _code$2) {
        var self = Kind$Parser$spaces(_idx$1)(_code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $1147 = self.idx;
                var $1148 = self.code;
                var $1149 = self.err;
                var $1150 = Parser$Reply$error$($1147, $1148, $1149);
                var $1146 = $1150;
                break;
            case 'Parser.Reply.value':
                var $1151 = self.idx;
                var $1152 = self.code;
                var self = Parser$get_index$($1151, $1152);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $1154 = self.idx;
                        var $1155 = self.code;
                        var $1156 = self.err;
                        var $1157 = Parser$Reply$error$($1154, $1155, $1156);
                        var $1153 = $1157;
                        break;
                    case 'Parser.Reply.value':
                        var $1158 = self.idx;
                        var $1159 = self.code;
                        var $1160 = self.val;
                        var $1161 = Parser$Reply$value$($1158, $1159, $1160);
                        var $1153 = $1161;
                        break;
                };
                var $1146 = $1153;
                break;
        };
        return $1146;
    };
    const Kind$Parser$init = x0 => x1 => Kind$Parser$init$(x0, x1);

    function U16$btw$(_a$1, _b$2, _c$3) {
        var $1162 = ((_a$1 <= _b$2) && (_b$2 <= _c$3));
        return $1162;
    };
    const U16$btw = x0 => x1 => x2 => U16$btw$(x0, x1, x2);

    function Kind$Name$is_letter$(_chr$1) {
        var self = U16$btw$(65, _chr$1, 90);
        if (self) {
            var $1164 = Bool$true;
            var $1163 = $1164;
        } else {
            var self = U16$btw$(97, _chr$1, 122);
            if (self) {
                var $1166 = Bool$true;
                var $1165 = $1166;
            } else {
                var self = U16$btw$(48, _chr$1, 57);
                if (self) {
                    var $1168 = Bool$true;
                    var $1167 = $1168;
                } else {
                    var self = (46 === _chr$1);
                    if (self) {
                        var $1170 = Bool$true;
                        var $1169 = $1170;
                    } else {
                        var self = (95 === _chr$1);
                        if (self) {
                            var $1172 = Bool$true;
                            var $1171 = $1172;
                        } else {
                            var self = (94 === _chr$1);
                            if (self) {
                                var $1174 = Bool$true;
                                var $1173 = $1174;
                            } else {
                                var $1175 = Bool$false;
                                var $1173 = $1175;
                            };
                            var $1171 = $1173;
                        };
                        var $1169 = $1171;
                    };
                    var $1167 = $1169;
                };
                var $1165 = $1167;
            };
            var $1163 = $1165;
        };
        return $1163;
    };
    const Kind$Name$is_letter = x0 => Kind$Name$is_letter$(x0);

    function Kind$Parser$letter$(_idx$1, _code$2) {
        var self = _code$2;
        if (self.length === 0) {
            var $1177 = Parser$Reply$error$(_idx$1, _code$2, "Unexpected eof.");
            var $1176 = $1177;
        } else {
            var $1178 = self.charCodeAt(0);
            var $1179 = self.slice(1);
            var self = Kind$Name$is_letter$($1178);
            if (self) {
                var $1181 = Parser$Reply$value$(Nat$succ$(_idx$1), $1179, $1178);
                var $1180 = $1181;
            } else {
                var $1182 = Parser$Reply$error$(_idx$1, _code$2, "Expected letter.");
                var $1180 = $1182;
            };
            var $1176 = $1180;
        };
        return $1176;
    };
    const Kind$Parser$letter = x0 => x1 => Kind$Parser$letter$(x0, x1);

    function List$fold$(_list$2, _nil$4, _cons$5) {
        var self = _list$2;
        switch (self._) {
            case 'List.cons':
                var $1184 = self.head;
                var $1185 = self.tail;
                var $1186 = _cons$5($1184)(List$fold$($1185, _nil$4, _cons$5));
                var $1183 = $1186;
                break;
            case 'List.nil':
                var $1187 = _nil$4;
                var $1183 = $1187;
                break;
        };
        return $1183;
    };
    const List$fold = x0 => x1 => x2 => List$fold$(x0, x1, x2);

    function Kind$Parser$name1$(_idx$1, _code$2) {
        var self = Kind$Parser$spaces(_idx$1)(_code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $1189 = self.idx;
                var $1190 = self.code;
                var $1191 = self.err;
                var $1192 = Parser$Reply$error$($1189, $1190, $1191);
                var $1188 = $1192;
                break;
            case 'Parser.Reply.value':
                var $1193 = self.idx;
                var $1194 = self.code;
                var self = Parser$many1$(Kind$Parser$letter, $1193, $1194);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $1196 = self.idx;
                        var $1197 = self.code;
                        var $1198 = self.err;
                        var $1199 = Parser$Reply$error$($1196, $1197, $1198);
                        var $1195 = $1199;
                        break;
                    case 'Parser.Reply.value':
                        var $1200 = self.idx;
                        var $1201 = self.code;
                        var $1202 = self.val;
                        var $1203 = Parser$Reply$value$($1200, $1201, List$fold$($1202, String$nil, String$cons));
                        var $1195 = $1203;
                        break;
                };
                var $1188 = $1195;
                break;
        };
        return $1188;
    };
    const Kind$Parser$name1 = x0 => x1 => Kind$Parser$name1$(x0, x1);

    function Kind$Parser$text$(_text$1, _idx$2, _code$3) {
        var self = Kind$Parser$spaces(_idx$2)(_code$3);
        switch (self._) {
            case 'Parser.Reply.error':
                var $1205 = self.idx;
                var $1206 = self.code;
                var $1207 = self.err;
                var $1208 = Parser$Reply$error$($1205, $1206, $1207);
                var $1204 = $1208;
                break;
            case 'Parser.Reply.value':
                var $1209 = self.idx;
                var $1210 = self.code;
                var $1211 = Parser$text$(_text$1, $1209, $1210);
                var $1204 = $1211;
                break;
        };
        return $1204;
    };
    const Kind$Parser$text = x0 => x1 => x2 => Kind$Parser$text$(x0, x1, x2);

    function Parser$until1$(_cond$2, _parser$3, _idx$4, _code$5) {
        var self = _parser$3(_idx$4)(_code$5);
        switch (self._) {
            case 'Parser.Reply.error':
                var $1213 = self.idx;
                var $1214 = self.code;
                var $1215 = self.err;
                var $1216 = Parser$Reply$error$($1213, $1214, $1215);
                var $1212 = $1216;
                break;
            case 'Parser.Reply.value':
                var $1217 = self.idx;
                var $1218 = self.code;
                var $1219 = self.val;
                var self = Parser$until$(_cond$2, _parser$3)($1217)($1218);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $1221 = self.idx;
                        var $1222 = self.code;
                        var $1223 = self.err;
                        var $1224 = Parser$Reply$error$($1221, $1222, $1223);
                        var $1220 = $1224;
                        break;
                    case 'Parser.Reply.value':
                        var $1225 = self.idx;
                        var $1226 = self.code;
                        var $1227 = self.val;
                        var $1228 = Parser$Reply$value$($1225, $1226, List$cons$($1219, $1227));
                        var $1220 = $1228;
                        break;
                };
                var $1212 = $1220;
                break;
        };
        return $1212;
    };
    const Parser$until1 = x0 => x1 => x2 => x3 => Parser$until1$(x0, x1, x2, x3);

    function Parser$maybe$(_parse$2, _idx$3, _code$4) {
        var self = _parse$2(_idx$3)(_code$4);
        switch (self._) {
            case 'Parser.Reply.value':
                var $1230 = self.idx;
                var $1231 = self.code;
                var $1232 = self.val;
                var $1233 = Parser$Reply$value$($1230, $1231, Maybe$some$($1232));
                var $1229 = $1233;
                break;
            case 'Parser.Reply.error':
                var $1234 = Parser$Reply$value$(_idx$3, _code$4, Maybe$none);
                var $1229 = $1234;
                break;
        };
        return $1229;
    };
    const Parser$maybe = x0 => x1 => x2 => Parser$maybe$(x0, x1, x2);

    function Kind$Parser$item$(_parser$2, _idx$3, _code$4) {
        var self = Kind$Parser$spaces(_idx$3)(_code$4);
        switch (self._) {
            case 'Parser.Reply.error':
                var $1236 = self.idx;
                var $1237 = self.code;
                var $1238 = self.err;
                var $1239 = Parser$Reply$error$($1236, $1237, $1238);
                var $1235 = $1239;
                break;
            case 'Parser.Reply.value':
                var $1240 = self.idx;
                var $1241 = self.code;
                var self = _parser$2($1240)($1241);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $1243 = self.idx;
                        var $1244 = self.code;
                        var $1245 = self.err;
                        var $1246 = Parser$Reply$error$($1243, $1244, $1245);
                        var $1242 = $1246;
                        break;
                    case 'Parser.Reply.value':
                        var $1247 = self.idx;
                        var $1248 = self.code;
                        var $1249 = self.val;
                        var self = Parser$maybe$(Kind$Parser$text(","), $1247, $1248);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $1251 = self.idx;
                                var $1252 = self.code;
                                var $1253 = self.err;
                                var $1254 = Parser$Reply$error$($1251, $1252, $1253);
                                var $1250 = $1254;
                                break;
                            case 'Parser.Reply.value':
                                var $1255 = self.idx;
                                var $1256 = self.code;
                                var $1257 = Parser$Reply$value$($1255, $1256, $1249);
                                var $1250 = $1257;
                                break;
                        };
                        var $1242 = $1250;
                        break;
                };
                var $1235 = $1242;
                break;
        };
        return $1235;
    };
    const Kind$Parser$item = x0 => x1 => x2 => Kind$Parser$item$(x0, x1, x2);

    function Kind$Parser$name$(_idx$1, _code$2) {
        var self = Kind$Parser$spaces(_idx$1)(_code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $1259 = self.idx;
                var $1260 = self.code;
                var $1261 = self.err;
                var $1262 = Parser$Reply$error$($1259, $1260, $1261);
                var $1258 = $1262;
                break;
            case 'Parser.Reply.value':
                var $1263 = self.idx;
                var $1264 = self.code;
                var self = Parser$many$(Kind$Parser$letter)($1263)($1264);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $1266 = self.idx;
                        var $1267 = self.code;
                        var $1268 = self.err;
                        var $1269 = Parser$Reply$error$($1266, $1267, $1268);
                        var $1265 = $1269;
                        break;
                    case 'Parser.Reply.value':
                        var $1270 = self.idx;
                        var $1271 = self.code;
                        var $1272 = self.val;
                        var $1273 = Parser$Reply$value$($1270, $1271, List$fold$($1272, String$nil, String$cons));
                        var $1265 = $1273;
                        break;
                };
                var $1258 = $1265;
                break;
        };
        return $1258;
    };
    const Kind$Parser$name = x0 => x1 => Kind$Parser$name$(x0, x1);

    function Kind$Parser$stop$(_from$1, _idx$2, _code$3) {
        var self = Parser$get_index$(_idx$2, _code$3);
        switch (self._) {
            case 'Parser.Reply.error':
                var $1275 = self.idx;
                var $1276 = self.code;
                var $1277 = self.err;
                var $1278 = Parser$Reply$error$($1275, $1276, $1277);
                var $1274 = $1278;
                break;
            case 'Parser.Reply.value':
                var $1279 = self.idx;
                var $1280 = self.code;
                var $1281 = self.val;
                var _orig$7 = Pair$new$(_from$1, $1281);
                var $1282 = Parser$Reply$value$($1279, $1280, _orig$7);
                var $1274 = $1282;
                break;
        };
        return $1274;
    };
    const Kind$Parser$stop = x0 => x1 => x2 => Kind$Parser$stop$(x0, x1, x2);

    function Kind$Term$ori$(_orig$1, _expr$2) {
        var $1283 = ({
            _: 'Kind.Term.ori',
            'orig': _orig$1,
            'expr': _expr$2
        });
        return $1283;
    };
    const Kind$Term$ori = x0 => x1 => Kind$Term$ori$(x0, x1);

    function Kind$Parser$forall$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $1285 = self.idx;
                var $1286 = self.code;
                var $1287 = self.err;
                var $1288 = Parser$Reply$error$($1285, $1286, $1287);
                var $1284 = $1288;
                break;
            case 'Parser.Reply.value':
                var $1289 = self.idx;
                var $1290 = self.code;
                var $1291 = self.val;
                var self = Kind$Parser$name$($1289, $1290);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $1293 = self.idx;
                        var $1294 = self.code;
                        var $1295 = self.err;
                        var $1296 = Parser$Reply$error$($1293, $1294, $1295);
                        var $1292 = $1296;
                        break;
                    case 'Parser.Reply.value':
                        var $1297 = self.idx;
                        var $1298 = self.code;
                        var $1299 = self.val;
                        var self = Kind$Parser$binder$(":", $1297, $1298);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $1301 = self.idx;
                                var $1302 = self.code;
                                var $1303 = self.err;
                                var $1304 = Parser$Reply$error$($1301, $1302, $1303);
                                var $1300 = $1304;
                                break;
                            case 'Parser.Reply.value':
                                var $1305 = self.idx;
                                var $1306 = self.code;
                                var $1307 = self.val;
                                var self = Parser$maybe$(Kind$Parser$text("->"), $1305, $1306);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $1309 = self.idx;
                                        var $1310 = self.code;
                                        var $1311 = self.err;
                                        var $1312 = Parser$Reply$error$($1309, $1310, $1311);
                                        var $1308 = $1312;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $1313 = self.idx;
                                        var $1314 = self.code;
                                        var self = Kind$Parser$term$($1313, $1314);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $1316 = self.idx;
                                                var $1317 = self.code;
                                                var $1318 = self.err;
                                                var $1319 = Parser$Reply$error$($1316, $1317, $1318);
                                                var $1315 = $1319;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $1320 = self.idx;
                                                var $1321 = self.code;
                                                var $1322 = self.val;
                                                var _term$18 = List$fold$($1307, $1322, (_x$18 => _t$19 => {
                                                    var self = _x$18;
                                                    switch (self._) {
                                                        case 'Kind.Binder.new':
                                                            var $1325 = self.eras;
                                                            var $1326 = self.name;
                                                            var $1327 = self.term;
                                                            var $1328 = Kind$Term$all$($1325, "", $1326, $1327, (_s$23 => _x$24 => {
                                                                var $1329 = _t$19;
                                                                return $1329;
                                                            }));
                                                            var $1324 = $1328;
                                                            break;
                                                    };
                                                    return $1324;
                                                }));
                                                var self = Kind$Parser$stop$($1291, $1320, $1321);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $1330 = self.idx;
                                                        var $1331 = self.code;
                                                        var $1332 = self.err;
                                                        var $1333 = Parser$Reply$error$($1330, $1331, $1332);
                                                        var $1323 = $1333;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $1334 = self.idx;
                                                        var $1335 = self.code;
                                                        var $1336 = self.val;
                                                        var $1337 = Parser$Reply$value$($1334, $1335, (() => {
                                                            var self = _term$18;
                                                            switch (self._) {
                                                                case 'Kind.Term.all':
                                                                    var $1338 = self.eras;
                                                                    var $1339 = self.name;
                                                                    var $1340 = self.xtyp;
                                                                    var $1341 = self.body;
                                                                    var $1342 = Kind$Term$ori$($1336, Kind$Term$all$($1338, $1299, $1339, $1340, $1341));
                                                                    return $1342;
                                                                case 'Kind.Term.var':
                                                                case 'Kind.Term.ref':
                                                                case 'Kind.Term.typ':
                                                                case 'Kind.Term.lam':
                                                                case 'Kind.Term.app':
                                                                case 'Kind.Term.let':
                                                                case 'Kind.Term.def':
                                                                case 'Kind.Term.ann':
                                                                case 'Kind.Term.gol':
                                                                case 'Kind.Term.hol':
                                                                case 'Kind.Term.nat':
                                                                case 'Kind.Term.chr':
                                                                case 'Kind.Term.str':
                                                                case 'Kind.Term.cse':
                                                                case 'Kind.Term.ori':
                                                                    var $1343 = _term$18;
                                                                    return $1343;
                                                            };
                                                        })());
                                                        var $1323 = $1337;
                                                        break;
                                                };
                                                var $1315 = $1323;
                                                break;
                                        };
                                        var $1308 = $1315;
                                        break;
                                };
                                var $1300 = $1308;
                                break;
                        };
                        var $1292 = $1300;
                        break;
                };
                var $1284 = $1292;
                break;
        };
        return $1284;
    };
    const Kind$Parser$forall = x0 => x1 => Kind$Parser$forall$(x0, x1);

    function Kind$Parser$make_lambda$(_names$1, _body$2) {
        var self = _names$1;
        switch (self._) {
            case 'List.cons':
                var $1345 = self.head;
                var $1346 = self.tail;
                var $1347 = Kind$Term$lam$($1345, (_x$5 => {
                    var $1348 = Kind$Parser$make_lambda$($1346, _body$2);
                    return $1348;
                }));
                var $1344 = $1347;
                break;
            case 'List.nil':
                var $1349 = _body$2;
                var $1344 = $1349;
                break;
        };
        return $1344;
    };
    const Kind$Parser$make_lambda = x0 => x1 => Kind$Parser$make_lambda$(x0, x1);

    function Kind$Parser$lambda$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $1351 = self.idx;
                var $1352 = self.code;
                var $1353 = self.err;
                var $1354 = Parser$Reply$error$($1351, $1352, $1353);
                var $1350 = $1354;
                break;
            case 'Parser.Reply.value':
                var $1355 = self.idx;
                var $1356 = self.code;
                var $1357 = self.val;
                var self = Kind$Parser$text$("(", $1355, $1356);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $1359 = self.idx;
                        var $1360 = self.code;
                        var $1361 = self.err;
                        var $1362 = Parser$Reply$error$($1359, $1360, $1361);
                        var $1358 = $1362;
                        break;
                    case 'Parser.Reply.value':
                        var $1363 = self.idx;
                        var $1364 = self.code;
                        var self = Parser$until1$(Kind$Parser$text(")"), Kind$Parser$item(Kind$Parser$name1), $1363, $1364);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $1366 = self.idx;
                                var $1367 = self.code;
                                var $1368 = self.err;
                                var $1369 = Parser$Reply$error$($1366, $1367, $1368);
                                var $1365 = $1369;
                                break;
                            case 'Parser.Reply.value':
                                var $1370 = self.idx;
                                var $1371 = self.code;
                                var $1372 = self.val;
                                var self = Kind$Parser$term$($1370, $1371);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $1374 = self.idx;
                                        var $1375 = self.code;
                                        var $1376 = self.err;
                                        var $1377 = Parser$Reply$error$($1374, $1375, $1376);
                                        var $1373 = $1377;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $1378 = self.idx;
                                        var $1379 = self.code;
                                        var $1380 = self.val;
                                        var self = Kind$Parser$stop$($1357, $1378, $1379);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $1382 = self.idx;
                                                var $1383 = self.code;
                                                var $1384 = self.err;
                                                var $1385 = Parser$Reply$error$($1382, $1383, $1384);
                                                var $1381 = $1385;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $1386 = self.idx;
                                                var $1387 = self.code;
                                                var $1388 = self.val;
                                                var _expr$18 = Kind$Parser$make_lambda$($1372, $1380);
                                                var $1389 = Parser$Reply$value$($1386, $1387, Kind$Term$ori$($1388, _expr$18));
                                                var $1381 = $1389;
                                                break;
                                        };
                                        var $1373 = $1381;
                                        break;
                                };
                                var $1365 = $1373;
                                break;
                        };
                        var $1358 = $1365;
                        break;
                };
                var $1350 = $1358;
                break;
        };
        return $1350;
    };
    const Kind$Parser$lambda = x0 => x1 => Kind$Parser$lambda$(x0, x1);

    function Kind$Parser$lambda$erased$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $1391 = self.idx;
                var $1392 = self.code;
                var $1393 = self.err;
                var $1394 = Parser$Reply$error$($1391, $1392, $1393);
                var $1390 = $1394;
                break;
            case 'Parser.Reply.value':
                var $1395 = self.idx;
                var $1396 = self.code;
                var $1397 = self.val;
                var self = Kind$Parser$text$("<", $1395, $1396);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $1399 = self.idx;
                        var $1400 = self.code;
                        var $1401 = self.err;
                        var $1402 = Parser$Reply$error$($1399, $1400, $1401);
                        var $1398 = $1402;
                        break;
                    case 'Parser.Reply.value':
                        var $1403 = self.idx;
                        var $1404 = self.code;
                        var self = Parser$until1$(Kind$Parser$text(">"), Kind$Parser$item(Kind$Parser$name1), $1403, $1404);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $1406 = self.idx;
                                var $1407 = self.code;
                                var $1408 = self.err;
                                var $1409 = Parser$Reply$error$($1406, $1407, $1408);
                                var $1405 = $1409;
                                break;
                            case 'Parser.Reply.value':
                                var $1410 = self.idx;
                                var $1411 = self.code;
                                var $1412 = self.val;
                                var self = Kind$Parser$term$($1410, $1411);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $1414 = self.idx;
                                        var $1415 = self.code;
                                        var $1416 = self.err;
                                        var $1417 = Parser$Reply$error$($1414, $1415, $1416);
                                        var $1413 = $1417;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $1418 = self.idx;
                                        var $1419 = self.code;
                                        var $1420 = self.val;
                                        var self = Kind$Parser$stop$($1397, $1418, $1419);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $1422 = self.idx;
                                                var $1423 = self.code;
                                                var $1424 = self.err;
                                                var $1425 = Parser$Reply$error$($1422, $1423, $1424);
                                                var $1421 = $1425;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $1426 = self.idx;
                                                var $1427 = self.code;
                                                var $1428 = self.val;
                                                var _expr$18 = Kind$Parser$make_lambda$($1412, $1420);
                                                var $1429 = Parser$Reply$value$($1426, $1427, Kind$Term$ori$($1428, _expr$18));
                                                var $1421 = $1429;
                                                break;
                                        };
                                        var $1413 = $1421;
                                        break;
                                };
                                var $1405 = $1413;
                                break;
                        };
                        var $1398 = $1405;
                        break;
                };
                var $1390 = $1398;
                break;
        };
        return $1390;
    };
    const Kind$Parser$lambda$erased = x0 => x1 => Kind$Parser$lambda$erased$(x0, x1);

    function Kind$Parser$lambda$nameless$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $1431 = self.idx;
                var $1432 = self.code;
                var $1433 = self.err;
                var $1434 = Parser$Reply$error$($1431, $1432, $1433);
                var $1430 = $1434;
                break;
            case 'Parser.Reply.value':
                var $1435 = self.idx;
                var $1436 = self.code;
                var $1437 = self.val;
                var self = Kind$Parser$text$("()", $1435, $1436);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $1439 = self.idx;
                        var $1440 = self.code;
                        var $1441 = self.err;
                        var $1442 = Parser$Reply$error$($1439, $1440, $1441);
                        var $1438 = $1442;
                        break;
                    case 'Parser.Reply.value':
                        var $1443 = self.idx;
                        var $1444 = self.code;
                        var self = Kind$Parser$term$($1443, $1444);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $1446 = self.idx;
                                var $1447 = self.code;
                                var $1448 = self.err;
                                var $1449 = Parser$Reply$error$($1446, $1447, $1448);
                                var $1445 = $1449;
                                break;
                            case 'Parser.Reply.value':
                                var $1450 = self.idx;
                                var $1451 = self.code;
                                var $1452 = self.val;
                                var self = Kind$Parser$stop$($1437, $1450, $1451);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $1454 = self.idx;
                                        var $1455 = self.code;
                                        var $1456 = self.err;
                                        var $1457 = Parser$Reply$error$($1454, $1455, $1456);
                                        var $1453 = $1457;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $1458 = self.idx;
                                        var $1459 = self.code;
                                        var $1460 = self.val;
                                        var _expr$15 = Kind$Term$lam$("", (_x$15 => {
                                            var $1462 = $1452;
                                            return $1462;
                                        }));
                                        var $1461 = Parser$Reply$value$($1458, $1459, Kind$Term$ori$($1460, _expr$15));
                                        var $1453 = $1461;
                                        break;
                                };
                                var $1445 = $1453;
                                break;
                        };
                        var $1438 = $1445;
                        break;
                };
                var $1430 = $1438;
                break;
        };
        return $1430;
    };
    const Kind$Parser$lambda$nameless = x0 => x1 => Kind$Parser$lambda$nameless$(x0, x1);

    function Kind$Parser$parenthesis$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $1464 = self.idx;
                var $1465 = self.code;
                var $1466 = self.err;
                var $1467 = Parser$Reply$error$($1464, $1465, $1466);
                var $1463 = $1467;
                break;
            case 'Parser.Reply.value':
                var $1468 = self.idx;
                var $1469 = self.code;
                var $1470 = self.val;
                var self = Kind$Parser$text$("(", $1468, $1469);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $1472 = self.idx;
                        var $1473 = self.code;
                        var $1474 = self.err;
                        var $1475 = Parser$Reply$error$($1472, $1473, $1474);
                        var $1471 = $1475;
                        break;
                    case 'Parser.Reply.value':
                        var $1476 = self.idx;
                        var $1477 = self.code;
                        var self = Kind$Parser$term$($1476, $1477);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $1479 = self.idx;
                                var $1480 = self.code;
                                var $1481 = self.err;
                                var $1482 = Parser$Reply$error$($1479, $1480, $1481);
                                var $1478 = $1482;
                                break;
                            case 'Parser.Reply.value':
                                var $1483 = self.idx;
                                var $1484 = self.code;
                                var $1485 = self.val;
                                var self = Kind$Parser$text$(")", $1483, $1484);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $1487 = self.idx;
                                        var $1488 = self.code;
                                        var $1489 = self.err;
                                        var $1490 = Parser$Reply$error$($1487, $1488, $1489);
                                        var $1486 = $1490;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $1491 = self.idx;
                                        var $1492 = self.code;
                                        var self = Kind$Parser$stop$($1470, $1491, $1492);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $1494 = self.idx;
                                                var $1495 = self.code;
                                                var $1496 = self.err;
                                                var $1497 = Parser$Reply$error$($1494, $1495, $1496);
                                                var $1493 = $1497;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $1498 = self.idx;
                                                var $1499 = self.code;
                                                var $1500 = self.val;
                                                var $1501 = Parser$Reply$value$($1498, $1499, Kind$Term$ori$($1500, $1485));
                                                var $1493 = $1501;
                                                break;
                                        };
                                        var $1486 = $1493;
                                        break;
                                };
                                var $1478 = $1486;
                                break;
                        };
                        var $1471 = $1478;
                        break;
                };
                var $1463 = $1471;
                break;
        };
        return $1463;
    };
    const Kind$Parser$parenthesis = x0 => x1 => Kind$Parser$parenthesis$(x0, x1);

    function Kind$Term$hol$(_path$1) {
        var $1502 = ({
            _: 'Kind.Term.hol',
            'path': _path$1
        });
        return $1502;
    };
    const Kind$Term$hol = x0 => Kind$Term$hol$(x0);

    function Kind$Parser$letforrange$u32$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $1504 = self.idx;
                var $1505 = self.code;
                var $1506 = self.err;
                var $1507 = Parser$Reply$error$($1504, $1505, $1506);
                var $1503 = $1507;
                break;
            case 'Parser.Reply.value':
                var $1508 = self.idx;
                var $1509 = self.code;
                var $1510 = self.val;
                var self = Kind$Parser$text$("let ", $1508, $1509);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $1512 = self.idx;
                        var $1513 = self.code;
                        var $1514 = self.err;
                        var $1515 = Parser$Reply$error$($1512, $1513, $1514);
                        var $1511 = $1515;
                        break;
                    case 'Parser.Reply.value':
                        var $1516 = self.idx;
                        var $1517 = self.code;
                        var self = Kind$Parser$name1$($1516, $1517);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $1519 = self.idx;
                                var $1520 = self.code;
                                var $1521 = self.err;
                                var $1522 = Parser$Reply$error$($1519, $1520, $1521);
                                var $1518 = $1522;
                                break;
                            case 'Parser.Reply.value':
                                var $1523 = self.idx;
                                var $1524 = self.code;
                                var $1525 = self.val;
                                var self = Kind$Parser$text$("=", $1523, $1524);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $1527 = self.idx;
                                        var $1528 = self.code;
                                        var $1529 = self.err;
                                        var $1530 = Parser$Reply$error$($1527, $1528, $1529);
                                        var $1526 = $1530;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $1531 = self.idx;
                                        var $1532 = self.code;
                                        var self = Kind$Parser$text$("for ", $1531, $1532);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $1534 = self.idx;
                                                var $1535 = self.code;
                                                var $1536 = self.err;
                                                var $1537 = Parser$Reply$error$($1534, $1535, $1536);
                                                var $1533 = $1537;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $1538 = self.idx;
                                                var $1539 = self.code;
                                                var self = Kind$Parser$name1$($1538, $1539);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $1541 = self.idx;
                                                        var $1542 = self.code;
                                                        var $1543 = self.err;
                                                        var $1544 = Parser$Reply$error$($1541, $1542, $1543);
                                                        var $1540 = $1544;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $1545 = self.idx;
                                                        var $1546 = self.code;
                                                        var $1547 = self.val;
                                                        var self = Kind$Parser$text$(":", $1545, $1546);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $1549 = self.idx;
                                                                var $1550 = self.code;
                                                                var $1551 = self.err;
                                                                var $1552 = Parser$Reply$error$($1549, $1550, $1551);
                                                                var $1548 = $1552;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $1553 = self.idx;
                                                                var $1554 = self.code;
                                                                var self = Kind$Parser$text$("U32", $1553, $1554);
                                                                switch (self._) {
                                                                    case 'Parser.Reply.error':
                                                                        var $1556 = self.idx;
                                                                        var $1557 = self.code;
                                                                        var $1558 = self.err;
                                                                        var $1559 = Parser$Reply$error$($1556, $1557, $1558);
                                                                        var $1555 = $1559;
                                                                        break;
                                                                    case 'Parser.Reply.value':
                                                                        var $1560 = self.idx;
                                                                        var $1561 = self.code;
                                                                        var self = Kind$Parser$text$("from", $1560, $1561);
                                                                        switch (self._) {
                                                                            case 'Parser.Reply.error':
                                                                                var $1563 = self.idx;
                                                                                var $1564 = self.code;
                                                                                var $1565 = self.err;
                                                                                var $1566 = Parser$Reply$error$($1563, $1564, $1565);
                                                                                var $1562 = $1566;
                                                                                break;
                                                                            case 'Parser.Reply.value':
                                                                                var $1567 = self.idx;
                                                                                var $1568 = self.code;
                                                                                var self = Kind$Parser$term$($1567, $1568);
                                                                                switch (self._) {
                                                                                    case 'Parser.Reply.error':
                                                                                        var $1570 = self.idx;
                                                                                        var $1571 = self.code;
                                                                                        var $1572 = self.err;
                                                                                        var $1573 = Parser$Reply$error$($1570, $1571, $1572);
                                                                                        var $1569 = $1573;
                                                                                        break;
                                                                                    case 'Parser.Reply.value':
                                                                                        var $1574 = self.idx;
                                                                                        var $1575 = self.code;
                                                                                        var $1576 = self.val;
                                                                                        var self = Kind$Parser$text$("to", $1574, $1575);
                                                                                        switch (self._) {
                                                                                            case 'Parser.Reply.error':
                                                                                                var $1578 = self.idx;
                                                                                                var $1579 = self.code;
                                                                                                var $1580 = self.err;
                                                                                                var $1581 = Parser$Reply$error$($1578, $1579, $1580);
                                                                                                var $1577 = $1581;
                                                                                                break;
                                                                                            case 'Parser.Reply.value':
                                                                                                var $1582 = self.idx;
                                                                                                var $1583 = self.code;
                                                                                                var self = Kind$Parser$term$($1582, $1583);
                                                                                                switch (self._) {
                                                                                                    case 'Parser.Reply.error':
                                                                                                        var $1585 = self.idx;
                                                                                                        var $1586 = self.code;
                                                                                                        var $1587 = self.err;
                                                                                                        var $1588 = Parser$Reply$error$($1585, $1586, $1587);
                                                                                                        var $1584 = $1588;
                                                                                                        break;
                                                                                                    case 'Parser.Reply.value':
                                                                                                        var $1589 = self.idx;
                                                                                                        var $1590 = self.code;
                                                                                                        var $1591 = self.val;
                                                                                                        var self = Kind$Parser$text$(":", $1589, $1590);
                                                                                                        switch (self._) {
                                                                                                            case 'Parser.Reply.error':
                                                                                                                var $1593 = self.idx;
                                                                                                                var $1594 = self.code;
                                                                                                                var $1595 = self.err;
                                                                                                                var $1596 = Parser$Reply$error$($1593, $1594, $1595);
                                                                                                                var $1592 = $1596;
                                                                                                                break;
                                                                                                            case 'Parser.Reply.value':
                                                                                                                var $1597 = self.idx;
                                                                                                                var $1598 = self.code;
                                                                                                                var self = Kind$Parser$term$($1597, $1598);
                                                                                                                switch (self._) {
                                                                                                                    case 'Parser.Reply.error':
                                                                                                                        var $1600 = self.idx;
                                                                                                                        var $1601 = self.code;
                                                                                                                        var $1602 = self.err;
                                                                                                                        var $1603 = Parser$Reply$error$($1600, $1601, $1602);
                                                                                                                        var $1599 = $1603;
                                                                                                                        break;
                                                                                                                    case 'Parser.Reply.value':
                                                                                                                        var $1604 = self.idx;
                                                                                                                        var $1605 = self.code;
                                                                                                                        var $1606 = self.val;
                                                                                                                        var self = Parser$maybe$(Kind$Parser$text(";"), $1604, $1605);
                                                                                                                        switch (self._) {
                                                                                                                            case 'Parser.Reply.error':
                                                                                                                                var $1608 = self.idx;
                                                                                                                                var $1609 = self.code;
                                                                                                                                var $1610 = self.err;
                                                                                                                                var $1611 = Parser$Reply$error$($1608, $1609, $1610);
                                                                                                                                var $1607 = $1611;
                                                                                                                                break;
                                                                                                                            case 'Parser.Reply.value':
                                                                                                                                var $1612 = self.idx;
                                                                                                                                var $1613 = self.code;
                                                                                                                                var self = Kind$Parser$term$($1612, $1613);
                                                                                                                                switch (self._) {
                                                                                                                                    case 'Parser.Reply.error':
                                                                                                                                        var $1615 = self.idx;
                                                                                                                                        var $1616 = self.code;
                                                                                                                                        var $1617 = self.err;
                                                                                                                                        var $1618 = Parser$Reply$error$($1615, $1616, $1617);
                                                                                                                                        var $1614 = $1618;
                                                                                                                                        break;
                                                                                                                                    case 'Parser.Reply.value':
                                                                                                                                        var $1619 = self.idx;
                                                                                                                                        var $1620 = self.code;
                                                                                                                                        var $1621 = self.val;
                                                                                                                                        var self = Kind$Parser$stop$($1510, $1619, $1620);
                                                                                                                                        switch (self._) {
                                                                                                                                            case 'Parser.Reply.error':
                                                                                                                                                var $1623 = self.idx;
                                                                                                                                                var $1624 = self.code;
                                                                                                                                                var $1625 = self.err;
                                                                                                                                                var $1626 = Parser$Reply$error$($1623, $1624, $1625);
                                                                                                                                                var $1622 = $1626;
                                                                                                                                                break;
                                                                                                                                            case 'Parser.Reply.value':
                                                                                                                                                var $1627 = self.idx;
                                                                                                                                                var $1628 = self.code;
                                                                                                                                                var $1629 = self.val;
                                                                                                                                                var _term$54 = Kind$Term$ref$("U32.for");
                                                                                                                                                var _term$55 = Kind$Term$app$(_term$54, Kind$Term$hol$(Bits$e));
                                                                                                                                                var _term$56 = Kind$Term$app$(_term$55, Kind$Term$ref$($1525));
                                                                                                                                                var _term$57 = Kind$Term$app$(_term$56, $1576);
                                                                                                                                                var _term$58 = Kind$Term$app$(_term$57, $1591);
                                                                                                                                                var _lamb$59 = Kind$Term$lam$($1547, (_e$59 => {
                                                                                                                                                    var $1631 = Kind$Term$lam$($1525, (_s$60 => {
                                                                                                                                                        var $1632 = $1606;
                                                                                                                                                        return $1632;
                                                                                                                                                    }));
                                                                                                                                                    return $1631;
                                                                                                                                                }));
                                                                                                                                                var _term$60 = Kind$Term$app$(_term$58, _lamb$59);
                                                                                                                                                var _term$61 = Kind$Term$let$($1525, _term$60, (_x$61 => {
                                                                                                                                                    var $1633 = $1621;
                                                                                                                                                    return $1633;
                                                                                                                                                }));
                                                                                                                                                var $1630 = Parser$Reply$value$($1627, $1628, Kind$Term$ori$($1629, _term$61));
                                                                                                                                                var $1622 = $1630;
                                                                                                                                                break;
                                                                                                                                        };
                                                                                                                                        var $1614 = $1622;
                                                                                                                                        break;
                                                                                                                                };
                                                                                                                                var $1607 = $1614;
                                                                                                                                break;
                                                                                                                        };
                                                                                                                        var $1599 = $1607;
                                                                                                                        break;
                                                                                                                };
                                                                                                                var $1592 = $1599;
                                                                                                                break;
                                                                                                        };
                                                                                                        var $1584 = $1592;
                                                                                                        break;
                                                                                                };
                                                                                                var $1577 = $1584;
                                                                                                break;
                                                                                        };
                                                                                        var $1569 = $1577;
                                                                                        break;
                                                                                };
                                                                                var $1562 = $1569;
                                                                                break;
                                                                        };
                                                                        var $1555 = $1562;
                                                                        break;
                                                                };
                                                                var $1548 = $1555;
                                                                break;
                                                        };
                                                        var $1540 = $1548;
                                                        break;
                                                };
                                                var $1533 = $1540;
                                                break;
                                        };
                                        var $1526 = $1533;
                                        break;
                                };
                                var $1518 = $1526;
                                break;
                        };
                        var $1511 = $1518;
                        break;
                };
                var $1503 = $1511;
                break;
        };
        return $1503;
    };
    const Kind$Parser$letforrange$u32 = x0 => x1 => Kind$Parser$letforrange$u32$(x0, x1);

    function Kind$Parser$letforrange$u32$with$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $1635 = self.idx;
                var $1636 = self.code;
                var $1637 = self.err;
                var $1638 = Parser$Reply$error$($1635, $1636, $1637);
                var $1634 = $1638;
                break;
            case 'Parser.Reply.value':
                var $1639 = self.idx;
                var $1640 = self.code;
                var $1641 = self.val;
                var self = Kind$Parser$text$("for ", $1639, $1640);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $1643 = self.idx;
                        var $1644 = self.code;
                        var $1645 = self.err;
                        var $1646 = Parser$Reply$error$($1643, $1644, $1645);
                        var $1642 = $1646;
                        break;
                    case 'Parser.Reply.value':
                        var $1647 = self.idx;
                        var $1648 = self.code;
                        var self = Kind$Parser$name1$($1647, $1648);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $1650 = self.idx;
                                var $1651 = self.code;
                                var $1652 = self.err;
                                var $1653 = Parser$Reply$error$($1650, $1651, $1652);
                                var $1649 = $1653;
                                break;
                            case 'Parser.Reply.value':
                                var $1654 = self.idx;
                                var $1655 = self.code;
                                var $1656 = self.val;
                                var self = Kind$Parser$text$(":", $1654, $1655);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $1658 = self.idx;
                                        var $1659 = self.code;
                                        var $1660 = self.err;
                                        var $1661 = Parser$Reply$error$($1658, $1659, $1660);
                                        var $1657 = $1661;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $1662 = self.idx;
                                        var $1663 = self.code;
                                        var self = Kind$Parser$text$("U32", $1662, $1663);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $1665 = self.idx;
                                                var $1666 = self.code;
                                                var $1667 = self.err;
                                                var $1668 = Parser$Reply$error$($1665, $1666, $1667);
                                                var $1664 = $1668;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $1669 = self.idx;
                                                var $1670 = self.code;
                                                var self = Kind$Parser$text$("from", $1669, $1670);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $1672 = self.idx;
                                                        var $1673 = self.code;
                                                        var $1674 = self.err;
                                                        var $1675 = Parser$Reply$error$($1672, $1673, $1674);
                                                        var $1671 = $1675;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $1676 = self.idx;
                                                        var $1677 = self.code;
                                                        var self = Kind$Parser$term$($1676, $1677);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $1679 = self.idx;
                                                                var $1680 = self.code;
                                                                var $1681 = self.err;
                                                                var $1682 = Parser$Reply$error$($1679, $1680, $1681);
                                                                var $1678 = $1682;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $1683 = self.idx;
                                                                var $1684 = self.code;
                                                                var $1685 = self.val;
                                                                var self = Kind$Parser$text$("to", $1683, $1684);
                                                                switch (self._) {
                                                                    case 'Parser.Reply.error':
                                                                        var $1687 = self.idx;
                                                                        var $1688 = self.code;
                                                                        var $1689 = self.err;
                                                                        var $1690 = Parser$Reply$error$($1687, $1688, $1689);
                                                                        var $1686 = $1690;
                                                                        break;
                                                                    case 'Parser.Reply.value':
                                                                        var $1691 = self.idx;
                                                                        var $1692 = self.code;
                                                                        var self = Kind$Parser$term$($1691, $1692);
                                                                        switch (self._) {
                                                                            case 'Parser.Reply.error':
                                                                                var $1694 = self.idx;
                                                                                var $1695 = self.code;
                                                                                var $1696 = self.err;
                                                                                var $1697 = Parser$Reply$error$($1694, $1695, $1696);
                                                                                var $1693 = $1697;
                                                                                break;
                                                                            case 'Parser.Reply.value':
                                                                                var $1698 = self.idx;
                                                                                var $1699 = self.code;
                                                                                var $1700 = self.val;
                                                                                var self = Kind$Parser$text$("with ", $1698, $1699);
                                                                                switch (self._) {
                                                                                    case 'Parser.Reply.error':
                                                                                        var $1702 = self.idx;
                                                                                        var $1703 = self.code;
                                                                                        var $1704 = self.err;
                                                                                        var $1705 = Parser$Reply$error$($1702, $1703, $1704);
                                                                                        var $1701 = $1705;
                                                                                        break;
                                                                                    case 'Parser.Reply.value':
                                                                                        var $1706 = self.idx;
                                                                                        var $1707 = self.code;
                                                                                        var self = Kind$Parser$name1$($1706, $1707);
                                                                                        switch (self._) {
                                                                                            case 'Parser.Reply.error':
                                                                                                var $1709 = self.idx;
                                                                                                var $1710 = self.code;
                                                                                                var $1711 = self.err;
                                                                                                var $1712 = Parser$Reply$error$($1709, $1710, $1711);
                                                                                                var $1708 = $1712;
                                                                                                break;
                                                                                            case 'Parser.Reply.value':
                                                                                                var $1713 = self.idx;
                                                                                                var $1714 = self.code;
                                                                                                var $1715 = self.val;
                                                                                                var self = Kind$Parser$text$(":", $1713, $1714);
                                                                                                switch (self._) {
                                                                                                    case 'Parser.Reply.error':
                                                                                                        var $1717 = self.idx;
                                                                                                        var $1718 = self.code;
                                                                                                        var $1719 = self.err;
                                                                                                        var $1720 = Parser$Reply$error$($1717, $1718, $1719);
                                                                                                        var $1716 = $1720;
                                                                                                        break;
                                                                                                    case 'Parser.Reply.value':
                                                                                                        var $1721 = self.idx;
                                                                                                        var $1722 = self.code;
                                                                                                        var self = Kind$Parser$term$($1721, $1722);
                                                                                                        switch (self._) {
                                                                                                            case 'Parser.Reply.error':
                                                                                                                var $1724 = self.idx;
                                                                                                                var $1725 = self.code;
                                                                                                                var $1726 = self.err;
                                                                                                                var $1727 = Parser$Reply$error$($1724, $1725, $1726);
                                                                                                                var $1723 = $1727;
                                                                                                                break;
                                                                                                            case 'Parser.Reply.value':
                                                                                                                var $1728 = self.idx;
                                                                                                                var $1729 = self.code;
                                                                                                                var $1730 = self.val;
                                                                                                                var self = Parser$maybe$(Kind$Parser$text(";"), $1728, $1729);
                                                                                                                switch (self._) {
                                                                                                                    case 'Parser.Reply.error':
                                                                                                                        var $1732 = self.idx;
                                                                                                                        var $1733 = self.code;
                                                                                                                        var $1734 = self.err;
                                                                                                                        var $1735 = Parser$Reply$error$($1732, $1733, $1734);
                                                                                                                        var $1731 = $1735;
                                                                                                                        break;
                                                                                                                    case 'Parser.Reply.value':
                                                                                                                        var $1736 = self.idx;
                                                                                                                        var $1737 = self.code;
                                                                                                                        var self = Kind$Parser$term$($1736, $1737);
                                                                                                                        switch (self._) {
                                                                                                                            case 'Parser.Reply.error':
                                                                                                                                var $1739 = self.idx;
                                                                                                                                var $1740 = self.code;
                                                                                                                                var $1741 = self.err;
                                                                                                                                var $1742 = Parser$Reply$error$($1739, $1740, $1741);
                                                                                                                                var $1738 = $1742;
                                                                                                                                break;
                                                                                                                            case 'Parser.Reply.value':
                                                                                                                                var $1743 = self.idx;
                                                                                                                                var $1744 = self.code;
                                                                                                                                var $1745 = self.val;
                                                                                                                                var self = Kind$Parser$stop$($1641, $1743, $1744);
                                                                                                                                switch (self._) {
                                                                                                                                    case 'Parser.Reply.error':
                                                                                                                                        var $1747 = self.idx;
                                                                                                                                        var $1748 = self.code;
                                                                                                                                        var $1749 = self.err;
                                                                                                                                        var $1750 = Parser$Reply$error$($1747, $1748, $1749);
                                                                                                                                        var $1746 = $1750;
                                                                                                                                        break;
                                                                                                                                    case 'Parser.Reply.value':
                                                                                                                                        var $1751 = self.idx;
                                                                                                                                        var $1752 = self.code;
                                                                                                                                        var $1753 = self.val;
                                                                                                                                        var _term$51 = Kind$Term$ref$("U32.for");
                                                                                                                                        var _term$52 = Kind$Term$app$(_term$51, Kind$Term$hol$(Bits$e));
                                                                                                                                        var _term$53 = Kind$Term$app$(_term$52, Kind$Term$ref$($1715));
                                                                                                                                        var _term$54 = Kind$Term$app$(_term$53, $1685);
                                                                                                                                        var _term$55 = Kind$Term$app$(_term$54, $1700);
                                                                                                                                        var _lamb$56 = Kind$Term$lam$($1656, (_e$56 => {
                                                                                                                                            var $1755 = Kind$Term$lam$($1715, (_s$57 => {
                                                                                                                                                var $1756 = $1730;
                                                                                                                                                return $1756;
                                                                                                                                            }));
                                                                                                                                            return $1755;
                                                                                                                                        }));
                                                                                                                                        var _term$57 = Kind$Term$app$(_term$55, _lamb$56);
                                                                                                                                        var _term$58 = Kind$Term$let$($1715, _term$57, (_x$58 => {
                                                                                                                                            var $1757 = $1745;
                                                                                                                                            return $1757;
                                                                                                                                        }));
                                                                                                                                        var $1754 = Parser$Reply$value$($1751, $1752, Kind$Term$ori$($1753, _term$58));
                                                                                                                                        var $1746 = $1754;
                                                                                                                                        break;
                                                                                                                                };
                                                                                                                                var $1738 = $1746;
                                                                                                                                break;
                                                                                                                        };
                                                                                                                        var $1731 = $1738;
                                                                                                                        break;
                                                                                                                };
                                                                                                                var $1723 = $1731;
                                                                                                                break;
                                                                                                        };
                                                                                                        var $1716 = $1723;
                                                                                                        break;
                                                                                                };
                                                                                                var $1708 = $1716;
                                                                                                break;
                                                                                        };
                                                                                        var $1701 = $1708;
                                                                                        break;
                                                                                };
                                                                                var $1693 = $1701;
                                                                                break;
                                                                        };
                                                                        var $1686 = $1693;
                                                                        break;
                                                                };
                                                                var $1678 = $1686;
                                                                break;
                                                        };
                                                        var $1671 = $1678;
                                                        break;
                                                };
                                                var $1664 = $1671;
                                                break;
                                        };
                                        var $1657 = $1664;
                                        break;
                                };
                                var $1649 = $1657;
                                break;
                        };
                        var $1642 = $1649;
                        break;
                };
                var $1634 = $1642;
                break;
        };
        return $1634;
    };
    const Kind$Parser$letforrange$u32$with = x0 => x1 => Kind$Parser$letforrange$u32$with$(x0, x1);

    function Kind$Parser$letforrange$nat$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $1759 = self.idx;
                var $1760 = self.code;
                var $1761 = self.err;
                var $1762 = Parser$Reply$error$($1759, $1760, $1761);
                var $1758 = $1762;
                break;
            case 'Parser.Reply.value':
                var $1763 = self.idx;
                var $1764 = self.code;
                var $1765 = self.val;
                var self = Kind$Parser$text$("let ", $1763, $1764);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $1767 = self.idx;
                        var $1768 = self.code;
                        var $1769 = self.err;
                        var $1770 = Parser$Reply$error$($1767, $1768, $1769);
                        var $1766 = $1770;
                        break;
                    case 'Parser.Reply.value':
                        var $1771 = self.idx;
                        var $1772 = self.code;
                        var self = Kind$Parser$name1$($1771, $1772);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $1774 = self.idx;
                                var $1775 = self.code;
                                var $1776 = self.err;
                                var $1777 = Parser$Reply$error$($1774, $1775, $1776);
                                var $1773 = $1777;
                                break;
                            case 'Parser.Reply.value':
                                var $1778 = self.idx;
                                var $1779 = self.code;
                                var $1780 = self.val;
                                var self = Kind$Parser$text$("=", $1778, $1779);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $1782 = self.idx;
                                        var $1783 = self.code;
                                        var $1784 = self.err;
                                        var $1785 = Parser$Reply$error$($1782, $1783, $1784);
                                        var $1781 = $1785;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $1786 = self.idx;
                                        var $1787 = self.code;
                                        var self = Kind$Parser$text$("for ", $1786, $1787);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $1789 = self.idx;
                                                var $1790 = self.code;
                                                var $1791 = self.err;
                                                var $1792 = Parser$Reply$error$($1789, $1790, $1791);
                                                var $1788 = $1792;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $1793 = self.idx;
                                                var $1794 = self.code;
                                                var self = Kind$Parser$name1$($1793, $1794);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $1796 = self.idx;
                                                        var $1797 = self.code;
                                                        var $1798 = self.err;
                                                        var $1799 = Parser$Reply$error$($1796, $1797, $1798);
                                                        var $1795 = $1799;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $1800 = self.idx;
                                                        var $1801 = self.code;
                                                        var $1802 = self.val;
                                                        var self = Kind$Parser$text$("from", $1800, $1801);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $1804 = self.idx;
                                                                var $1805 = self.code;
                                                                var $1806 = self.err;
                                                                var $1807 = Parser$Reply$error$($1804, $1805, $1806);
                                                                var $1803 = $1807;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $1808 = self.idx;
                                                                var $1809 = self.code;
                                                                var self = Kind$Parser$term$($1808, $1809);
                                                                switch (self._) {
                                                                    case 'Parser.Reply.error':
                                                                        var $1811 = self.idx;
                                                                        var $1812 = self.code;
                                                                        var $1813 = self.err;
                                                                        var $1814 = Parser$Reply$error$($1811, $1812, $1813);
                                                                        var $1810 = $1814;
                                                                        break;
                                                                    case 'Parser.Reply.value':
                                                                        var $1815 = self.idx;
                                                                        var $1816 = self.code;
                                                                        var $1817 = self.val;
                                                                        var self = Kind$Parser$text$("to", $1815, $1816);
                                                                        switch (self._) {
                                                                            case 'Parser.Reply.error':
                                                                                var $1819 = self.idx;
                                                                                var $1820 = self.code;
                                                                                var $1821 = self.err;
                                                                                var $1822 = Parser$Reply$error$($1819, $1820, $1821);
                                                                                var $1818 = $1822;
                                                                                break;
                                                                            case 'Parser.Reply.value':
                                                                                var $1823 = self.idx;
                                                                                var $1824 = self.code;
                                                                                var self = Kind$Parser$term$($1823, $1824);
                                                                                switch (self._) {
                                                                                    case 'Parser.Reply.error':
                                                                                        var $1826 = self.idx;
                                                                                        var $1827 = self.code;
                                                                                        var $1828 = self.err;
                                                                                        var $1829 = Parser$Reply$error$($1826, $1827, $1828);
                                                                                        var $1825 = $1829;
                                                                                        break;
                                                                                    case 'Parser.Reply.value':
                                                                                        var $1830 = self.idx;
                                                                                        var $1831 = self.code;
                                                                                        var $1832 = self.val;
                                                                                        var self = Kind$Parser$text$(":", $1830, $1831);
                                                                                        switch (self._) {
                                                                                            case 'Parser.Reply.error':
                                                                                                var $1834 = self.idx;
                                                                                                var $1835 = self.code;
                                                                                                var $1836 = self.err;
                                                                                                var $1837 = Parser$Reply$error$($1834, $1835, $1836);
                                                                                                var $1833 = $1837;
                                                                                                break;
                                                                                            case 'Parser.Reply.value':
                                                                                                var $1838 = self.idx;
                                                                                                var $1839 = self.code;
                                                                                                var self = Kind$Parser$term$($1838, $1839);
                                                                                                switch (self._) {
                                                                                                    case 'Parser.Reply.error':
                                                                                                        var $1841 = self.idx;
                                                                                                        var $1842 = self.code;
                                                                                                        var $1843 = self.err;
                                                                                                        var $1844 = Parser$Reply$error$($1841, $1842, $1843);
                                                                                                        var $1840 = $1844;
                                                                                                        break;
                                                                                                    case 'Parser.Reply.value':
                                                                                                        var $1845 = self.idx;
                                                                                                        var $1846 = self.code;
                                                                                                        var $1847 = self.val;
                                                                                                        var self = Parser$maybe$(Kind$Parser$text(";"), $1845, $1846);
                                                                                                        switch (self._) {
                                                                                                            case 'Parser.Reply.error':
                                                                                                                var $1849 = self.idx;
                                                                                                                var $1850 = self.code;
                                                                                                                var $1851 = self.err;
                                                                                                                var $1852 = Parser$Reply$error$($1849, $1850, $1851);
                                                                                                                var $1848 = $1852;
                                                                                                                break;
                                                                                                            case 'Parser.Reply.value':
                                                                                                                var $1853 = self.idx;
                                                                                                                var $1854 = self.code;
                                                                                                                var self = Kind$Parser$term$($1853, $1854);
                                                                                                                switch (self._) {
                                                                                                                    case 'Parser.Reply.error':
                                                                                                                        var $1856 = self.idx;
                                                                                                                        var $1857 = self.code;
                                                                                                                        var $1858 = self.err;
                                                                                                                        var $1859 = Parser$Reply$error$($1856, $1857, $1858);
                                                                                                                        var $1855 = $1859;
                                                                                                                        break;
                                                                                                                    case 'Parser.Reply.value':
                                                                                                                        var $1860 = self.idx;
                                                                                                                        var $1861 = self.code;
                                                                                                                        var $1862 = self.val;
                                                                                                                        var self = Kind$Parser$stop$($1765, $1860, $1861);
                                                                                                                        switch (self._) {
                                                                                                                            case 'Parser.Reply.error':
                                                                                                                                var $1864 = self.idx;
                                                                                                                                var $1865 = self.code;
                                                                                                                                var $1866 = self.err;
                                                                                                                                var $1867 = Parser$Reply$error$($1864, $1865, $1866);
                                                                                                                                var $1863 = $1867;
                                                                                                                                break;
                                                                                                                            case 'Parser.Reply.value':
                                                                                                                                var $1868 = self.idx;
                                                                                                                                var $1869 = self.code;
                                                                                                                                var $1870 = self.val;
                                                                                                                                var _term$48 = Kind$Term$ref$("Nat.for");
                                                                                                                                var _term$49 = Kind$Term$app$(_term$48, Kind$Term$hol$(Bits$e));
                                                                                                                                var _term$50 = Kind$Term$app$(_term$49, Kind$Term$ref$($1780));
                                                                                                                                var _term$51 = Kind$Term$app$(_term$50, $1817);
                                                                                                                                var _term$52 = Kind$Term$app$(_term$51, $1832);
                                                                                                                                var _lamb$53 = Kind$Term$lam$($1802, (_e$53 => {
                                                                                                                                    var $1872 = Kind$Term$lam$($1780, (_s$54 => {
                                                                                                                                        var $1873 = $1847;
                                                                                                                                        return $1873;
                                                                                                                                    }));
                                                                                                                                    return $1872;
                                                                                                                                }));
                                                                                                                                var _term$54 = Kind$Term$app$(_term$52, _lamb$53);
                                                                                                                                var _term$55 = Kind$Term$let$($1780, _term$54, (_x$55 => {
                                                                                                                                    var $1874 = $1862;
                                                                                                                                    return $1874;
                                                                                                                                }));
                                                                                                                                var $1871 = Parser$Reply$value$($1868, $1869, Kind$Term$ori$($1870, _term$55));
                                                                                                                                var $1863 = $1871;
                                                                                                                                break;
                                                                                                                        };
                                                                                                                        var $1855 = $1863;
                                                                                                                        break;
                                                                                                                };
                                                                                                                var $1848 = $1855;
                                                                                                                break;
                                                                                                        };
                                                                                                        var $1840 = $1848;
                                                                                                        break;
                                                                                                };
                                                                                                var $1833 = $1840;
                                                                                                break;
                                                                                        };
                                                                                        var $1825 = $1833;
                                                                                        break;
                                                                                };
                                                                                var $1818 = $1825;
                                                                                break;
                                                                        };
                                                                        var $1810 = $1818;
                                                                        break;
                                                                };
                                                                var $1803 = $1810;
                                                                break;
                                                        };
                                                        var $1795 = $1803;
                                                        break;
                                                };
                                                var $1788 = $1795;
                                                break;
                                        };
                                        var $1781 = $1788;
                                        break;
                                };
                                var $1773 = $1781;
                                break;
                        };
                        var $1766 = $1773;
                        break;
                };
                var $1758 = $1766;
                break;
        };
        return $1758;
    };
    const Kind$Parser$letforrange$nat = x0 => x1 => Kind$Parser$letforrange$nat$(x0, x1);

    function Kind$Parser$letforrange$nat$with$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $1876 = self.idx;
                var $1877 = self.code;
                var $1878 = self.err;
                var $1879 = Parser$Reply$error$($1876, $1877, $1878);
                var $1875 = $1879;
                break;
            case 'Parser.Reply.value':
                var $1880 = self.idx;
                var $1881 = self.code;
                var $1882 = self.val;
                var self = Kind$Parser$text$("for ", $1880, $1881);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $1884 = self.idx;
                        var $1885 = self.code;
                        var $1886 = self.err;
                        var $1887 = Parser$Reply$error$($1884, $1885, $1886);
                        var $1883 = $1887;
                        break;
                    case 'Parser.Reply.value':
                        var $1888 = self.idx;
                        var $1889 = self.code;
                        var self = Kind$Parser$name1$($1888, $1889);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $1891 = self.idx;
                                var $1892 = self.code;
                                var $1893 = self.err;
                                var $1894 = Parser$Reply$error$($1891, $1892, $1893);
                                var $1890 = $1894;
                                break;
                            case 'Parser.Reply.value':
                                var $1895 = self.idx;
                                var $1896 = self.code;
                                var $1897 = self.val;
                                var self = Kind$Parser$text$("from", $1895, $1896);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $1899 = self.idx;
                                        var $1900 = self.code;
                                        var $1901 = self.err;
                                        var $1902 = Parser$Reply$error$($1899, $1900, $1901);
                                        var $1898 = $1902;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $1903 = self.idx;
                                        var $1904 = self.code;
                                        var self = Kind$Parser$term$($1903, $1904);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $1906 = self.idx;
                                                var $1907 = self.code;
                                                var $1908 = self.err;
                                                var $1909 = Parser$Reply$error$($1906, $1907, $1908);
                                                var $1905 = $1909;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $1910 = self.idx;
                                                var $1911 = self.code;
                                                var $1912 = self.val;
                                                var self = Kind$Parser$text$("to", $1910, $1911);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $1914 = self.idx;
                                                        var $1915 = self.code;
                                                        var $1916 = self.err;
                                                        var $1917 = Parser$Reply$error$($1914, $1915, $1916);
                                                        var $1913 = $1917;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $1918 = self.idx;
                                                        var $1919 = self.code;
                                                        var self = Kind$Parser$term$($1918, $1919);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $1921 = self.idx;
                                                                var $1922 = self.code;
                                                                var $1923 = self.err;
                                                                var $1924 = Parser$Reply$error$($1921, $1922, $1923);
                                                                var $1920 = $1924;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $1925 = self.idx;
                                                                var $1926 = self.code;
                                                                var $1927 = self.val;
                                                                var self = Kind$Parser$text$("with ", $1925, $1926);
                                                                switch (self._) {
                                                                    case 'Parser.Reply.error':
                                                                        var $1929 = self.idx;
                                                                        var $1930 = self.code;
                                                                        var $1931 = self.err;
                                                                        var $1932 = Parser$Reply$error$($1929, $1930, $1931);
                                                                        var $1928 = $1932;
                                                                        break;
                                                                    case 'Parser.Reply.value':
                                                                        var $1933 = self.idx;
                                                                        var $1934 = self.code;
                                                                        var self = Kind$Parser$name1$($1933, $1934);
                                                                        switch (self._) {
                                                                            case 'Parser.Reply.error':
                                                                                var $1936 = self.idx;
                                                                                var $1937 = self.code;
                                                                                var $1938 = self.err;
                                                                                var $1939 = Parser$Reply$error$($1936, $1937, $1938);
                                                                                var $1935 = $1939;
                                                                                break;
                                                                            case 'Parser.Reply.value':
                                                                                var $1940 = self.idx;
                                                                                var $1941 = self.code;
                                                                                var $1942 = self.val;
                                                                                var self = Kind$Parser$text$(":", $1940, $1941);
                                                                                switch (self._) {
                                                                                    case 'Parser.Reply.error':
                                                                                        var $1944 = self.idx;
                                                                                        var $1945 = self.code;
                                                                                        var $1946 = self.err;
                                                                                        var $1947 = Parser$Reply$error$($1944, $1945, $1946);
                                                                                        var $1943 = $1947;
                                                                                        break;
                                                                                    case 'Parser.Reply.value':
                                                                                        var $1948 = self.idx;
                                                                                        var $1949 = self.code;
                                                                                        var self = Kind$Parser$term$($1948, $1949);
                                                                                        switch (self._) {
                                                                                            case 'Parser.Reply.error':
                                                                                                var $1951 = self.idx;
                                                                                                var $1952 = self.code;
                                                                                                var $1953 = self.err;
                                                                                                var $1954 = Parser$Reply$error$($1951, $1952, $1953);
                                                                                                var $1950 = $1954;
                                                                                                break;
                                                                                            case 'Parser.Reply.value':
                                                                                                var $1955 = self.idx;
                                                                                                var $1956 = self.code;
                                                                                                var $1957 = self.val;
                                                                                                var self = Parser$maybe$(Kind$Parser$text(";"), $1955, $1956);
                                                                                                switch (self._) {
                                                                                                    case 'Parser.Reply.error':
                                                                                                        var $1959 = self.idx;
                                                                                                        var $1960 = self.code;
                                                                                                        var $1961 = self.err;
                                                                                                        var $1962 = Parser$Reply$error$($1959, $1960, $1961);
                                                                                                        var $1958 = $1962;
                                                                                                        break;
                                                                                                    case 'Parser.Reply.value':
                                                                                                        var $1963 = self.idx;
                                                                                                        var $1964 = self.code;
                                                                                                        var self = Kind$Parser$term$($1963, $1964);
                                                                                                        switch (self._) {
                                                                                                            case 'Parser.Reply.error':
                                                                                                                var $1966 = self.idx;
                                                                                                                var $1967 = self.code;
                                                                                                                var $1968 = self.err;
                                                                                                                var $1969 = Parser$Reply$error$($1966, $1967, $1968);
                                                                                                                var $1965 = $1969;
                                                                                                                break;
                                                                                                            case 'Parser.Reply.value':
                                                                                                                var $1970 = self.idx;
                                                                                                                var $1971 = self.code;
                                                                                                                var $1972 = self.val;
                                                                                                                var self = Kind$Parser$stop$($1882, $1970, $1971);
                                                                                                                switch (self._) {
                                                                                                                    case 'Parser.Reply.error':
                                                                                                                        var $1974 = self.idx;
                                                                                                                        var $1975 = self.code;
                                                                                                                        var $1976 = self.err;
                                                                                                                        var $1977 = Parser$Reply$error$($1974, $1975, $1976);
                                                                                                                        var $1973 = $1977;
                                                                                                                        break;
                                                                                                                    case 'Parser.Reply.value':
                                                                                                                        var $1978 = self.idx;
                                                                                                                        var $1979 = self.code;
                                                                                                                        var $1980 = self.val;
                                                                                                                        var _term$45 = Kind$Term$ref$("Nat.for");
                                                                                                                        var _term$46 = Kind$Term$app$(_term$45, Kind$Term$hol$(Bits$e));
                                                                                                                        var _term$47 = Kind$Term$app$(_term$46, Kind$Term$ref$($1942));
                                                                                                                        var _term$48 = Kind$Term$app$(_term$47, $1912);
                                                                                                                        var _term$49 = Kind$Term$app$(_term$48, $1927);
                                                                                                                        var _lamb$50 = Kind$Term$lam$($1897, (_e$50 => {
                                                                                                                            var $1982 = Kind$Term$lam$($1942, (_s$51 => {
                                                                                                                                var $1983 = $1957;
                                                                                                                                return $1983;
                                                                                                                            }));
                                                                                                                            return $1982;
                                                                                                                        }));
                                                                                                                        var _term$51 = Kind$Term$app$(_term$49, _lamb$50);
                                                                                                                        var _term$52 = Kind$Term$let$($1942, _term$51, (_x$52 => {
                                                                                                                            var $1984 = $1972;
                                                                                                                            return $1984;
                                                                                                                        }));
                                                                                                                        var $1981 = Parser$Reply$value$($1978, $1979, Kind$Term$ori$($1980, _term$52));
                                                                                                                        var $1973 = $1981;
                                                                                                                        break;
                                                                                                                };
                                                                                                                var $1965 = $1973;
                                                                                                                break;
                                                                                                        };
                                                                                                        var $1958 = $1965;
                                                                                                        break;
                                                                                                };
                                                                                                var $1950 = $1958;
                                                                                                break;
                                                                                        };
                                                                                        var $1943 = $1950;
                                                                                        break;
                                                                                };
                                                                                var $1935 = $1943;
                                                                                break;
                                                                        };
                                                                        var $1928 = $1935;
                                                                        break;
                                                                };
                                                                var $1920 = $1928;
                                                                break;
                                                        };
                                                        var $1913 = $1920;
                                                        break;
                                                };
                                                var $1905 = $1913;
                                                break;
                                        };
                                        var $1898 = $1905;
                                        break;
                                };
                                var $1890 = $1898;
                                break;
                        };
                        var $1883 = $1890;
                        break;
                };
                var $1875 = $1883;
                break;
        };
        return $1875;
    };
    const Kind$Parser$letforrange$nat$with = x0 => x1 => Kind$Parser$letforrange$nat$with$(x0, x1);

    function Kind$Parser$letforin$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $1986 = self.idx;
                var $1987 = self.code;
                var $1988 = self.err;
                var $1989 = Parser$Reply$error$($1986, $1987, $1988);
                var $1985 = $1989;
                break;
            case 'Parser.Reply.value':
                var $1990 = self.idx;
                var $1991 = self.code;
                var $1992 = self.val;
                var self = Kind$Parser$text$("let ", $1990, $1991);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $1994 = self.idx;
                        var $1995 = self.code;
                        var $1996 = self.err;
                        var $1997 = Parser$Reply$error$($1994, $1995, $1996);
                        var $1993 = $1997;
                        break;
                    case 'Parser.Reply.value':
                        var $1998 = self.idx;
                        var $1999 = self.code;
                        var self = Kind$Parser$name1$($1998, $1999);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $2001 = self.idx;
                                var $2002 = self.code;
                                var $2003 = self.err;
                                var $2004 = Parser$Reply$error$($2001, $2002, $2003);
                                var $2000 = $2004;
                                break;
                            case 'Parser.Reply.value':
                                var $2005 = self.idx;
                                var $2006 = self.code;
                                var $2007 = self.val;
                                var self = Kind$Parser$text$("=", $2005, $2006);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $2009 = self.idx;
                                        var $2010 = self.code;
                                        var $2011 = self.err;
                                        var $2012 = Parser$Reply$error$($2009, $2010, $2011);
                                        var $2008 = $2012;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $2013 = self.idx;
                                        var $2014 = self.code;
                                        var self = Kind$Parser$text$("for ", $2013, $2014);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $2016 = self.idx;
                                                var $2017 = self.code;
                                                var $2018 = self.err;
                                                var $2019 = Parser$Reply$error$($2016, $2017, $2018);
                                                var $2015 = $2019;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $2020 = self.idx;
                                                var $2021 = self.code;
                                                var self = Kind$Parser$name1$($2020, $2021);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $2023 = self.idx;
                                                        var $2024 = self.code;
                                                        var $2025 = self.err;
                                                        var $2026 = Parser$Reply$error$($2023, $2024, $2025);
                                                        var $2022 = $2026;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $2027 = self.idx;
                                                        var $2028 = self.code;
                                                        var $2029 = self.val;
                                                        var self = Kind$Parser$text$("in", $2027, $2028);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $2031 = self.idx;
                                                                var $2032 = self.code;
                                                                var $2033 = self.err;
                                                                var $2034 = Parser$Reply$error$($2031, $2032, $2033);
                                                                var $2030 = $2034;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $2035 = self.idx;
                                                                var $2036 = self.code;
                                                                var self = Kind$Parser$term$($2035, $2036);
                                                                switch (self._) {
                                                                    case 'Parser.Reply.error':
                                                                        var $2038 = self.idx;
                                                                        var $2039 = self.code;
                                                                        var $2040 = self.err;
                                                                        var $2041 = Parser$Reply$error$($2038, $2039, $2040);
                                                                        var $2037 = $2041;
                                                                        break;
                                                                    case 'Parser.Reply.value':
                                                                        var $2042 = self.idx;
                                                                        var $2043 = self.code;
                                                                        var $2044 = self.val;
                                                                        var self = Kind$Parser$text$(":", $2042, $2043);
                                                                        switch (self._) {
                                                                            case 'Parser.Reply.error':
                                                                                var $2046 = self.idx;
                                                                                var $2047 = self.code;
                                                                                var $2048 = self.err;
                                                                                var $2049 = Parser$Reply$error$($2046, $2047, $2048);
                                                                                var $2045 = $2049;
                                                                                break;
                                                                            case 'Parser.Reply.value':
                                                                                var $2050 = self.idx;
                                                                                var $2051 = self.code;
                                                                                var self = Kind$Parser$term$($2050, $2051);
                                                                                switch (self._) {
                                                                                    case 'Parser.Reply.error':
                                                                                        var $2053 = self.idx;
                                                                                        var $2054 = self.code;
                                                                                        var $2055 = self.err;
                                                                                        var $2056 = Parser$Reply$error$($2053, $2054, $2055);
                                                                                        var $2052 = $2056;
                                                                                        break;
                                                                                    case 'Parser.Reply.value':
                                                                                        var $2057 = self.idx;
                                                                                        var $2058 = self.code;
                                                                                        var $2059 = self.val;
                                                                                        var self = Parser$maybe$(Kind$Parser$text(";"), $2057, $2058);
                                                                                        switch (self._) {
                                                                                            case 'Parser.Reply.error':
                                                                                                var $2061 = self.idx;
                                                                                                var $2062 = self.code;
                                                                                                var $2063 = self.err;
                                                                                                var $2064 = Parser$Reply$error$($2061, $2062, $2063);
                                                                                                var $2060 = $2064;
                                                                                                break;
                                                                                            case 'Parser.Reply.value':
                                                                                                var $2065 = self.idx;
                                                                                                var $2066 = self.code;
                                                                                                var self = Kind$Parser$term$($2065, $2066);
                                                                                                switch (self._) {
                                                                                                    case 'Parser.Reply.error':
                                                                                                        var $2068 = self.idx;
                                                                                                        var $2069 = self.code;
                                                                                                        var $2070 = self.err;
                                                                                                        var $2071 = Parser$Reply$error$($2068, $2069, $2070);
                                                                                                        var $2067 = $2071;
                                                                                                        break;
                                                                                                    case 'Parser.Reply.value':
                                                                                                        var $2072 = self.idx;
                                                                                                        var $2073 = self.code;
                                                                                                        var $2074 = self.val;
                                                                                                        var self = Kind$Parser$stop$($1992, $2072, $2073);
                                                                                                        switch (self._) {
                                                                                                            case 'Parser.Reply.error':
                                                                                                                var $2076 = self.idx;
                                                                                                                var $2077 = self.code;
                                                                                                                var $2078 = self.err;
                                                                                                                var $2079 = Parser$Reply$error$($2076, $2077, $2078);
                                                                                                                var $2075 = $2079;
                                                                                                                break;
                                                                                                            case 'Parser.Reply.value':
                                                                                                                var $2080 = self.idx;
                                                                                                                var $2081 = self.code;
                                                                                                                var $2082 = self.val;
                                                                                                                var _term$42 = Kind$Term$ref$("List.for");
                                                                                                                var _term$43 = Kind$Term$app$(_term$42, Kind$Term$hol$(Bits$e));
                                                                                                                var _term$44 = Kind$Term$app$(_term$43, $2044);
                                                                                                                var _term$45 = Kind$Term$app$(_term$44, Kind$Term$hol$(Bits$e));
                                                                                                                var _term$46 = Kind$Term$app$(_term$45, Kind$Term$ref$($2007));
                                                                                                                var _lamb$47 = Kind$Term$lam$($2029, (_i$47 => {
                                                                                                                    var $2084 = Kind$Term$lam$($2007, (_x$48 => {
                                                                                                                        var $2085 = $2059;
                                                                                                                        return $2085;
                                                                                                                    }));
                                                                                                                    return $2084;
                                                                                                                }));
                                                                                                                var _term$48 = Kind$Term$app$(_term$46, _lamb$47);
                                                                                                                var _term$49 = Kind$Term$let$($2007, _term$48, (_x$49 => {
                                                                                                                    var $2086 = $2074;
                                                                                                                    return $2086;
                                                                                                                }));
                                                                                                                var $2083 = Parser$Reply$value$($2080, $2081, Kind$Term$ori$($2082, _term$49));
                                                                                                                var $2075 = $2083;
                                                                                                                break;
                                                                                                        };
                                                                                                        var $2067 = $2075;
                                                                                                        break;
                                                                                                };
                                                                                                var $2060 = $2067;
                                                                                                break;
                                                                                        };
                                                                                        var $2052 = $2060;
                                                                                        break;
                                                                                };
                                                                                var $2045 = $2052;
                                                                                break;
                                                                        };
                                                                        var $2037 = $2045;
                                                                        break;
                                                                };
                                                                var $2030 = $2037;
                                                                break;
                                                        };
                                                        var $2022 = $2030;
                                                        break;
                                                };
                                                var $2015 = $2022;
                                                break;
                                        };
                                        var $2008 = $2015;
                                        break;
                                };
                                var $2000 = $2008;
                                break;
                        };
                        var $1993 = $2000;
                        break;
                };
                var $1985 = $1993;
                break;
        };
        return $1985;
    };
    const Kind$Parser$letforin = x0 => x1 => Kind$Parser$letforin$(x0, x1);

    function Kind$Parser$letforin$with$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $2088 = self.idx;
                var $2089 = self.code;
                var $2090 = self.err;
                var $2091 = Parser$Reply$error$($2088, $2089, $2090);
                var $2087 = $2091;
                break;
            case 'Parser.Reply.value':
                var $2092 = self.idx;
                var $2093 = self.code;
                var $2094 = self.val;
                var self = Kind$Parser$text$("for ", $2092, $2093);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $2096 = self.idx;
                        var $2097 = self.code;
                        var $2098 = self.err;
                        var $2099 = Parser$Reply$error$($2096, $2097, $2098);
                        var $2095 = $2099;
                        break;
                    case 'Parser.Reply.value':
                        var $2100 = self.idx;
                        var $2101 = self.code;
                        var self = Kind$Parser$name1$($2100, $2101);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $2103 = self.idx;
                                var $2104 = self.code;
                                var $2105 = self.err;
                                var $2106 = Parser$Reply$error$($2103, $2104, $2105);
                                var $2102 = $2106;
                                break;
                            case 'Parser.Reply.value':
                                var $2107 = self.idx;
                                var $2108 = self.code;
                                var $2109 = self.val;
                                var self = Kind$Parser$text$("in", $2107, $2108);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $2111 = self.idx;
                                        var $2112 = self.code;
                                        var $2113 = self.err;
                                        var $2114 = Parser$Reply$error$($2111, $2112, $2113);
                                        var $2110 = $2114;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $2115 = self.idx;
                                        var $2116 = self.code;
                                        var self = Kind$Parser$term$($2115, $2116);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $2118 = self.idx;
                                                var $2119 = self.code;
                                                var $2120 = self.err;
                                                var $2121 = Parser$Reply$error$($2118, $2119, $2120);
                                                var $2117 = $2121;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $2122 = self.idx;
                                                var $2123 = self.code;
                                                var $2124 = self.val;
                                                var self = Kind$Parser$text$("with ", $2122, $2123);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $2126 = self.idx;
                                                        var $2127 = self.code;
                                                        var $2128 = self.err;
                                                        var $2129 = Parser$Reply$error$($2126, $2127, $2128);
                                                        var $2125 = $2129;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $2130 = self.idx;
                                                        var $2131 = self.code;
                                                        var self = Kind$Parser$name1$($2130, $2131);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $2133 = self.idx;
                                                                var $2134 = self.code;
                                                                var $2135 = self.err;
                                                                var $2136 = Parser$Reply$error$($2133, $2134, $2135);
                                                                var $2132 = $2136;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $2137 = self.idx;
                                                                var $2138 = self.code;
                                                                var $2139 = self.val;
                                                                var self = Kind$Parser$text$(":", $2137, $2138);
                                                                switch (self._) {
                                                                    case 'Parser.Reply.error':
                                                                        var $2141 = self.idx;
                                                                        var $2142 = self.code;
                                                                        var $2143 = self.err;
                                                                        var $2144 = Parser$Reply$error$($2141, $2142, $2143);
                                                                        var $2140 = $2144;
                                                                        break;
                                                                    case 'Parser.Reply.value':
                                                                        var $2145 = self.idx;
                                                                        var $2146 = self.code;
                                                                        var self = Kind$Parser$term$($2145, $2146);
                                                                        switch (self._) {
                                                                            case 'Parser.Reply.error':
                                                                                var $2148 = self.idx;
                                                                                var $2149 = self.code;
                                                                                var $2150 = self.err;
                                                                                var $2151 = Parser$Reply$error$($2148, $2149, $2150);
                                                                                var $2147 = $2151;
                                                                                break;
                                                                            case 'Parser.Reply.value':
                                                                                var $2152 = self.idx;
                                                                                var $2153 = self.code;
                                                                                var $2154 = self.val;
                                                                                var self = Parser$maybe$(Kind$Parser$text(";"), $2152, $2153);
                                                                                switch (self._) {
                                                                                    case 'Parser.Reply.error':
                                                                                        var $2156 = self.idx;
                                                                                        var $2157 = self.code;
                                                                                        var $2158 = self.err;
                                                                                        var $2159 = Parser$Reply$error$($2156, $2157, $2158);
                                                                                        var $2155 = $2159;
                                                                                        break;
                                                                                    case 'Parser.Reply.value':
                                                                                        var $2160 = self.idx;
                                                                                        var $2161 = self.code;
                                                                                        var self = Kind$Parser$term$($2160, $2161);
                                                                                        switch (self._) {
                                                                                            case 'Parser.Reply.error':
                                                                                                var $2163 = self.idx;
                                                                                                var $2164 = self.code;
                                                                                                var $2165 = self.err;
                                                                                                var $2166 = Parser$Reply$error$($2163, $2164, $2165);
                                                                                                var $2162 = $2166;
                                                                                                break;
                                                                                            case 'Parser.Reply.value':
                                                                                                var $2167 = self.idx;
                                                                                                var $2168 = self.code;
                                                                                                var $2169 = self.val;
                                                                                                var self = Kind$Parser$stop$($2094, $2167, $2168);
                                                                                                switch (self._) {
                                                                                                    case 'Parser.Reply.error':
                                                                                                        var $2171 = self.idx;
                                                                                                        var $2172 = self.code;
                                                                                                        var $2173 = self.err;
                                                                                                        var $2174 = Parser$Reply$error$($2171, $2172, $2173);
                                                                                                        var $2170 = $2174;
                                                                                                        break;
                                                                                                    case 'Parser.Reply.value':
                                                                                                        var $2175 = self.idx;
                                                                                                        var $2176 = self.code;
                                                                                                        var $2177 = self.val;
                                                                                                        var _term$39 = Kind$Term$ref$("List.for");
                                                                                                        var _term$40 = Kind$Term$app$(_term$39, Kind$Term$hol$(Bits$e));
                                                                                                        var _term$41 = Kind$Term$app$(_term$40, $2124);
                                                                                                        var _term$42 = Kind$Term$app$(_term$41, Kind$Term$hol$(Bits$e));
                                                                                                        var _term$43 = Kind$Term$app$(_term$42, Kind$Term$ref$($2139));
                                                                                                        var _lamb$44 = Kind$Term$lam$($2109, (_i$44 => {
                                                                                                            var $2179 = Kind$Term$lam$($2139, (_x$45 => {
                                                                                                                var $2180 = $2154;
                                                                                                                return $2180;
                                                                                                            }));
                                                                                                            return $2179;
                                                                                                        }));
                                                                                                        var _term$45 = Kind$Term$app$(_term$43, _lamb$44);
                                                                                                        var _term$46 = Kind$Term$let$($2139, _term$45, (_x$46 => {
                                                                                                            var $2181 = $2169;
                                                                                                            return $2181;
                                                                                                        }));
                                                                                                        var $2178 = Parser$Reply$value$($2175, $2176, Kind$Term$ori$($2177, _term$46));
                                                                                                        var $2170 = $2178;
                                                                                                        break;
                                                                                                };
                                                                                                var $2162 = $2170;
                                                                                                break;
                                                                                        };
                                                                                        var $2155 = $2162;
                                                                                        break;
                                                                                };
                                                                                var $2147 = $2155;
                                                                                break;
                                                                        };
                                                                        var $2140 = $2147;
                                                                        break;
                                                                };
                                                                var $2132 = $2140;
                                                                break;
                                                        };
                                                        var $2125 = $2132;
                                                        break;
                                                };
                                                var $2117 = $2125;
                                                break;
                                        };
                                        var $2110 = $2117;
                                        break;
                                };
                                var $2102 = $2110;
                                break;
                        };
                        var $2095 = $2102;
                        break;
                };
                var $2087 = $2095;
                break;
        };
        return $2087;
    };
    const Kind$Parser$letforin$with = x0 => x1 => Kind$Parser$letforin$with$(x0, x1);

    function Kind$Parser$letwhile$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $2183 = self.idx;
                var $2184 = self.code;
                var $2185 = self.err;
                var $2186 = Parser$Reply$error$($2183, $2184, $2185);
                var $2182 = $2186;
                break;
            case 'Parser.Reply.value':
                var $2187 = self.idx;
                var $2188 = self.code;
                var $2189 = self.val;
                var self = Kind$Parser$text$("let ", $2187, $2188);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $2191 = self.idx;
                        var $2192 = self.code;
                        var $2193 = self.err;
                        var $2194 = Parser$Reply$error$($2191, $2192, $2193);
                        var $2190 = $2194;
                        break;
                    case 'Parser.Reply.value':
                        var $2195 = self.idx;
                        var $2196 = self.code;
                        var self = Kind$Parser$name1$($2195, $2196);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $2198 = self.idx;
                                var $2199 = self.code;
                                var $2200 = self.err;
                                var $2201 = Parser$Reply$error$($2198, $2199, $2200);
                                var $2197 = $2201;
                                break;
                            case 'Parser.Reply.value':
                                var $2202 = self.idx;
                                var $2203 = self.code;
                                var $2204 = self.val;
                                var self = Kind$Parser$text$("=", $2202, $2203);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $2206 = self.idx;
                                        var $2207 = self.code;
                                        var $2208 = self.err;
                                        var $2209 = Parser$Reply$error$($2206, $2207, $2208);
                                        var $2205 = $2209;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $2210 = self.idx;
                                        var $2211 = self.code;
                                        var self = Kind$Parser$text$("while ", $2210, $2211);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $2213 = self.idx;
                                                var $2214 = self.code;
                                                var $2215 = self.err;
                                                var $2216 = Parser$Reply$error$($2213, $2214, $2215);
                                                var $2212 = $2216;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $2217 = self.idx;
                                                var $2218 = self.code;
                                                var self = Kind$Parser$term$($2217, $2218);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $2220 = self.idx;
                                                        var $2221 = self.code;
                                                        var $2222 = self.err;
                                                        var $2223 = Parser$Reply$error$($2220, $2221, $2222);
                                                        var $2219 = $2223;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $2224 = self.idx;
                                                        var $2225 = self.code;
                                                        var $2226 = self.val;
                                                        var self = Kind$Parser$text$(":", $2224, $2225);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $2228 = self.idx;
                                                                var $2229 = self.code;
                                                                var $2230 = self.err;
                                                                var $2231 = Parser$Reply$error$($2228, $2229, $2230);
                                                                var $2227 = $2231;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $2232 = self.idx;
                                                                var $2233 = self.code;
                                                                var self = Kind$Parser$term$($2232, $2233);
                                                                switch (self._) {
                                                                    case 'Parser.Reply.error':
                                                                        var $2235 = self.idx;
                                                                        var $2236 = self.code;
                                                                        var $2237 = self.err;
                                                                        var $2238 = Parser$Reply$error$($2235, $2236, $2237);
                                                                        var $2234 = $2238;
                                                                        break;
                                                                    case 'Parser.Reply.value':
                                                                        var $2239 = self.idx;
                                                                        var $2240 = self.code;
                                                                        var $2241 = self.val;
                                                                        var self = Parser$maybe$(Kind$Parser$text(";"), $2239, $2240);
                                                                        switch (self._) {
                                                                            case 'Parser.Reply.error':
                                                                                var $2243 = self.idx;
                                                                                var $2244 = self.code;
                                                                                var $2245 = self.err;
                                                                                var $2246 = Parser$Reply$error$($2243, $2244, $2245);
                                                                                var $2242 = $2246;
                                                                                break;
                                                                            case 'Parser.Reply.value':
                                                                                var $2247 = self.idx;
                                                                                var $2248 = self.code;
                                                                                var self = Kind$Parser$term$($2247, $2248);
                                                                                switch (self._) {
                                                                                    case 'Parser.Reply.error':
                                                                                        var $2250 = self.idx;
                                                                                        var $2251 = self.code;
                                                                                        var $2252 = self.err;
                                                                                        var $2253 = Parser$Reply$error$($2250, $2251, $2252);
                                                                                        var $2249 = $2253;
                                                                                        break;
                                                                                    case 'Parser.Reply.value':
                                                                                        var $2254 = self.idx;
                                                                                        var $2255 = self.code;
                                                                                        var $2256 = self.val;
                                                                                        var self = Kind$Parser$stop$($2189, $2254, $2255);
                                                                                        switch (self._) {
                                                                                            case 'Parser.Reply.error':
                                                                                                var $2258 = self.idx;
                                                                                                var $2259 = self.code;
                                                                                                var $2260 = self.err;
                                                                                                var $2261 = Parser$Reply$error$($2258, $2259, $2260);
                                                                                                var $2257 = $2261;
                                                                                                break;
                                                                                            case 'Parser.Reply.value':
                                                                                                var $2262 = self.idx;
                                                                                                var $2263 = self.code;
                                                                                                var $2264 = self.val;
                                                                                                var _term$36 = Kind$Term$ref$("Function.while");
                                                                                                var _term$37 = Kind$Term$app$(_term$36, Kind$Term$hol$(Bits$e));
                                                                                                var _term$38 = Kind$Term$app$(_term$37, Kind$Term$ref$($2204));
                                                                                                var _term$39 = Kind$Term$app$(_term$38, Kind$Term$lam$($2204, (_s$39 => {
                                                                                                    var $2266 = $2226;
                                                                                                    return $2266;
                                                                                                })));
                                                                                                var _term$40 = Kind$Term$app$(_term$39, Kind$Term$lam$($2204, (_s$40 => {
                                                                                                    var $2267 = $2241;
                                                                                                    return $2267;
                                                                                                })));
                                                                                                var _term$41 = Kind$Term$let$($2204, _term$40, (_x$41 => {
                                                                                                    var $2268 = $2256;
                                                                                                    return $2268;
                                                                                                }));
                                                                                                var $2265 = Parser$Reply$value$($2262, $2263, Kind$Term$ori$($2264, _term$41));
                                                                                                var $2257 = $2265;
                                                                                                break;
                                                                                        };
                                                                                        var $2249 = $2257;
                                                                                        break;
                                                                                };
                                                                                var $2242 = $2249;
                                                                                break;
                                                                        };
                                                                        var $2234 = $2242;
                                                                        break;
                                                                };
                                                                var $2227 = $2234;
                                                                break;
                                                        };
                                                        var $2219 = $2227;
                                                        break;
                                                };
                                                var $2212 = $2219;
                                                break;
                                        };
                                        var $2205 = $2212;
                                        break;
                                };
                                var $2197 = $2205;
                                break;
                        };
                        var $2190 = $2197;
                        break;
                };
                var $2182 = $2190;
                break;
        };
        return $2182;
    };
    const Kind$Parser$letwhile = x0 => x1 => Kind$Parser$letwhile$(x0, x1);

    function Kind$Parser$letwhile$with$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $2270 = self.idx;
                var $2271 = self.code;
                var $2272 = self.err;
                var $2273 = Parser$Reply$error$($2270, $2271, $2272);
                var $2269 = $2273;
                break;
            case 'Parser.Reply.value':
                var $2274 = self.idx;
                var $2275 = self.code;
                var $2276 = self.val;
                var self = Kind$Parser$text$("while ", $2274, $2275);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $2278 = self.idx;
                        var $2279 = self.code;
                        var $2280 = self.err;
                        var $2281 = Parser$Reply$error$($2278, $2279, $2280);
                        var $2277 = $2281;
                        break;
                    case 'Parser.Reply.value':
                        var $2282 = self.idx;
                        var $2283 = self.code;
                        var self = Kind$Parser$term$($2282, $2283);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $2285 = self.idx;
                                var $2286 = self.code;
                                var $2287 = self.err;
                                var $2288 = Parser$Reply$error$($2285, $2286, $2287);
                                var $2284 = $2288;
                                break;
                            case 'Parser.Reply.value':
                                var $2289 = self.idx;
                                var $2290 = self.code;
                                var $2291 = self.val;
                                var self = Kind$Parser$text$("with ", $2289, $2290);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $2293 = self.idx;
                                        var $2294 = self.code;
                                        var $2295 = self.err;
                                        var $2296 = Parser$Reply$error$($2293, $2294, $2295);
                                        var $2292 = $2296;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $2297 = self.idx;
                                        var $2298 = self.code;
                                        var self = Kind$Parser$name1$($2297, $2298);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $2300 = self.idx;
                                                var $2301 = self.code;
                                                var $2302 = self.err;
                                                var $2303 = Parser$Reply$error$($2300, $2301, $2302);
                                                var $2299 = $2303;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $2304 = self.idx;
                                                var $2305 = self.code;
                                                var $2306 = self.val;
                                                var self = Kind$Parser$text$(":", $2304, $2305);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $2308 = self.idx;
                                                        var $2309 = self.code;
                                                        var $2310 = self.err;
                                                        var $2311 = Parser$Reply$error$($2308, $2309, $2310);
                                                        var $2307 = $2311;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $2312 = self.idx;
                                                        var $2313 = self.code;
                                                        var self = Kind$Parser$term$($2312, $2313);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $2315 = self.idx;
                                                                var $2316 = self.code;
                                                                var $2317 = self.err;
                                                                var $2318 = Parser$Reply$error$($2315, $2316, $2317);
                                                                var $2314 = $2318;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $2319 = self.idx;
                                                                var $2320 = self.code;
                                                                var $2321 = self.val;
                                                                var self = Parser$maybe$(Kind$Parser$text(";"), $2319, $2320);
                                                                switch (self._) {
                                                                    case 'Parser.Reply.error':
                                                                        var $2323 = self.idx;
                                                                        var $2324 = self.code;
                                                                        var $2325 = self.err;
                                                                        var $2326 = Parser$Reply$error$($2323, $2324, $2325);
                                                                        var $2322 = $2326;
                                                                        break;
                                                                    case 'Parser.Reply.value':
                                                                        var $2327 = self.idx;
                                                                        var $2328 = self.code;
                                                                        var self = Kind$Parser$term$($2327, $2328);
                                                                        switch (self._) {
                                                                            case 'Parser.Reply.error':
                                                                                var $2330 = self.idx;
                                                                                var $2331 = self.code;
                                                                                var $2332 = self.err;
                                                                                var $2333 = Parser$Reply$error$($2330, $2331, $2332);
                                                                                var $2329 = $2333;
                                                                                break;
                                                                            case 'Parser.Reply.value':
                                                                                var $2334 = self.idx;
                                                                                var $2335 = self.code;
                                                                                var $2336 = self.val;
                                                                                var self = Kind$Parser$stop$($2276, $2334, $2335);
                                                                                switch (self._) {
                                                                                    case 'Parser.Reply.error':
                                                                                        var $2338 = self.idx;
                                                                                        var $2339 = self.code;
                                                                                        var $2340 = self.err;
                                                                                        var $2341 = Parser$Reply$error$($2338, $2339, $2340);
                                                                                        var $2337 = $2341;
                                                                                        break;
                                                                                    case 'Parser.Reply.value':
                                                                                        var $2342 = self.idx;
                                                                                        var $2343 = self.code;
                                                                                        var $2344 = self.val;
                                                                                        var _term$33 = Kind$Term$ref$("Function.while");
                                                                                        var _term$34 = Kind$Term$app$(_term$33, Kind$Term$hol$(Bits$e));
                                                                                        var _term$35 = Kind$Term$app$(_term$34, Kind$Term$ref$($2306));
                                                                                        var _term$36 = Kind$Term$app$(_term$35, Kind$Term$lam$($2306, (_s$36 => {
                                                                                            var $2346 = $2291;
                                                                                            return $2346;
                                                                                        })));
                                                                                        var _term$37 = Kind$Term$app$(_term$36, Kind$Term$lam$($2306, (_s$37 => {
                                                                                            var $2347 = $2321;
                                                                                            return $2347;
                                                                                        })));
                                                                                        var _term$38 = Kind$Term$let$($2306, _term$37, (_x$38 => {
                                                                                            var $2348 = $2336;
                                                                                            return $2348;
                                                                                        }));
                                                                                        var $2345 = Parser$Reply$value$($2342, $2343, Kind$Term$ori$($2344, _term$38));
                                                                                        var $2337 = $2345;
                                                                                        break;
                                                                                };
                                                                                var $2329 = $2337;
                                                                                break;
                                                                        };
                                                                        var $2322 = $2329;
                                                                        break;
                                                                };
                                                                var $2314 = $2322;
                                                                break;
                                                        };
                                                        var $2307 = $2314;
                                                        break;
                                                };
                                                var $2299 = $2307;
                                                break;
                                        };
                                        var $2292 = $2299;
                                        break;
                                };
                                var $2284 = $2292;
                                break;
                        };
                        var $2277 = $2284;
                        break;
                };
                var $2269 = $2277;
                break;
        };
        return $2269;
    };
    const Kind$Parser$letwhile$with = x0 => x1 => Kind$Parser$letwhile$with$(x0, x1);

    function Kind$Parser$let$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $2350 = self.idx;
                var $2351 = self.code;
                var $2352 = self.err;
                var $2353 = Parser$Reply$error$($2350, $2351, $2352);
                var $2349 = $2353;
                break;
            case 'Parser.Reply.value':
                var $2354 = self.idx;
                var $2355 = self.code;
                var $2356 = self.val;
                var self = Kind$Parser$text$("let ", $2354, $2355);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $2358 = self.idx;
                        var $2359 = self.code;
                        var $2360 = self.err;
                        var $2361 = Parser$Reply$error$($2358, $2359, $2360);
                        var $2357 = $2361;
                        break;
                    case 'Parser.Reply.value':
                        var $2362 = self.idx;
                        var $2363 = self.code;
                        var self = Kind$Parser$name$($2362, $2363);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $2365 = self.idx;
                                var $2366 = self.code;
                                var $2367 = self.err;
                                var $2368 = Parser$Reply$error$($2365, $2366, $2367);
                                var $2364 = $2368;
                                break;
                            case 'Parser.Reply.value':
                                var $2369 = self.idx;
                                var $2370 = self.code;
                                var $2371 = self.val;
                                var self = Kind$Parser$text$("=", $2369, $2370);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $2373 = self.idx;
                                        var $2374 = self.code;
                                        var $2375 = self.err;
                                        var $2376 = Parser$Reply$error$($2373, $2374, $2375);
                                        var $2372 = $2376;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $2377 = self.idx;
                                        var $2378 = self.code;
                                        var self = Kind$Parser$term$($2377, $2378);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $2380 = self.idx;
                                                var $2381 = self.code;
                                                var $2382 = self.err;
                                                var $2383 = Parser$Reply$error$($2380, $2381, $2382);
                                                var $2379 = $2383;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $2384 = self.idx;
                                                var $2385 = self.code;
                                                var $2386 = self.val;
                                                var self = Parser$maybe$(Kind$Parser$text(";"), $2384, $2385);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $2388 = self.idx;
                                                        var $2389 = self.code;
                                                        var $2390 = self.err;
                                                        var $2391 = Parser$Reply$error$($2388, $2389, $2390);
                                                        var $2387 = $2391;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $2392 = self.idx;
                                                        var $2393 = self.code;
                                                        var self = Kind$Parser$term$($2392, $2393);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $2395 = self.idx;
                                                                var $2396 = self.code;
                                                                var $2397 = self.err;
                                                                var $2398 = Parser$Reply$error$($2395, $2396, $2397);
                                                                var $2394 = $2398;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $2399 = self.idx;
                                                                var $2400 = self.code;
                                                                var $2401 = self.val;
                                                                var self = Kind$Parser$stop$($2356, $2399, $2400);
                                                                switch (self._) {
                                                                    case 'Parser.Reply.error':
                                                                        var $2403 = self.idx;
                                                                        var $2404 = self.code;
                                                                        var $2405 = self.err;
                                                                        var $2406 = Parser$Reply$error$($2403, $2404, $2405);
                                                                        var $2402 = $2406;
                                                                        break;
                                                                    case 'Parser.Reply.value':
                                                                        var $2407 = self.idx;
                                                                        var $2408 = self.code;
                                                                        var $2409 = self.val;
                                                                        var $2410 = Parser$Reply$value$($2407, $2408, Kind$Term$ori$($2409, Kind$Term$let$($2371, $2386, (_x$27 => {
                                                                            var $2411 = $2401;
                                                                            return $2411;
                                                                        }))));
                                                                        var $2402 = $2410;
                                                                        break;
                                                                };
                                                                var $2394 = $2402;
                                                                break;
                                                        };
                                                        var $2387 = $2394;
                                                        break;
                                                };
                                                var $2379 = $2387;
                                                break;
                                        };
                                        var $2372 = $2379;
                                        break;
                                };
                                var $2364 = $2372;
                                break;
                        };
                        var $2357 = $2364;
                        break;
                };
                var $2349 = $2357;
                break;
        };
        return $2349;
    };
    const Kind$Parser$let = x0 => x1 => Kind$Parser$let$(x0, x1);

    function Kind$Parser$let$omit$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $2413 = self.idx;
                var $2414 = self.code;
                var $2415 = self.err;
                var $2416 = Parser$Reply$error$($2413, $2414, $2415);
                var $2412 = $2416;
                break;
            case 'Parser.Reply.value':
                var $2417 = self.idx;
                var $2418 = self.code;
                var $2419 = self.val;
                var self = Kind$Parser$name$($2417, $2418);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $2421 = self.idx;
                        var $2422 = self.code;
                        var $2423 = self.err;
                        var $2424 = Parser$Reply$error$($2421, $2422, $2423);
                        var $2420 = $2424;
                        break;
                    case 'Parser.Reply.value':
                        var $2425 = self.idx;
                        var $2426 = self.code;
                        var $2427 = self.val;
                        var self = Kind$Parser$text$("= ", $2425, $2426);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $2429 = self.idx;
                                var $2430 = self.code;
                                var $2431 = self.err;
                                var $2432 = Parser$Reply$error$($2429, $2430, $2431);
                                var $2428 = $2432;
                                break;
                            case 'Parser.Reply.value':
                                var $2433 = self.idx;
                                var $2434 = self.code;
                                var self = Kind$Parser$term$($2433, $2434);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $2436 = self.idx;
                                        var $2437 = self.code;
                                        var $2438 = self.err;
                                        var $2439 = Parser$Reply$error$($2436, $2437, $2438);
                                        var $2435 = $2439;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $2440 = self.idx;
                                        var $2441 = self.code;
                                        var $2442 = self.val;
                                        var self = Parser$maybe$(Kind$Parser$text(";"), $2440, $2441);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $2444 = self.idx;
                                                var $2445 = self.code;
                                                var $2446 = self.err;
                                                var $2447 = Parser$Reply$error$($2444, $2445, $2446);
                                                var $2443 = $2447;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $2448 = self.idx;
                                                var $2449 = self.code;
                                                var self = Kind$Parser$term$($2448, $2449);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $2451 = self.idx;
                                                        var $2452 = self.code;
                                                        var $2453 = self.err;
                                                        var $2454 = Parser$Reply$error$($2451, $2452, $2453);
                                                        var $2450 = $2454;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $2455 = self.idx;
                                                        var $2456 = self.code;
                                                        var $2457 = self.val;
                                                        var self = Kind$Parser$stop$($2419, $2455, $2456);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $2459 = self.idx;
                                                                var $2460 = self.code;
                                                                var $2461 = self.err;
                                                                var $2462 = Parser$Reply$error$($2459, $2460, $2461);
                                                                var $2458 = $2462;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $2463 = self.idx;
                                                                var $2464 = self.code;
                                                                var $2465 = self.val;
                                                                var $2466 = Parser$Reply$value$($2463, $2464, Kind$Term$ori$($2465, Kind$Term$let$($2427, $2442, (_x$24 => {
                                                                    var $2467 = $2457;
                                                                    return $2467;
                                                                }))));
                                                                var $2458 = $2466;
                                                                break;
                                                        };
                                                        var $2450 = $2458;
                                                        break;
                                                };
                                                var $2443 = $2450;
                                                break;
                                        };
                                        var $2435 = $2443;
                                        break;
                                };
                                var $2428 = $2435;
                                break;
                        };
                        var $2420 = $2428;
                        break;
                };
                var $2412 = $2420;
                break;
        };
        return $2412;
    };
    const Kind$Parser$let$omit = x0 => x1 => Kind$Parser$let$omit$(x0, x1);

    function Kind$Parser$getwhile$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $2469 = self.idx;
                var $2470 = self.code;
                var $2471 = self.err;
                var $2472 = Parser$Reply$error$($2469, $2470, $2471);
                var $2468 = $2472;
                break;
            case 'Parser.Reply.value':
                var $2473 = self.idx;
                var $2474 = self.code;
                var $2475 = self.val;
                var self = Parser$maybe$(Kind$Parser$text("let "), $2473, $2474);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $2477 = self.idx;
                        var $2478 = self.code;
                        var $2479 = self.err;
                        var $2480 = Parser$Reply$error$($2477, $2478, $2479);
                        var $2476 = $2480;
                        break;
                    case 'Parser.Reply.value':
                        var $2481 = self.idx;
                        var $2482 = self.code;
                        var self = Kind$Parser$text$("{", $2481, $2482);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $2484 = self.idx;
                                var $2485 = self.code;
                                var $2486 = self.err;
                                var $2487 = Parser$Reply$error$($2484, $2485, $2486);
                                var $2483 = $2487;
                                break;
                            case 'Parser.Reply.value':
                                var $2488 = self.idx;
                                var $2489 = self.code;
                                var self = Kind$Parser$name$($2488, $2489);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $2491 = self.idx;
                                        var $2492 = self.code;
                                        var $2493 = self.err;
                                        var $2494 = Parser$Reply$error$($2491, $2492, $2493);
                                        var $2490 = $2494;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $2495 = self.idx;
                                        var $2496 = self.code;
                                        var $2497 = self.val;
                                        var self = Kind$Parser$text$(",", $2495, $2496);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $2499 = self.idx;
                                                var $2500 = self.code;
                                                var $2501 = self.err;
                                                var $2502 = Parser$Reply$error$($2499, $2500, $2501);
                                                var $2498 = $2502;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $2503 = self.idx;
                                                var $2504 = self.code;
                                                var self = Kind$Parser$name$($2503, $2504);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $2506 = self.idx;
                                                        var $2507 = self.code;
                                                        var $2508 = self.err;
                                                        var $2509 = Parser$Reply$error$($2506, $2507, $2508);
                                                        var $2505 = $2509;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $2510 = self.idx;
                                                        var $2511 = self.code;
                                                        var $2512 = self.val;
                                                        var self = Kind$Parser$text$("}", $2510, $2511);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $2514 = self.idx;
                                                                var $2515 = self.code;
                                                                var $2516 = self.err;
                                                                var $2517 = Parser$Reply$error$($2514, $2515, $2516);
                                                                var $2513 = $2517;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $2518 = self.idx;
                                                                var $2519 = self.code;
                                                                var self = Kind$Parser$text$("=", $2518, $2519);
                                                                switch (self._) {
                                                                    case 'Parser.Reply.error':
                                                                        var $2521 = self.idx;
                                                                        var $2522 = self.code;
                                                                        var $2523 = self.err;
                                                                        var $2524 = Parser$Reply$error$($2521, $2522, $2523);
                                                                        var $2520 = $2524;
                                                                        break;
                                                                    case 'Parser.Reply.value':
                                                                        var $2525 = self.idx;
                                                                        var $2526 = self.code;
                                                                        var self = Kind$Parser$text$("while ", $2525, $2526);
                                                                        switch (self._) {
                                                                            case 'Parser.Reply.error':
                                                                                var $2528 = self.idx;
                                                                                var $2529 = self.code;
                                                                                var $2530 = self.err;
                                                                                var $2531 = Parser$Reply$error$($2528, $2529, $2530);
                                                                                var $2527 = $2531;
                                                                                break;
                                                                            case 'Parser.Reply.value':
                                                                                var $2532 = self.idx;
                                                                                var $2533 = self.code;
                                                                                var self = Kind$Parser$term$($2532, $2533);
                                                                                switch (self._) {
                                                                                    case 'Parser.Reply.error':
                                                                                        var $2535 = self.idx;
                                                                                        var $2536 = self.code;
                                                                                        var $2537 = self.err;
                                                                                        var $2538 = Parser$Reply$error$($2535, $2536, $2537);
                                                                                        var $2534 = $2538;
                                                                                        break;
                                                                                    case 'Parser.Reply.value':
                                                                                        var $2539 = self.idx;
                                                                                        var $2540 = self.code;
                                                                                        var $2541 = self.val;
                                                                                        var self = Kind$Parser$text$(":", $2539, $2540);
                                                                                        switch (self._) {
                                                                                            case 'Parser.Reply.error':
                                                                                                var $2543 = self.idx;
                                                                                                var $2544 = self.code;
                                                                                                var $2545 = self.err;
                                                                                                var $2546 = Parser$Reply$error$($2543, $2544, $2545);
                                                                                                var $2542 = $2546;
                                                                                                break;
                                                                                            case 'Parser.Reply.value':
                                                                                                var $2547 = self.idx;
                                                                                                var $2548 = self.code;
                                                                                                var self = Kind$Parser$term$($2547, $2548);
                                                                                                switch (self._) {
                                                                                                    case 'Parser.Reply.error':
                                                                                                        var $2550 = self.idx;
                                                                                                        var $2551 = self.code;
                                                                                                        var $2552 = self.err;
                                                                                                        var $2553 = Parser$Reply$error$($2550, $2551, $2552);
                                                                                                        var $2549 = $2553;
                                                                                                        break;
                                                                                                    case 'Parser.Reply.value':
                                                                                                        var $2554 = self.idx;
                                                                                                        var $2555 = self.code;
                                                                                                        var $2556 = self.val;
                                                                                                        var self = Parser$maybe$(Kind$Parser$text(";"), $2554, $2555);
                                                                                                        switch (self._) {
                                                                                                            case 'Parser.Reply.error':
                                                                                                                var $2558 = self.idx;
                                                                                                                var $2559 = self.code;
                                                                                                                var $2560 = self.err;
                                                                                                                var $2561 = Parser$Reply$error$($2558, $2559, $2560);
                                                                                                                var $2557 = $2561;
                                                                                                                break;
                                                                                                            case 'Parser.Reply.value':
                                                                                                                var $2562 = self.idx;
                                                                                                                var $2563 = self.code;
                                                                                                                var self = Kind$Parser$term$($2562, $2563);
                                                                                                                switch (self._) {
                                                                                                                    case 'Parser.Reply.error':
                                                                                                                        var $2565 = self.idx;
                                                                                                                        var $2566 = self.code;
                                                                                                                        var $2567 = self.err;
                                                                                                                        var $2568 = Parser$Reply$error$($2565, $2566, $2567);
                                                                                                                        var $2564 = $2568;
                                                                                                                        break;
                                                                                                                    case 'Parser.Reply.value':
                                                                                                                        var $2569 = self.idx;
                                                                                                                        var $2570 = self.code;
                                                                                                                        var $2571 = self.val;
                                                                                                                        var self = Kind$Parser$stop$($2475, $2569, $2570);
                                                                                                                        switch (self._) {
                                                                                                                            case 'Parser.Reply.error':
                                                                                                                                var $2573 = self.idx;
                                                                                                                                var $2574 = self.code;
                                                                                                                                var $2575 = self.err;
                                                                                                                                var $2576 = Parser$Reply$error$($2573, $2574, $2575);
                                                                                                                                var $2572 = $2576;
                                                                                                                                break;
                                                                                                                            case 'Parser.Reply.value':
                                                                                                                                var $2577 = self.idx;
                                                                                                                                var $2578 = self.code;
                                                                                                                                var $2579 = self.val;
                                                                                                                                var _moti$48 = Kind$Term$lam$("", (_x$48 => {
                                                                                                                                    var $2581 = Kind$Term$hol$(Bits$e);
                                                                                                                                    return $2581;
                                                                                                                                }));
                                                                                                                                var _term$49 = Kind$Term$ref$("Function.while");
                                                                                                                                var _term$50 = Kind$Term$app$(_term$49, Kind$Term$hol$(Bits$e));
                                                                                                                                var _init$51 = Kind$Term$ref$("Pair.new");
                                                                                                                                var _init$52 = Kind$Term$app$(_init$51, Kind$Term$hol$(Bits$e));
                                                                                                                                var _init$53 = Kind$Term$app$(_init$52, Kind$Term$hol$(Bits$e));
                                                                                                                                var _init$54 = Kind$Term$app$(_init$53, Kind$Term$ref$($2497));
                                                                                                                                var _init$55 = Kind$Term$app$(_init$54, Kind$Term$ref$($2512));
                                                                                                                                var _term$56 = Kind$Term$app$(_term$50, _init$55);
                                                                                                                                var _term$57 = Kind$Term$app$(_term$56, Kind$Term$lam$("s", (_s$57 => {
                                                                                                                                    var $2582 = Kind$Term$app$(Kind$Term$app$(_s$57, _moti$48), Kind$Term$lam$($2497, (_x$58 => {
                                                                                                                                        var $2583 = Kind$Term$lam$($2512, (_y$59 => {
                                                                                                                                            var $2584 = $2541;
                                                                                                                                            return $2584;
                                                                                                                                        }));
                                                                                                                                        return $2583;
                                                                                                                                    })));
                                                                                                                                    return $2582;
                                                                                                                                })));
                                                                                                                                var _term$58 = Kind$Term$app$(_term$57, Kind$Term$lam$("s", (_s$58 => {
                                                                                                                                    var $2585 = Kind$Term$app$(Kind$Term$app$(_s$58, _moti$48), Kind$Term$lam$($2497, (_x$59 => {
                                                                                                                                        var $2586 = Kind$Term$lam$($2512, (_y$60 => {
                                                                                                                                            var $2587 = $2556;
                                                                                                                                            return $2587;
                                                                                                                                        }));
                                                                                                                                        return $2586;
                                                                                                                                    })));
                                                                                                                                    return $2585;
                                                                                                                                })));
                                                                                                                                var _term$59 = Kind$Term$app$(Kind$Term$app$(_term$58, _moti$48), Kind$Term$lam$($2497, (_x$59 => {
                                                                                                                                    var $2588 = Kind$Term$lam$($2512, (_y$60 => {
                                                                                                                                        var $2589 = $2571;
                                                                                                                                        return $2589;
                                                                                                                                    }));
                                                                                                                                    return $2588;
                                                                                                                                })));
                                                                                                                                var $2580 = Parser$Reply$value$($2577, $2578, Kind$Term$ori$($2579, _term$59));
                                                                                                                                var $2572 = $2580;
                                                                                                                                break;
                                                                                                                        };
                                                                                                                        var $2564 = $2572;
                                                                                                                        break;
                                                                                                                };
                                                                                                                var $2557 = $2564;
                                                                                                                break;
                                                                                                        };
                                                                                                        var $2549 = $2557;
                                                                                                        break;
                                                                                                };
                                                                                                var $2542 = $2549;
                                                                                                break;
                                                                                        };
                                                                                        var $2534 = $2542;
                                                                                        break;
                                                                                };
                                                                                var $2527 = $2534;
                                                                                break;
                                                                        };
                                                                        var $2520 = $2527;
                                                                        break;
                                                                };
                                                                var $2513 = $2520;
                                                                break;
                                                        };
                                                        var $2505 = $2513;
                                                        break;
                                                };
                                                var $2498 = $2505;
                                                break;
                                        };
                                        var $2490 = $2498;
                                        break;
                                };
                                var $2483 = $2490;
                                break;
                        };
                        var $2476 = $2483;
                        break;
                };
                var $2468 = $2476;
                break;
        };
        return $2468;
    };
    const Kind$Parser$getwhile = x0 => x1 => Kind$Parser$getwhile$(x0, x1);

    function Kind$Parser$getwhile$with$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $2591 = self.idx;
                var $2592 = self.code;
                var $2593 = self.err;
                var $2594 = Parser$Reply$error$($2591, $2592, $2593);
                var $2590 = $2594;
                break;
            case 'Parser.Reply.value':
                var $2595 = self.idx;
                var $2596 = self.code;
                var $2597 = self.val;
                var self = Kind$Parser$text$("while ", $2595, $2596);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $2599 = self.idx;
                        var $2600 = self.code;
                        var $2601 = self.err;
                        var $2602 = Parser$Reply$error$($2599, $2600, $2601);
                        var $2598 = $2602;
                        break;
                    case 'Parser.Reply.value':
                        var $2603 = self.idx;
                        var $2604 = self.code;
                        var self = Kind$Parser$term$($2603, $2604);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $2606 = self.idx;
                                var $2607 = self.code;
                                var $2608 = self.err;
                                var $2609 = Parser$Reply$error$($2606, $2607, $2608);
                                var $2605 = $2609;
                                break;
                            case 'Parser.Reply.value':
                                var $2610 = self.idx;
                                var $2611 = self.code;
                                var $2612 = self.val;
                                var self = Kind$Parser$text$("with ", $2610, $2611);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $2614 = self.idx;
                                        var $2615 = self.code;
                                        var $2616 = self.err;
                                        var $2617 = Parser$Reply$error$($2614, $2615, $2616);
                                        var $2613 = $2617;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $2618 = self.idx;
                                        var $2619 = self.code;
                                        var self = Kind$Parser$text$("{", $2618, $2619);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $2621 = self.idx;
                                                var $2622 = self.code;
                                                var $2623 = self.err;
                                                var $2624 = Parser$Reply$error$($2621, $2622, $2623);
                                                var $2620 = $2624;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $2625 = self.idx;
                                                var $2626 = self.code;
                                                var self = Kind$Parser$name$($2625, $2626);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $2628 = self.idx;
                                                        var $2629 = self.code;
                                                        var $2630 = self.err;
                                                        var $2631 = Parser$Reply$error$($2628, $2629, $2630);
                                                        var $2627 = $2631;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $2632 = self.idx;
                                                        var $2633 = self.code;
                                                        var $2634 = self.val;
                                                        var self = Kind$Parser$text$(",", $2632, $2633);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $2636 = self.idx;
                                                                var $2637 = self.code;
                                                                var $2638 = self.err;
                                                                var $2639 = Parser$Reply$error$($2636, $2637, $2638);
                                                                var $2635 = $2639;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $2640 = self.idx;
                                                                var $2641 = self.code;
                                                                var self = Kind$Parser$name$($2640, $2641);
                                                                switch (self._) {
                                                                    case 'Parser.Reply.error':
                                                                        var $2643 = self.idx;
                                                                        var $2644 = self.code;
                                                                        var $2645 = self.err;
                                                                        var $2646 = Parser$Reply$error$($2643, $2644, $2645);
                                                                        var $2642 = $2646;
                                                                        break;
                                                                    case 'Parser.Reply.value':
                                                                        var $2647 = self.idx;
                                                                        var $2648 = self.code;
                                                                        var $2649 = self.val;
                                                                        var self = Kind$Parser$text$("}", $2647, $2648);
                                                                        switch (self._) {
                                                                            case 'Parser.Reply.error':
                                                                                var $2651 = self.idx;
                                                                                var $2652 = self.code;
                                                                                var $2653 = self.err;
                                                                                var $2654 = Parser$Reply$error$($2651, $2652, $2653);
                                                                                var $2650 = $2654;
                                                                                break;
                                                                            case 'Parser.Reply.value':
                                                                                var $2655 = self.idx;
                                                                                var $2656 = self.code;
                                                                                var self = Kind$Parser$text$(":", $2655, $2656);
                                                                                switch (self._) {
                                                                                    case 'Parser.Reply.error':
                                                                                        var $2658 = self.idx;
                                                                                        var $2659 = self.code;
                                                                                        var $2660 = self.err;
                                                                                        var $2661 = Parser$Reply$error$($2658, $2659, $2660);
                                                                                        var $2657 = $2661;
                                                                                        break;
                                                                                    case 'Parser.Reply.value':
                                                                                        var $2662 = self.idx;
                                                                                        var $2663 = self.code;
                                                                                        var self = Kind$Parser$term$($2662, $2663);
                                                                                        switch (self._) {
                                                                                            case 'Parser.Reply.error':
                                                                                                var $2665 = self.idx;
                                                                                                var $2666 = self.code;
                                                                                                var $2667 = self.err;
                                                                                                var $2668 = Parser$Reply$error$($2665, $2666, $2667);
                                                                                                var $2664 = $2668;
                                                                                                break;
                                                                                            case 'Parser.Reply.value':
                                                                                                var $2669 = self.idx;
                                                                                                var $2670 = self.code;
                                                                                                var $2671 = self.val;
                                                                                                var self = Parser$maybe$(Kind$Parser$text(";"), $2669, $2670);
                                                                                                switch (self._) {
                                                                                                    case 'Parser.Reply.error':
                                                                                                        var $2673 = self.idx;
                                                                                                        var $2674 = self.code;
                                                                                                        var $2675 = self.err;
                                                                                                        var $2676 = Parser$Reply$error$($2673, $2674, $2675);
                                                                                                        var $2672 = $2676;
                                                                                                        break;
                                                                                                    case 'Parser.Reply.value':
                                                                                                        var $2677 = self.idx;
                                                                                                        var $2678 = self.code;
                                                                                                        var self = Kind$Parser$term$($2677, $2678);
                                                                                                        switch (self._) {
                                                                                                            case 'Parser.Reply.error':
                                                                                                                var $2680 = self.idx;
                                                                                                                var $2681 = self.code;
                                                                                                                var $2682 = self.err;
                                                                                                                var $2683 = Parser$Reply$error$($2680, $2681, $2682);
                                                                                                                var $2679 = $2683;
                                                                                                                break;
                                                                                                            case 'Parser.Reply.value':
                                                                                                                var $2684 = self.idx;
                                                                                                                var $2685 = self.code;
                                                                                                                var $2686 = self.val;
                                                                                                                var self = Kind$Parser$stop$($2597, $2684, $2685);
                                                                                                                switch (self._) {
                                                                                                                    case 'Parser.Reply.error':
                                                                                                                        var $2688 = self.idx;
                                                                                                                        var $2689 = self.code;
                                                                                                                        var $2690 = self.err;
                                                                                                                        var $2691 = Parser$Reply$error$($2688, $2689, $2690);
                                                                                                                        var $2687 = $2691;
                                                                                                                        break;
                                                                                                                    case 'Parser.Reply.value':
                                                                                                                        var $2692 = self.idx;
                                                                                                                        var $2693 = self.code;
                                                                                                                        var $2694 = self.val;
                                                                                                                        var _moti$45 = Kind$Term$lam$("", (_x$45 => {
                                                                                                                            var $2696 = Kind$Term$hol$(Bits$e);
                                                                                                                            return $2696;
                                                                                                                        }));
                                                                                                                        var _term$46 = Kind$Term$ref$("Function.while");
                                                                                                                        var _term$47 = Kind$Term$app$(_term$46, Kind$Term$hol$(Bits$e));
                                                                                                                        var _init$48 = Kind$Term$ref$("Pair.new");
                                                                                                                        var _init$49 = Kind$Term$app$(_init$48, Kind$Term$hol$(Bits$e));
                                                                                                                        var _init$50 = Kind$Term$app$(_init$49, Kind$Term$hol$(Bits$e));
                                                                                                                        var _init$51 = Kind$Term$app$(_init$50, Kind$Term$ref$($2634));
                                                                                                                        var _init$52 = Kind$Term$app$(_init$51, Kind$Term$ref$($2649));
                                                                                                                        var _term$53 = Kind$Term$app$(_term$47, _init$52);
                                                                                                                        var _term$54 = Kind$Term$app$(_term$53, Kind$Term$lam$("s", (_s$54 => {
                                                                                                                            var $2697 = Kind$Term$app$(Kind$Term$app$(_s$54, _moti$45), Kind$Term$lam$($2634, (_x$55 => {
                                                                                                                                var $2698 = Kind$Term$lam$($2649, (_y$56 => {
                                                                                                                                    var $2699 = $2612;
                                                                                                                                    return $2699;
                                                                                                                                }));
                                                                                                                                return $2698;
                                                                                                                            })));
                                                                                                                            return $2697;
                                                                                                                        })));
                                                                                                                        var _term$55 = Kind$Term$app$(_term$54, Kind$Term$lam$("s", (_s$55 => {
                                                                                                                            var $2700 = Kind$Term$app$(Kind$Term$app$(_s$55, _moti$45), Kind$Term$lam$($2634, (_x$56 => {
                                                                                                                                var $2701 = Kind$Term$lam$($2649, (_y$57 => {
                                                                                                                                    var $2702 = $2671;
                                                                                                                                    return $2702;
                                                                                                                                }));
                                                                                                                                return $2701;
                                                                                                                            })));
                                                                                                                            return $2700;
                                                                                                                        })));
                                                                                                                        var _term$56 = Kind$Term$app$(Kind$Term$app$(_term$55, _moti$45), Kind$Term$lam$($2634, (_x$56 => {
                                                                                                                            var $2703 = Kind$Term$lam$($2649, (_y$57 => {
                                                                                                                                var $2704 = $2686;
                                                                                                                                return $2704;
                                                                                                                            }));
                                                                                                                            return $2703;
                                                                                                                        })));
                                                                                                                        var $2695 = Parser$Reply$value$($2692, $2693, Kind$Term$ori$($2694, _term$56));
                                                                                                                        var $2687 = $2695;
                                                                                                                        break;
                                                                                                                };
                                                                                                                var $2679 = $2687;
                                                                                                                break;
                                                                                                        };
                                                                                                        var $2672 = $2679;
                                                                                                        break;
                                                                                                };
                                                                                                var $2664 = $2672;
                                                                                                break;
                                                                                        };
                                                                                        var $2657 = $2664;
                                                                                        break;
                                                                                };
                                                                                var $2650 = $2657;
                                                                                break;
                                                                        };
                                                                        var $2642 = $2650;
                                                                        break;
                                                                };
                                                                var $2635 = $2642;
                                                                break;
                                                        };
                                                        var $2627 = $2635;
                                                        break;
                                                };
                                                var $2620 = $2627;
                                                break;
                                        };
                                        var $2613 = $2620;
                                        break;
                                };
                                var $2605 = $2613;
                                break;
                        };
                        var $2598 = $2605;
                        break;
                };
                var $2590 = $2598;
                break;
        };
        return $2590;
    };
    const Kind$Parser$getwhile$with = x0 => x1 => Kind$Parser$getwhile$with$(x0, x1);

    function Kind$Parser$get$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $2706 = self.idx;
                var $2707 = self.code;
                var $2708 = self.err;
                var $2709 = Parser$Reply$error$($2706, $2707, $2708);
                var $2705 = $2709;
                break;
            case 'Parser.Reply.value':
                var $2710 = self.idx;
                var $2711 = self.code;
                var $2712 = self.val;
                var self = Kind$Parser$text$("let ", $2710, $2711);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $2714 = self.idx;
                        var $2715 = self.code;
                        var $2716 = self.err;
                        var $2717 = Parser$Reply$error$($2714, $2715, $2716);
                        var $2713 = $2717;
                        break;
                    case 'Parser.Reply.value':
                        var $2718 = self.idx;
                        var $2719 = self.code;
                        var self = Kind$Parser$text$("{", $2718, $2719);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $2721 = self.idx;
                                var $2722 = self.code;
                                var $2723 = self.err;
                                var $2724 = Parser$Reply$error$($2721, $2722, $2723);
                                var $2720 = $2724;
                                break;
                            case 'Parser.Reply.value':
                                var $2725 = self.idx;
                                var $2726 = self.code;
                                var self = Kind$Parser$name$($2725, $2726);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $2728 = self.idx;
                                        var $2729 = self.code;
                                        var $2730 = self.err;
                                        var $2731 = Parser$Reply$error$($2728, $2729, $2730);
                                        var $2727 = $2731;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $2732 = self.idx;
                                        var $2733 = self.code;
                                        var $2734 = self.val;
                                        var self = Kind$Parser$text$(",", $2732, $2733);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $2736 = self.idx;
                                                var $2737 = self.code;
                                                var $2738 = self.err;
                                                var $2739 = Parser$Reply$error$($2736, $2737, $2738);
                                                var $2735 = $2739;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $2740 = self.idx;
                                                var $2741 = self.code;
                                                var self = Kind$Parser$name$($2740, $2741);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $2743 = self.idx;
                                                        var $2744 = self.code;
                                                        var $2745 = self.err;
                                                        var $2746 = Parser$Reply$error$($2743, $2744, $2745);
                                                        var $2742 = $2746;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $2747 = self.idx;
                                                        var $2748 = self.code;
                                                        var $2749 = self.val;
                                                        var self = Kind$Parser$text$("}", $2747, $2748);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $2751 = self.idx;
                                                                var $2752 = self.code;
                                                                var $2753 = self.err;
                                                                var $2754 = Parser$Reply$error$($2751, $2752, $2753);
                                                                var $2750 = $2754;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $2755 = self.idx;
                                                                var $2756 = self.code;
                                                                var self = Kind$Parser$text$("=", $2755, $2756);
                                                                switch (self._) {
                                                                    case 'Parser.Reply.error':
                                                                        var $2758 = self.idx;
                                                                        var $2759 = self.code;
                                                                        var $2760 = self.err;
                                                                        var $2761 = Parser$Reply$error$($2758, $2759, $2760);
                                                                        var $2757 = $2761;
                                                                        break;
                                                                    case 'Parser.Reply.value':
                                                                        var $2762 = self.idx;
                                                                        var $2763 = self.code;
                                                                        var self = Kind$Parser$term$($2762, $2763);
                                                                        switch (self._) {
                                                                            case 'Parser.Reply.error':
                                                                                var $2765 = self.idx;
                                                                                var $2766 = self.code;
                                                                                var $2767 = self.err;
                                                                                var $2768 = Parser$Reply$error$($2765, $2766, $2767);
                                                                                var $2764 = $2768;
                                                                                break;
                                                                            case 'Parser.Reply.value':
                                                                                var $2769 = self.idx;
                                                                                var $2770 = self.code;
                                                                                var $2771 = self.val;
                                                                                var self = Parser$maybe$(Kind$Parser$text(";"), $2769, $2770);
                                                                                switch (self._) {
                                                                                    case 'Parser.Reply.error':
                                                                                        var $2773 = self.idx;
                                                                                        var $2774 = self.code;
                                                                                        var $2775 = self.err;
                                                                                        var $2776 = Parser$Reply$error$($2773, $2774, $2775);
                                                                                        var $2772 = $2776;
                                                                                        break;
                                                                                    case 'Parser.Reply.value':
                                                                                        var $2777 = self.idx;
                                                                                        var $2778 = self.code;
                                                                                        var self = Kind$Parser$term$($2777, $2778);
                                                                                        switch (self._) {
                                                                                            case 'Parser.Reply.error':
                                                                                                var $2780 = self.idx;
                                                                                                var $2781 = self.code;
                                                                                                var $2782 = self.err;
                                                                                                var $2783 = Parser$Reply$error$($2780, $2781, $2782);
                                                                                                var $2779 = $2783;
                                                                                                break;
                                                                                            case 'Parser.Reply.value':
                                                                                                var $2784 = self.idx;
                                                                                                var $2785 = self.code;
                                                                                                var $2786 = self.val;
                                                                                                var self = Kind$Parser$stop$($2712, $2784, $2785);
                                                                                                switch (self._) {
                                                                                                    case 'Parser.Reply.error':
                                                                                                        var $2788 = self.idx;
                                                                                                        var $2789 = self.code;
                                                                                                        var $2790 = self.err;
                                                                                                        var $2791 = Parser$Reply$error$($2788, $2789, $2790);
                                                                                                        var $2787 = $2791;
                                                                                                        break;
                                                                                                    case 'Parser.Reply.value':
                                                                                                        var $2792 = self.idx;
                                                                                                        var $2793 = self.code;
                                                                                                        var $2794 = self.val;
                                                                                                        var _term$39 = $2771;
                                                                                                        var _term$40 = Kind$Term$app$(_term$39, Kind$Term$lam$("", (_x$40 => {
                                                                                                            var $2796 = Kind$Term$hol$(Bits$e);
                                                                                                            return $2796;
                                                                                                        })));
                                                                                                        var _term$41 = Kind$Term$app$(_term$40, Kind$Term$lam$($2734, (_x$41 => {
                                                                                                            var $2797 = Kind$Term$lam$($2749, (_y$42 => {
                                                                                                                var $2798 = $2786;
                                                                                                                return $2798;
                                                                                                            }));
                                                                                                            return $2797;
                                                                                                        })));
                                                                                                        var $2795 = Parser$Reply$value$($2792, $2793, Kind$Term$ori$($2794, _term$41));
                                                                                                        var $2787 = $2795;
                                                                                                        break;
                                                                                                };
                                                                                                var $2779 = $2787;
                                                                                                break;
                                                                                        };
                                                                                        var $2772 = $2779;
                                                                                        break;
                                                                                };
                                                                                var $2764 = $2772;
                                                                                break;
                                                                        };
                                                                        var $2757 = $2764;
                                                                        break;
                                                                };
                                                                var $2750 = $2757;
                                                                break;
                                                        };
                                                        var $2742 = $2750;
                                                        break;
                                                };
                                                var $2735 = $2742;
                                                break;
                                        };
                                        var $2727 = $2735;
                                        break;
                                };
                                var $2720 = $2727;
                                break;
                        };
                        var $2713 = $2720;
                        break;
                };
                var $2705 = $2713;
                break;
        };
        return $2705;
    };
    const Kind$Parser$get = x0 => x1 => Kind$Parser$get$(x0, x1);

    function Kind$Parser$get$omit$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $2800 = self.idx;
                var $2801 = self.code;
                var $2802 = self.err;
                var $2803 = Parser$Reply$error$($2800, $2801, $2802);
                var $2799 = $2803;
                break;
            case 'Parser.Reply.value':
                var $2804 = self.idx;
                var $2805 = self.code;
                var $2806 = self.val;
                var self = Kind$Parser$text$("{", $2804, $2805);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $2808 = self.idx;
                        var $2809 = self.code;
                        var $2810 = self.err;
                        var $2811 = Parser$Reply$error$($2808, $2809, $2810);
                        var $2807 = $2811;
                        break;
                    case 'Parser.Reply.value':
                        var $2812 = self.idx;
                        var $2813 = self.code;
                        var self = Kind$Parser$name$($2812, $2813);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $2815 = self.idx;
                                var $2816 = self.code;
                                var $2817 = self.err;
                                var $2818 = Parser$Reply$error$($2815, $2816, $2817);
                                var $2814 = $2818;
                                break;
                            case 'Parser.Reply.value':
                                var $2819 = self.idx;
                                var $2820 = self.code;
                                var $2821 = self.val;
                                var self = Kind$Parser$text$(",", $2819, $2820);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $2823 = self.idx;
                                        var $2824 = self.code;
                                        var $2825 = self.err;
                                        var $2826 = Parser$Reply$error$($2823, $2824, $2825);
                                        var $2822 = $2826;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $2827 = self.idx;
                                        var $2828 = self.code;
                                        var self = Kind$Parser$name$($2827, $2828);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $2830 = self.idx;
                                                var $2831 = self.code;
                                                var $2832 = self.err;
                                                var $2833 = Parser$Reply$error$($2830, $2831, $2832);
                                                var $2829 = $2833;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $2834 = self.idx;
                                                var $2835 = self.code;
                                                var $2836 = self.val;
                                                var self = Kind$Parser$text$("}", $2834, $2835);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $2838 = self.idx;
                                                        var $2839 = self.code;
                                                        var $2840 = self.err;
                                                        var $2841 = Parser$Reply$error$($2838, $2839, $2840);
                                                        var $2837 = $2841;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $2842 = self.idx;
                                                        var $2843 = self.code;
                                                        var self = Kind$Parser$text$("= ", $2842, $2843);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $2845 = self.idx;
                                                                var $2846 = self.code;
                                                                var $2847 = self.err;
                                                                var $2848 = Parser$Reply$error$($2845, $2846, $2847);
                                                                var $2844 = $2848;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $2849 = self.idx;
                                                                var $2850 = self.code;
                                                                var self = Kind$Parser$term$($2849, $2850);
                                                                switch (self._) {
                                                                    case 'Parser.Reply.error':
                                                                        var $2852 = self.idx;
                                                                        var $2853 = self.code;
                                                                        var $2854 = self.err;
                                                                        var $2855 = Parser$Reply$error$($2852, $2853, $2854);
                                                                        var $2851 = $2855;
                                                                        break;
                                                                    case 'Parser.Reply.value':
                                                                        var $2856 = self.idx;
                                                                        var $2857 = self.code;
                                                                        var $2858 = self.val;
                                                                        var self = Parser$maybe$(Kind$Parser$text(";"), $2856, $2857);
                                                                        switch (self._) {
                                                                            case 'Parser.Reply.error':
                                                                                var $2860 = self.idx;
                                                                                var $2861 = self.code;
                                                                                var $2862 = self.err;
                                                                                var $2863 = Parser$Reply$error$($2860, $2861, $2862);
                                                                                var $2859 = $2863;
                                                                                break;
                                                                            case 'Parser.Reply.value':
                                                                                var $2864 = self.idx;
                                                                                var $2865 = self.code;
                                                                                var self = Kind$Parser$term$($2864, $2865);
                                                                                switch (self._) {
                                                                                    case 'Parser.Reply.error':
                                                                                        var $2867 = self.idx;
                                                                                        var $2868 = self.code;
                                                                                        var $2869 = self.err;
                                                                                        var $2870 = Parser$Reply$error$($2867, $2868, $2869);
                                                                                        var $2866 = $2870;
                                                                                        break;
                                                                                    case 'Parser.Reply.value':
                                                                                        var $2871 = self.idx;
                                                                                        var $2872 = self.code;
                                                                                        var $2873 = self.val;
                                                                                        var self = Kind$Parser$stop$($2806, $2871, $2872);
                                                                                        switch (self._) {
                                                                                            case 'Parser.Reply.error':
                                                                                                var $2875 = self.idx;
                                                                                                var $2876 = self.code;
                                                                                                var $2877 = self.err;
                                                                                                var $2878 = Parser$Reply$error$($2875, $2876, $2877);
                                                                                                var $2874 = $2878;
                                                                                                break;
                                                                                            case 'Parser.Reply.value':
                                                                                                var $2879 = self.idx;
                                                                                                var $2880 = self.code;
                                                                                                var $2881 = self.val;
                                                                                                var _term$36 = $2858;
                                                                                                var _term$37 = Kind$Term$app$(_term$36, Kind$Term$lam$("", (_x$37 => {
                                                                                                    var $2883 = Kind$Term$hol$(Bits$e);
                                                                                                    return $2883;
                                                                                                })));
                                                                                                var _term$38 = Kind$Term$app$(_term$37, Kind$Term$lam$($2821, (_x$38 => {
                                                                                                    var $2884 = Kind$Term$lam$($2836, (_y$39 => {
                                                                                                        var $2885 = $2873;
                                                                                                        return $2885;
                                                                                                    }));
                                                                                                    return $2884;
                                                                                                })));
                                                                                                var $2882 = Parser$Reply$value$($2879, $2880, Kind$Term$ori$($2881, _term$38));
                                                                                                var $2874 = $2882;
                                                                                                break;
                                                                                        };
                                                                                        var $2866 = $2874;
                                                                                        break;
                                                                                };
                                                                                var $2859 = $2866;
                                                                                break;
                                                                        };
                                                                        var $2851 = $2859;
                                                                        break;
                                                                };
                                                                var $2844 = $2851;
                                                                break;
                                                        };
                                                        var $2837 = $2844;
                                                        break;
                                                };
                                                var $2829 = $2837;
                                                break;
                                        };
                                        var $2822 = $2829;
                                        break;
                                };
                                var $2814 = $2822;
                                break;
                        };
                        var $2807 = $2814;
                        break;
                };
                var $2799 = $2807;
                break;
        };
        return $2799;
    };
    const Kind$Parser$get$omit = x0 => x1 => Kind$Parser$get$omit$(x0, x1);

    function Kind$Parser$def$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $2887 = self.idx;
                var $2888 = self.code;
                var $2889 = self.err;
                var $2890 = Parser$Reply$error$($2887, $2888, $2889);
                var $2886 = $2890;
                break;
            case 'Parser.Reply.value':
                var $2891 = self.idx;
                var $2892 = self.code;
                var $2893 = self.val;
                var self = Kind$Parser$text$("def ", $2891, $2892);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $2895 = self.idx;
                        var $2896 = self.code;
                        var $2897 = self.err;
                        var $2898 = Parser$Reply$error$($2895, $2896, $2897);
                        var $2894 = $2898;
                        break;
                    case 'Parser.Reply.value':
                        var $2899 = self.idx;
                        var $2900 = self.code;
                        var self = Kind$Parser$name$($2899, $2900);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $2902 = self.idx;
                                var $2903 = self.code;
                                var $2904 = self.err;
                                var $2905 = Parser$Reply$error$($2902, $2903, $2904);
                                var $2901 = $2905;
                                break;
                            case 'Parser.Reply.value':
                                var $2906 = self.idx;
                                var $2907 = self.code;
                                var $2908 = self.val;
                                var self = Kind$Parser$text$("=", $2906, $2907);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $2910 = self.idx;
                                        var $2911 = self.code;
                                        var $2912 = self.err;
                                        var $2913 = Parser$Reply$error$($2910, $2911, $2912);
                                        var $2909 = $2913;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $2914 = self.idx;
                                        var $2915 = self.code;
                                        var self = Kind$Parser$term$($2914, $2915);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $2917 = self.idx;
                                                var $2918 = self.code;
                                                var $2919 = self.err;
                                                var $2920 = Parser$Reply$error$($2917, $2918, $2919);
                                                var $2916 = $2920;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $2921 = self.idx;
                                                var $2922 = self.code;
                                                var $2923 = self.val;
                                                var self = Parser$maybe$(Kind$Parser$text(";"), $2921, $2922);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $2925 = self.idx;
                                                        var $2926 = self.code;
                                                        var $2927 = self.err;
                                                        var $2928 = Parser$Reply$error$($2925, $2926, $2927);
                                                        var $2924 = $2928;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $2929 = self.idx;
                                                        var $2930 = self.code;
                                                        var self = Kind$Parser$term$($2929, $2930);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $2932 = self.idx;
                                                                var $2933 = self.code;
                                                                var $2934 = self.err;
                                                                var $2935 = Parser$Reply$error$($2932, $2933, $2934);
                                                                var $2931 = $2935;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $2936 = self.idx;
                                                                var $2937 = self.code;
                                                                var $2938 = self.val;
                                                                var self = Kind$Parser$stop$($2893, $2936, $2937);
                                                                switch (self._) {
                                                                    case 'Parser.Reply.error':
                                                                        var $2940 = self.idx;
                                                                        var $2941 = self.code;
                                                                        var $2942 = self.err;
                                                                        var $2943 = Parser$Reply$error$($2940, $2941, $2942);
                                                                        var $2939 = $2943;
                                                                        break;
                                                                    case 'Parser.Reply.value':
                                                                        var $2944 = self.idx;
                                                                        var $2945 = self.code;
                                                                        var $2946 = self.val;
                                                                        var $2947 = Parser$Reply$value$($2944, $2945, Kind$Term$ori$($2946, Kind$Term$def$($2908, $2923, (_x$27 => {
                                                                            var $2948 = $2938;
                                                                            return $2948;
                                                                        }))));
                                                                        var $2939 = $2947;
                                                                        break;
                                                                };
                                                                var $2931 = $2939;
                                                                break;
                                                        };
                                                        var $2924 = $2931;
                                                        break;
                                                };
                                                var $2916 = $2924;
                                                break;
                                        };
                                        var $2909 = $2916;
                                        break;
                                };
                                var $2901 = $2909;
                                break;
                        };
                        var $2894 = $2901;
                        break;
                };
                var $2886 = $2894;
                break;
        };
        return $2886;
    };
    const Kind$Parser$def = x0 => x1 => Kind$Parser$def$(x0, x1);

    function Kind$Parser$goal_rewrite$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $2950 = self.idx;
                var $2951 = self.code;
                var $2952 = self.err;
                var $2953 = Parser$Reply$error$($2950, $2951, $2952);
                var $2949 = $2953;
                break;
            case 'Parser.Reply.value':
                var $2954 = self.idx;
                var $2955 = self.code;
                var $2956 = self.val;
                var self = Kind$Parser$text$("rewrite ", $2954, $2955);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $2958 = self.idx;
                        var $2959 = self.code;
                        var $2960 = self.err;
                        var $2961 = Parser$Reply$error$($2958, $2959, $2960);
                        var $2957 = $2961;
                        break;
                    case 'Parser.Reply.value':
                        var $2962 = self.idx;
                        var $2963 = self.code;
                        var self = Kind$Parser$name1$($2962, $2963);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $2965 = self.idx;
                                var $2966 = self.code;
                                var $2967 = self.err;
                                var $2968 = Parser$Reply$error$($2965, $2966, $2967);
                                var $2964 = $2968;
                                break;
                            case 'Parser.Reply.value':
                                var $2969 = self.idx;
                                var $2970 = self.code;
                                var $2971 = self.val;
                                var self = Kind$Parser$text$("in", $2969, $2970);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $2973 = self.idx;
                                        var $2974 = self.code;
                                        var $2975 = self.err;
                                        var $2976 = Parser$Reply$error$($2973, $2974, $2975);
                                        var $2972 = $2976;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $2977 = self.idx;
                                        var $2978 = self.code;
                                        var self = Kind$Parser$term$($2977, $2978);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $2980 = self.idx;
                                                var $2981 = self.code;
                                                var $2982 = self.err;
                                                var $2983 = Parser$Reply$error$($2980, $2981, $2982);
                                                var $2979 = $2983;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $2984 = self.idx;
                                                var $2985 = self.code;
                                                var $2986 = self.val;
                                                var self = Kind$Parser$text$("with", $2984, $2985);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $2988 = self.idx;
                                                        var $2989 = self.code;
                                                        var $2990 = self.err;
                                                        var $2991 = Parser$Reply$error$($2988, $2989, $2990);
                                                        var $2987 = $2991;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $2992 = self.idx;
                                                        var $2993 = self.code;
                                                        var self = Kind$Parser$term$($2992, $2993);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $2995 = self.idx;
                                                                var $2996 = self.code;
                                                                var $2997 = self.err;
                                                                var $2998 = Parser$Reply$error$($2995, $2996, $2997);
                                                                var $2994 = $2998;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $2999 = self.idx;
                                                                var $3000 = self.code;
                                                                var $3001 = self.val;
                                                                var self = Kind$Parser$term$($2999, $3000);
                                                                switch (self._) {
                                                                    case 'Parser.Reply.error':
                                                                        var $3003 = self.idx;
                                                                        var $3004 = self.code;
                                                                        var $3005 = self.err;
                                                                        var $3006 = Parser$Reply$error$($3003, $3004, $3005);
                                                                        var $3002 = $3006;
                                                                        break;
                                                                    case 'Parser.Reply.value':
                                                                        var $3007 = self.idx;
                                                                        var $3008 = self.code;
                                                                        var $3009 = self.val;
                                                                        var self = Kind$Parser$stop$($2956, $3007, $3008);
                                                                        switch (self._) {
                                                                            case 'Parser.Reply.error':
                                                                                var $3011 = self.idx;
                                                                                var $3012 = self.code;
                                                                                var $3013 = self.err;
                                                                                var $3014 = Parser$Reply$error$($3011, $3012, $3013);
                                                                                var $3010 = $3014;
                                                                                break;
                                                                            case 'Parser.Reply.value':
                                                                                var $3015 = self.idx;
                                                                                var $3016 = self.code;
                                                                                var $3017 = self.val;
                                                                                var _moti$30 = Kind$Term$lam$($2971, (_s$30 => {
                                                                                    var $3019 = Kind$Term$lam$("", (_x$31 => {
                                                                                        var $3020 = $2986;
                                                                                        return $3020;
                                                                                    }));
                                                                                    return $3019;
                                                                                }));
                                                                                var _term$31 = Kind$Term$ref$("Equal.mirror");
                                                                                var _term$32 = Kind$Term$app$(_term$31, Kind$Term$hol$(Bits$e));
                                                                                var _term$33 = Kind$Term$app$(_term$32, Kind$Term$hol$(Bits$e));
                                                                                var _term$34 = Kind$Term$app$(_term$33, Kind$Term$hol$(Bits$e));
                                                                                var _term$35 = Kind$Term$app$(_term$34, $3001);
                                                                                var _term$36 = Kind$Term$app$(_term$35, _moti$30);
                                                                                var _term$37 = Kind$Term$app$(_term$36, $3009);
                                                                                var $3018 = Parser$Reply$value$($3015, $3016, Kind$Term$ori$($3017, _term$37));
                                                                                var $3010 = $3018;
                                                                                break;
                                                                        };
                                                                        var $3002 = $3010;
                                                                        break;
                                                                };
                                                                var $2994 = $3002;
                                                                break;
                                                        };
                                                        var $2987 = $2994;
                                                        break;
                                                };
                                                var $2979 = $2987;
                                                break;
                                        };
                                        var $2972 = $2979;
                                        break;
                                };
                                var $2964 = $2972;
                                break;
                        };
                        var $2957 = $2964;
                        break;
                };
                var $2949 = $2957;
                break;
        };
        return $2949;
    };
    const Kind$Parser$goal_rewrite = x0 => x1 => Kind$Parser$goal_rewrite$(x0, x1);

    function Kind$Parser$if$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3022 = self.idx;
                var $3023 = self.code;
                var $3024 = self.err;
                var $3025 = Parser$Reply$error$($3022, $3023, $3024);
                var $3021 = $3025;
                break;
            case 'Parser.Reply.value':
                var $3026 = self.idx;
                var $3027 = self.code;
                var $3028 = self.val;
                var self = Kind$Parser$text$("if ", $3026, $3027);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $3030 = self.idx;
                        var $3031 = self.code;
                        var $3032 = self.err;
                        var $3033 = Parser$Reply$error$($3030, $3031, $3032);
                        var $3029 = $3033;
                        break;
                    case 'Parser.Reply.value':
                        var $3034 = self.idx;
                        var $3035 = self.code;
                        var self = Kind$Parser$term$($3034, $3035);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $3037 = self.idx;
                                var $3038 = self.code;
                                var $3039 = self.err;
                                var $3040 = Parser$Reply$error$($3037, $3038, $3039);
                                var $3036 = $3040;
                                break;
                            case 'Parser.Reply.value':
                                var $3041 = self.idx;
                                var $3042 = self.code;
                                var $3043 = self.val;
                                var self = Kind$Parser$text$("then", $3041, $3042);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $3045 = self.idx;
                                        var $3046 = self.code;
                                        var $3047 = self.err;
                                        var $3048 = Parser$Reply$error$($3045, $3046, $3047);
                                        var $3044 = $3048;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $3049 = self.idx;
                                        var $3050 = self.code;
                                        var self = Kind$Parser$term$($3049, $3050);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $3052 = self.idx;
                                                var $3053 = self.code;
                                                var $3054 = self.err;
                                                var $3055 = Parser$Reply$error$($3052, $3053, $3054);
                                                var $3051 = $3055;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $3056 = self.idx;
                                                var $3057 = self.code;
                                                var $3058 = self.val;
                                                var self = Kind$Parser$text$("else", $3056, $3057);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $3060 = self.idx;
                                                        var $3061 = self.code;
                                                        var $3062 = self.err;
                                                        var $3063 = Parser$Reply$error$($3060, $3061, $3062);
                                                        var $3059 = $3063;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $3064 = self.idx;
                                                        var $3065 = self.code;
                                                        var self = Kind$Parser$term$($3064, $3065);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $3067 = self.idx;
                                                                var $3068 = self.code;
                                                                var $3069 = self.err;
                                                                var $3070 = Parser$Reply$error$($3067, $3068, $3069);
                                                                var $3066 = $3070;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $3071 = self.idx;
                                                                var $3072 = self.code;
                                                                var $3073 = self.val;
                                                                var self = Kind$Parser$stop$($3028, $3071, $3072);
                                                                switch (self._) {
                                                                    case 'Parser.Reply.error':
                                                                        var $3075 = self.idx;
                                                                        var $3076 = self.code;
                                                                        var $3077 = self.err;
                                                                        var $3078 = Parser$Reply$error$($3075, $3076, $3077);
                                                                        var $3074 = $3078;
                                                                        break;
                                                                    case 'Parser.Reply.value':
                                                                        var $3079 = self.idx;
                                                                        var $3080 = self.code;
                                                                        var $3081 = self.val;
                                                                        var _term$27 = $3043;
                                                                        var _term$28 = Kind$Term$app$(_term$27, Kind$Term$lam$("", (_x$28 => {
                                                                            var $3083 = Kind$Term$hol$(Bits$e);
                                                                            return $3083;
                                                                        })));
                                                                        var _term$29 = Kind$Term$app$(_term$28, $3058);
                                                                        var _term$30 = Kind$Term$app$(_term$29, $3073);
                                                                        var $3082 = Parser$Reply$value$($3079, $3080, Kind$Term$ori$($3081, _term$30));
                                                                        var $3074 = $3082;
                                                                        break;
                                                                };
                                                                var $3066 = $3074;
                                                                break;
                                                        };
                                                        var $3059 = $3066;
                                                        break;
                                                };
                                                var $3051 = $3059;
                                                break;
                                        };
                                        var $3044 = $3051;
                                        break;
                                };
                                var $3036 = $3044;
                                break;
                        };
                        var $3029 = $3036;
                        break;
                };
                var $3021 = $3029;
                break;
        };
        return $3021;
    };
    const Kind$Parser$if = x0 => x1 => Kind$Parser$if$(x0, x1);
    const Kind$Code$backslash = 92;
    const Kind$Code$escapes = List$cons$(Pair$new$("\\b", 8), List$cons$(Pair$new$("\\f", 12), List$cons$(Pair$new$("\\n", 10), List$cons$(Pair$new$("\\r", 13), List$cons$(Pair$new$("\\t", 9), List$cons$(Pair$new$("\\v", 11), List$cons$(Pair$new$(String$cons$(Kind$Code$backslash, String$cons$(Kind$Code$backslash, String$nil)), Kind$Code$backslash), List$cons$(Pair$new$("\\\"", 34), List$cons$(Pair$new$("\\0", 0), List$cons$(Pair$new$("\\\'", 39), List$nil))))))))));
    const Kind$Parser$char$single = Parser$first_of$(List$cons$(Parser$first_of$(List$mapped$(Kind$Code$escapes, (_esc$1 => {
        var self = _esc$1;
        switch (self._) {
            case 'Pair.new':
                var $3085 = self.fst;
                var $3086 = self.snd;
                var $3087 = (_idx$4 => _code$5 => {
                    var self = Parser$text$($3085, _idx$4, _code$5);
                    switch (self._) {
                        case 'Parser.Reply.error':
                            var $3089 = self.idx;
                            var $3090 = self.code;
                            var $3091 = self.err;
                            var $3092 = Parser$Reply$error$($3089, $3090, $3091);
                            var $3088 = $3092;
                            break;
                        case 'Parser.Reply.value':
                            var $3093 = self.idx;
                            var $3094 = self.code;
                            var $3095 = Parser$Reply$value$($3093, $3094, $3086);
                            var $3088 = $3095;
                            break;
                    };
                    return $3088;
                });
                var $3084 = $3087;
                break;
        };
        return $3084;
    }))), List$cons$(Parser$one, List$nil)));

    function Kind$Parser$char$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3097 = self.idx;
                var $3098 = self.code;
                var $3099 = self.err;
                var $3100 = Parser$Reply$error$($3097, $3098, $3099);
                var $3096 = $3100;
                break;
            case 'Parser.Reply.value':
                var $3101 = self.idx;
                var $3102 = self.code;
                var $3103 = self.val;
                var self = Kind$Parser$text$("\'", $3101, $3102);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $3105 = self.idx;
                        var $3106 = self.code;
                        var $3107 = self.err;
                        var $3108 = Parser$Reply$error$($3105, $3106, $3107);
                        var $3104 = $3108;
                        break;
                    case 'Parser.Reply.value':
                        var $3109 = self.idx;
                        var $3110 = self.code;
                        var self = Kind$Parser$char$single($3109)($3110);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $3112 = self.idx;
                                var $3113 = self.code;
                                var $3114 = self.err;
                                var $3115 = Parser$Reply$error$($3112, $3113, $3114);
                                var $3111 = $3115;
                                break;
                            case 'Parser.Reply.value':
                                var $3116 = self.idx;
                                var $3117 = self.code;
                                var $3118 = self.val;
                                var self = Parser$text$("\'", $3116, $3117);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $3120 = self.idx;
                                        var $3121 = self.code;
                                        var $3122 = self.err;
                                        var $3123 = Parser$Reply$error$($3120, $3121, $3122);
                                        var $3119 = $3123;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $3124 = self.idx;
                                        var $3125 = self.code;
                                        var self = Kind$Parser$stop$($3103, $3124, $3125);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $3127 = self.idx;
                                                var $3128 = self.code;
                                                var $3129 = self.err;
                                                var $3130 = Parser$Reply$error$($3127, $3128, $3129);
                                                var $3126 = $3130;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $3131 = self.idx;
                                                var $3132 = self.code;
                                                var $3133 = self.val;
                                                var $3134 = Parser$Reply$value$($3131, $3132, Kind$Term$ori$($3133, Kind$Term$chr$($3118)));
                                                var $3126 = $3134;
                                                break;
                                        };
                                        var $3119 = $3126;
                                        break;
                                };
                                var $3111 = $3119;
                                break;
                        };
                        var $3104 = $3111;
                        break;
                };
                var $3096 = $3104;
                break;
        };
        return $3096;
    };
    const Kind$Parser$char = x0 => x1 => Kind$Parser$char$(x0, x1);

    function String$reverse$go$(_xs$1, _res$2) {
        var String$reverse$go$ = (_xs$1, _res$2) => ({
            ctr: 'TCO',
            arg: [_xs$1, _res$2]
        });
        var String$reverse$go = _xs$1 => _res$2 => String$reverse$go$(_xs$1, _res$2);
        var arg = [_xs$1, _res$2];
        while (true) {
            let [_xs$1, _res$2] = arg;
            var R = (() => {
                var self = _xs$1;
                if (self.length === 0) {
                    var $3135 = _res$2;
                    return $3135;
                } else {
                    var $3136 = self.charCodeAt(0);
                    var $3137 = self.slice(1);
                    var $3138 = String$reverse$go$($3137, String$cons$($3136, _res$2));
                    return $3138;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const String$reverse$go = x0 => x1 => String$reverse$go$(x0, x1);

    function String$reverse$(_xs$1) {
        var $3139 = String$reverse$go$(_xs$1, String$nil);
        return $3139;
    };
    const String$reverse = x0 => String$reverse$(x0);

    function Kind$Parser$string$go$(_delim$1, _str$2, _idx$3, _code$4) {
        var Kind$Parser$string$go$ = (_delim$1, _str$2, _idx$3, _code$4) => ({
            ctr: 'TCO',
            arg: [_delim$1, _str$2, _idx$3, _code$4]
        });
        var Kind$Parser$string$go = _delim$1 => _str$2 => _idx$3 => _code$4 => Kind$Parser$string$go$(_delim$1, _str$2, _idx$3, _code$4);
        var arg = [_delim$1, _str$2, _idx$3, _code$4];
        while (true) {
            let [_delim$1, _str$2, _idx$3, _code$4] = arg;
            var R = (() => {
                var self = _code$4;
                if (self.length === 0) {
                    var $3140 = Parser$Reply$error$(_idx$3, _code$4, "Non-terminating string.");
                    return $3140;
                } else {
                    var $3141 = self.charCodeAt(0);
                    var $3142 = self.slice(1);
                    var self = ($3141 === _delim$1);
                    if (self) {
                        var $3144 = Parser$Reply$value$(Nat$succ$(_idx$3), $3142, String$reverse$(_str$2));
                        var $3143 = $3144;
                    } else {
                        var self = Kind$Parser$char$single(_idx$3)(_code$4);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $3146 = self.idx;
                                var $3147 = self.code;
                                var $3148 = self.err;
                                var $3149 = Parser$Reply$error$($3146, $3147, $3148);
                                var $3145 = $3149;
                                break;
                            case 'Parser.Reply.value':
                                var $3150 = self.idx;
                                var $3151 = self.code;
                                var $3152 = self.val;
                                var $3153 = Kind$Parser$string$go$(_delim$1, String$cons$($3152, _str$2), $3150, $3151);
                                var $3145 = $3153;
                                break;
                        };
                        var $3143 = $3145;
                    };
                    return $3143;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Kind$Parser$string$go = x0 => x1 => x2 => x3 => Kind$Parser$string$go$(x0, x1, x2, x3);

    function Kind$Parser$string$(_delim$1, _idx$2, _code$3) {
        var self = Kind$Parser$init$(_idx$2, _code$3);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3155 = self.idx;
                var $3156 = self.code;
                var $3157 = self.err;
                var $3158 = Parser$Reply$error$($3155, $3156, $3157);
                var $3154 = $3158;
                break;
            case 'Parser.Reply.value':
                var $3159 = self.idx;
                var $3160 = self.code;
                var $3161 = self.val;
                var self = Kind$Parser$text$(String$cons$(_delim$1, String$nil), $3159, $3160);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $3163 = self.idx;
                        var $3164 = self.code;
                        var $3165 = self.err;
                        var $3166 = Parser$Reply$error$($3163, $3164, $3165);
                        var $3162 = $3166;
                        break;
                    case 'Parser.Reply.value':
                        var $3167 = self.idx;
                        var $3168 = self.code;
                        var self = Kind$Parser$string$go$(_delim$1, "", $3167, $3168);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $3170 = self.idx;
                                var $3171 = self.code;
                                var $3172 = self.err;
                                var $3173 = Parser$Reply$error$($3170, $3171, $3172);
                                var $3169 = $3173;
                                break;
                            case 'Parser.Reply.value':
                                var $3174 = self.idx;
                                var $3175 = self.code;
                                var $3176 = self.val;
                                var self = Kind$Parser$stop$($3161, $3174, $3175);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $3178 = self.idx;
                                        var $3179 = self.code;
                                        var $3180 = self.err;
                                        var $3181 = Parser$Reply$error$($3178, $3179, $3180);
                                        var $3177 = $3181;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $3182 = self.idx;
                                        var $3183 = self.code;
                                        var $3184 = self.val;
                                        var $3185 = Parser$Reply$value$($3182, $3183, Kind$Term$ori$($3184, Kind$Term$str$($3176)));
                                        var $3177 = $3185;
                                        break;
                                };
                                var $3169 = $3177;
                                break;
                        };
                        var $3162 = $3169;
                        break;
                };
                var $3154 = $3162;
                break;
        };
        return $3154;
    };
    const Kind$Parser$string = x0 => x1 => x2 => Kind$Parser$string$(x0, x1, x2);

    function Kind$Parser$pair$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3187 = self.idx;
                var $3188 = self.code;
                var $3189 = self.err;
                var $3190 = Parser$Reply$error$($3187, $3188, $3189);
                var $3186 = $3190;
                break;
            case 'Parser.Reply.value':
                var $3191 = self.idx;
                var $3192 = self.code;
                var $3193 = self.val;
                var self = Kind$Parser$text$("{", $3191, $3192);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $3195 = self.idx;
                        var $3196 = self.code;
                        var $3197 = self.err;
                        var $3198 = Parser$Reply$error$($3195, $3196, $3197);
                        var $3194 = $3198;
                        break;
                    case 'Parser.Reply.value':
                        var $3199 = self.idx;
                        var $3200 = self.code;
                        var self = Kind$Parser$term$($3199, $3200);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $3202 = self.idx;
                                var $3203 = self.code;
                                var $3204 = self.err;
                                var $3205 = Parser$Reply$error$($3202, $3203, $3204);
                                var $3201 = $3205;
                                break;
                            case 'Parser.Reply.value':
                                var $3206 = self.idx;
                                var $3207 = self.code;
                                var $3208 = self.val;
                                var self = Parser$maybe$(Kind$Parser$text(","), $3206, $3207);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $3210 = self.idx;
                                        var $3211 = self.code;
                                        var $3212 = self.err;
                                        var $3213 = Parser$Reply$error$($3210, $3211, $3212);
                                        var $3209 = $3213;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $3214 = self.idx;
                                        var $3215 = self.code;
                                        var self = Kind$Parser$term$($3214, $3215);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $3217 = self.idx;
                                                var $3218 = self.code;
                                                var $3219 = self.err;
                                                var $3220 = Parser$Reply$error$($3217, $3218, $3219);
                                                var $3216 = $3220;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $3221 = self.idx;
                                                var $3222 = self.code;
                                                var $3223 = self.val;
                                                var self = Parser$maybe$(Kind$Parser$text(","), $3221, $3222);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $3225 = self.idx;
                                                        var $3226 = self.code;
                                                        var $3227 = self.err;
                                                        var $3228 = Parser$Reply$error$($3225, $3226, $3227);
                                                        var $3224 = $3228;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $3229 = self.idx;
                                                        var $3230 = self.code;
                                                        var self = Kind$Parser$text$("}", $3229, $3230);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $3232 = self.idx;
                                                                var $3233 = self.code;
                                                                var $3234 = self.err;
                                                                var $3235 = Parser$Reply$error$($3232, $3233, $3234);
                                                                var $3231 = $3235;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $3236 = self.idx;
                                                                var $3237 = self.code;
                                                                var self = Kind$Parser$stop$($3193, $3236, $3237);
                                                                switch (self._) {
                                                                    case 'Parser.Reply.error':
                                                                        var $3239 = self.idx;
                                                                        var $3240 = self.code;
                                                                        var $3241 = self.err;
                                                                        var $3242 = Parser$Reply$error$($3239, $3240, $3241);
                                                                        var $3238 = $3242;
                                                                        break;
                                                                    case 'Parser.Reply.value':
                                                                        var $3243 = self.idx;
                                                                        var $3244 = self.code;
                                                                        var $3245 = self.val;
                                                                        var _term$27 = Kind$Term$ref$("Pair.new");
                                                                        var _term$28 = Kind$Term$app$(_term$27, Kind$Term$hol$(Bits$e));
                                                                        var _term$29 = Kind$Term$app$(_term$28, Kind$Term$hol$(Bits$e));
                                                                        var _term$30 = Kind$Term$app$(_term$29, $3208);
                                                                        var _term$31 = Kind$Term$app$(_term$30, $3223);
                                                                        var $3246 = Parser$Reply$value$($3243, $3244, Kind$Term$ori$($3245, _term$31));
                                                                        var $3238 = $3246;
                                                                        break;
                                                                };
                                                                var $3231 = $3238;
                                                                break;
                                                        };
                                                        var $3224 = $3231;
                                                        break;
                                                };
                                                var $3216 = $3224;
                                                break;
                                        };
                                        var $3209 = $3216;
                                        break;
                                };
                                var $3201 = $3209;
                                break;
                        };
                        var $3194 = $3201;
                        break;
                };
                var $3186 = $3194;
                break;
        };
        return $3186;
    };
    const Kind$Parser$pair = x0 => x1 => Kind$Parser$pair$(x0, x1);

    function Kind$Parser$sigma$type$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3248 = self.idx;
                var $3249 = self.code;
                var $3250 = self.err;
                var $3251 = Parser$Reply$error$($3248, $3249, $3250);
                var $3247 = $3251;
                break;
            case 'Parser.Reply.value':
                var $3252 = self.idx;
                var $3253 = self.code;
                var $3254 = self.val;
                var self = Kind$Parser$text$("[", $3252, $3253);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $3256 = self.idx;
                        var $3257 = self.code;
                        var $3258 = self.err;
                        var $3259 = Parser$Reply$error$($3256, $3257, $3258);
                        var $3255 = $3259;
                        break;
                    case 'Parser.Reply.value':
                        var $3260 = self.idx;
                        var $3261 = self.code;
                        var self = Kind$Parser$name1$($3260, $3261);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $3263 = self.idx;
                                var $3264 = self.code;
                                var $3265 = self.err;
                                var $3266 = Parser$Reply$error$($3263, $3264, $3265);
                                var $3262 = $3266;
                                break;
                            case 'Parser.Reply.value':
                                var $3267 = self.idx;
                                var $3268 = self.code;
                                var $3269 = self.val;
                                var self = Kind$Parser$text$(":", $3267, $3268);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $3271 = self.idx;
                                        var $3272 = self.code;
                                        var $3273 = self.err;
                                        var $3274 = Parser$Reply$error$($3271, $3272, $3273);
                                        var $3270 = $3274;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $3275 = self.idx;
                                        var $3276 = self.code;
                                        var self = Kind$Parser$term$($3275, $3276);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $3278 = self.idx;
                                                var $3279 = self.code;
                                                var $3280 = self.err;
                                                var $3281 = Parser$Reply$error$($3278, $3279, $3280);
                                                var $3277 = $3281;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $3282 = self.idx;
                                                var $3283 = self.code;
                                                var $3284 = self.val;
                                                var self = Kind$Parser$text$("]", $3282, $3283);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $3286 = self.idx;
                                                        var $3287 = self.code;
                                                        var $3288 = self.err;
                                                        var $3289 = Parser$Reply$error$($3286, $3287, $3288);
                                                        var $3285 = $3289;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $3290 = self.idx;
                                                        var $3291 = self.code;
                                                        var self = Kind$Parser$term$($3290, $3291);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $3293 = self.idx;
                                                                var $3294 = self.code;
                                                                var $3295 = self.err;
                                                                var $3296 = Parser$Reply$error$($3293, $3294, $3295);
                                                                var $3292 = $3296;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $3297 = self.idx;
                                                                var $3298 = self.code;
                                                                var $3299 = self.val;
                                                                var self = Kind$Parser$stop$($3254, $3297, $3298);
                                                                switch (self._) {
                                                                    case 'Parser.Reply.error':
                                                                        var $3301 = self.idx;
                                                                        var $3302 = self.code;
                                                                        var $3303 = self.err;
                                                                        var $3304 = Parser$Reply$error$($3301, $3302, $3303);
                                                                        var $3300 = $3304;
                                                                        break;
                                                                    case 'Parser.Reply.value':
                                                                        var $3305 = self.idx;
                                                                        var $3306 = self.code;
                                                                        var $3307 = self.val;
                                                                        var _term$27 = Kind$Term$ref$("Sigma");
                                                                        var _term$28 = Kind$Term$app$(_term$27, $3284);
                                                                        var _term$29 = Kind$Term$app$(_term$28, Kind$Term$lam$($3269, (_x$29 => {
                                                                            var $3309 = $3299;
                                                                            return $3309;
                                                                        })));
                                                                        var $3308 = Parser$Reply$value$($3305, $3306, Kind$Term$ori$($3307, _term$29));
                                                                        var $3300 = $3308;
                                                                        break;
                                                                };
                                                                var $3292 = $3300;
                                                                break;
                                                        };
                                                        var $3285 = $3292;
                                                        break;
                                                };
                                                var $3277 = $3285;
                                                break;
                                        };
                                        var $3270 = $3277;
                                        break;
                                };
                                var $3262 = $3270;
                                break;
                        };
                        var $3255 = $3262;
                        break;
                };
                var $3247 = $3255;
                break;
        };
        return $3247;
    };
    const Kind$Parser$sigma$type = x0 => x1 => Kind$Parser$sigma$type$(x0, x1);

    function Kind$Parser$some$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3311 = self.idx;
                var $3312 = self.code;
                var $3313 = self.err;
                var $3314 = Parser$Reply$error$($3311, $3312, $3313);
                var $3310 = $3314;
                break;
            case 'Parser.Reply.value':
                var $3315 = self.idx;
                var $3316 = self.code;
                var $3317 = self.val;
                var self = Kind$Parser$text$("some(", $3315, $3316);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $3319 = self.idx;
                        var $3320 = self.code;
                        var $3321 = self.err;
                        var $3322 = Parser$Reply$error$($3319, $3320, $3321);
                        var $3318 = $3322;
                        break;
                    case 'Parser.Reply.value':
                        var $3323 = self.idx;
                        var $3324 = self.code;
                        var self = Kind$Parser$term$($3323, $3324);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $3326 = self.idx;
                                var $3327 = self.code;
                                var $3328 = self.err;
                                var $3329 = Parser$Reply$error$($3326, $3327, $3328);
                                var $3325 = $3329;
                                break;
                            case 'Parser.Reply.value':
                                var $3330 = self.idx;
                                var $3331 = self.code;
                                var $3332 = self.val;
                                var self = Kind$Parser$text$(")", $3330, $3331);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $3334 = self.idx;
                                        var $3335 = self.code;
                                        var $3336 = self.err;
                                        var $3337 = Parser$Reply$error$($3334, $3335, $3336);
                                        var $3333 = $3337;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $3338 = self.idx;
                                        var $3339 = self.code;
                                        var self = Kind$Parser$stop$($3317, $3338, $3339);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $3341 = self.idx;
                                                var $3342 = self.code;
                                                var $3343 = self.err;
                                                var $3344 = Parser$Reply$error$($3341, $3342, $3343);
                                                var $3340 = $3344;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $3345 = self.idx;
                                                var $3346 = self.code;
                                                var $3347 = self.val;
                                                var _term$18 = Kind$Term$ref$("Maybe.some");
                                                var _term$19 = Kind$Term$app$(_term$18, Kind$Term$hol$(Bits$e));
                                                var _term$20 = Kind$Term$app$(_term$19, $3332);
                                                var $3348 = Parser$Reply$value$($3345, $3346, Kind$Term$ori$($3347, _term$20));
                                                var $3340 = $3348;
                                                break;
                                        };
                                        var $3333 = $3340;
                                        break;
                                };
                                var $3325 = $3333;
                                break;
                        };
                        var $3318 = $3325;
                        break;
                };
                var $3310 = $3318;
                break;
        };
        return $3310;
    };
    const Kind$Parser$some = x0 => x1 => Kind$Parser$some$(x0, x1);

    function Kind$Parser$not$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3350 = self.idx;
                var $3351 = self.code;
                var $3352 = self.err;
                var $3353 = Parser$Reply$error$($3350, $3351, $3352);
                var $3349 = $3353;
                break;
            case 'Parser.Reply.value':
                var $3354 = self.idx;
                var $3355 = self.code;
                var $3356 = self.val;
                var self = Kind$Parser$text$("not(", $3354, $3355);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $3358 = self.idx;
                        var $3359 = self.code;
                        var $3360 = self.err;
                        var $3361 = Parser$Reply$error$($3358, $3359, $3360);
                        var $3357 = $3361;
                        break;
                    case 'Parser.Reply.value':
                        var $3362 = self.idx;
                        var $3363 = self.code;
                        var self = Kind$Parser$term$($3362, $3363);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $3365 = self.idx;
                                var $3366 = self.code;
                                var $3367 = self.err;
                                var $3368 = Parser$Reply$error$($3365, $3366, $3367);
                                var $3364 = $3368;
                                break;
                            case 'Parser.Reply.value':
                                var $3369 = self.idx;
                                var $3370 = self.code;
                                var $3371 = self.val;
                                var self = Kind$Parser$text$(")", $3369, $3370);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $3373 = self.idx;
                                        var $3374 = self.code;
                                        var $3375 = self.err;
                                        var $3376 = Parser$Reply$error$($3373, $3374, $3375);
                                        var $3372 = $3376;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $3377 = self.idx;
                                        var $3378 = self.code;
                                        var self = Kind$Parser$stop$($3356, $3377, $3378);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $3380 = self.idx;
                                                var $3381 = self.code;
                                                var $3382 = self.err;
                                                var $3383 = Parser$Reply$error$($3380, $3381, $3382);
                                                var $3379 = $3383;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $3384 = self.idx;
                                                var $3385 = self.code;
                                                var $3386 = self.val;
                                                var _term$18 = Kind$Term$ref$("Bool.not");
                                                var _term$19 = Kind$Term$app$(_term$18, $3371);
                                                var $3387 = Parser$Reply$value$($3384, $3385, Kind$Term$ori$($3386, _term$19));
                                                var $3379 = $3387;
                                                break;
                                        };
                                        var $3372 = $3379;
                                        break;
                                };
                                var $3364 = $3372;
                                break;
                        };
                        var $3357 = $3364;
                        break;
                };
                var $3349 = $3357;
                break;
        };
        return $3349;
    };
    const Kind$Parser$not = x0 => x1 => Kind$Parser$not$(x0, x1);

    function Kind$Parser$left$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3389 = self.idx;
                var $3390 = self.code;
                var $3391 = self.err;
                var $3392 = Parser$Reply$error$($3389, $3390, $3391);
                var $3388 = $3392;
                break;
            case 'Parser.Reply.value':
                var $3393 = self.idx;
                var $3394 = self.code;
                var $3395 = self.val;
                var self = Kind$Parser$text$("left(", $3393, $3394);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $3397 = self.idx;
                        var $3398 = self.code;
                        var $3399 = self.err;
                        var $3400 = Parser$Reply$error$($3397, $3398, $3399);
                        var $3396 = $3400;
                        break;
                    case 'Parser.Reply.value':
                        var $3401 = self.idx;
                        var $3402 = self.code;
                        var self = Kind$Parser$term$($3401, $3402);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $3404 = self.idx;
                                var $3405 = self.code;
                                var $3406 = self.err;
                                var $3407 = Parser$Reply$error$($3404, $3405, $3406);
                                var $3403 = $3407;
                                break;
                            case 'Parser.Reply.value':
                                var $3408 = self.idx;
                                var $3409 = self.code;
                                var $3410 = self.val;
                                var self = Kind$Parser$text$(")", $3408, $3409);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $3412 = self.idx;
                                        var $3413 = self.code;
                                        var $3414 = self.err;
                                        var $3415 = Parser$Reply$error$($3412, $3413, $3414);
                                        var $3411 = $3415;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $3416 = self.idx;
                                        var $3417 = self.code;
                                        var self = Kind$Parser$stop$($3395, $3416, $3417);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $3419 = self.idx;
                                                var $3420 = self.code;
                                                var $3421 = self.err;
                                                var $3422 = Parser$Reply$error$($3419, $3420, $3421);
                                                var $3418 = $3422;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $3423 = self.idx;
                                                var $3424 = self.code;
                                                var $3425 = self.val;
                                                var _term$18 = Kind$Term$ref$("Either.left");
                                                var _term$19 = Kind$Term$app$(_term$18, Kind$Term$hol$(Bits$e));
                                                var _term$20 = Kind$Term$app$(_term$19, Kind$Term$hol$(Bits$e));
                                                var _term$21 = Kind$Term$app$(_term$20, $3410);
                                                var $3426 = Parser$Reply$value$($3423, $3424, Kind$Term$ori$($3425, _term$21));
                                                var $3418 = $3426;
                                                break;
                                        };
                                        var $3411 = $3418;
                                        break;
                                };
                                var $3403 = $3411;
                                break;
                        };
                        var $3396 = $3403;
                        break;
                };
                var $3388 = $3396;
                break;
        };
        return $3388;
    };
    const Kind$Parser$left = x0 => x1 => Kind$Parser$left$(x0, x1);

    function Kind$Parser$right$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3428 = self.idx;
                var $3429 = self.code;
                var $3430 = self.err;
                var $3431 = Parser$Reply$error$($3428, $3429, $3430);
                var $3427 = $3431;
                break;
            case 'Parser.Reply.value':
                var $3432 = self.idx;
                var $3433 = self.code;
                var $3434 = self.val;
                var self = Kind$Parser$text$("right(", $3432, $3433);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $3436 = self.idx;
                        var $3437 = self.code;
                        var $3438 = self.err;
                        var $3439 = Parser$Reply$error$($3436, $3437, $3438);
                        var $3435 = $3439;
                        break;
                    case 'Parser.Reply.value':
                        var $3440 = self.idx;
                        var $3441 = self.code;
                        var self = Kind$Parser$term$($3440, $3441);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $3443 = self.idx;
                                var $3444 = self.code;
                                var $3445 = self.err;
                                var $3446 = Parser$Reply$error$($3443, $3444, $3445);
                                var $3442 = $3446;
                                break;
                            case 'Parser.Reply.value':
                                var $3447 = self.idx;
                                var $3448 = self.code;
                                var $3449 = self.val;
                                var self = Kind$Parser$text$(")", $3447, $3448);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $3451 = self.idx;
                                        var $3452 = self.code;
                                        var $3453 = self.err;
                                        var $3454 = Parser$Reply$error$($3451, $3452, $3453);
                                        var $3450 = $3454;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $3455 = self.idx;
                                        var $3456 = self.code;
                                        var self = Kind$Parser$stop$($3434, $3455, $3456);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $3458 = self.idx;
                                                var $3459 = self.code;
                                                var $3460 = self.err;
                                                var $3461 = Parser$Reply$error$($3458, $3459, $3460);
                                                var $3457 = $3461;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $3462 = self.idx;
                                                var $3463 = self.code;
                                                var $3464 = self.val;
                                                var _term$18 = Kind$Term$ref$("Either.right");
                                                var _term$19 = Kind$Term$app$(_term$18, Kind$Term$hol$(Bits$e));
                                                var _term$20 = Kind$Term$app$(_term$19, Kind$Term$hol$(Bits$e));
                                                var _term$21 = Kind$Term$app$(_term$20, $3449);
                                                var $3465 = Parser$Reply$value$($3462, $3463, Kind$Term$ori$($3464, _term$21));
                                                var $3457 = $3465;
                                                break;
                                        };
                                        var $3450 = $3457;
                                        break;
                                };
                                var $3442 = $3450;
                                break;
                        };
                        var $3435 = $3442;
                        break;
                };
                var $3427 = $3435;
                break;
        };
        return $3427;
    };
    const Kind$Parser$right = x0 => x1 => Kind$Parser$right$(x0, x1);

    function Kind$Parser$apply$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3467 = self.idx;
                var $3468 = self.code;
                var $3469 = self.err;
                var $3470 = Parser$Reply$error$($3467, $3468, $3469);
                var $3466 = $3470;
                break;
            case 'Parser.Reply.value':
                var $3471 = self.idx;
                var $3472 = self.code;
                var $3473 = self.val;
                var self = Kind$Parser$text$("apply(", $3471, $3472);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $3475 = self.idx;
                        var $3476 = self.code;
                        var $3477 = self.err;
                        var $3478 = Parser$Reply$error$($3475, $3476, $3477);
                        var $3474 = $3478;
                        break;
                    case 'Parser.Reply.value':
                        var $3479 = self.idx;
                        var $3480 = self.code;
                        var self = Kind$Parser$term$($3479, $3480);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $3482 = self.idx;
                                var $3483 = self.code;
                                var $3484 = self.err;
                                var $3485 = Parser$Reply$error$($3482, $3483, $3484);
                                var $3481 = $3485;
                                break;
                            case 'Parser.Reply.value':
                                var $3486 = self.idx;
                                var $3487 = self.code;
                                var $3488 = self.val;
                                var self = Kind$Parser$text$(",", $3486, $3487);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $3490 = self.idx;
                                        var $3491 = self.code;
                                        var $3492 = self.err;
                                        var $3493 = Parser$Reply$error$($3490, $3491, $3492);
                                        var $3489 = $3493;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $3494 = self.idx;
                                        var $3495 = self.code;
                                        var self = Kind$Parser$term$($3494, $3495);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $3497 = self.idx;
                                                var $3498 = self.code;
                                                var $3499 = self.err;
                                                var $3500 = Parser$Reply$error$($3497, $3498, $3499);
                                                var $3496 = $3500;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $3501 = self.idx;
                                                var $3502 = self.code;
                                                var $3503 = self.val;
                                                var self = Kind$Parser$text$(")", $3501, $3502);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $3505 = self.idx;
                                                        var $3506 = self.code;
                                                        var $3507 = self.err;
                                                        var $3508 = Parser$Reply$error$($3505, $3506, $3507);
                                                        var $3504 = $3508;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $3509 = self.idx;
                                                        var $3510 = self.code;
                                                        var self = Kind$Parser$stop$($3473, $3509, $3510);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $3512 = self.idx;
                                                                var $3513 = self.code;
                                                                var $3514 = self.err;
                                                                var $3515 = Parser$Reply$error$($3512, $3513, $3514);
                                                                var $3511 = $3515;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $3516 = self.idx;
                                                                var $3517 = self.code;
                                                                var $3518 = self.val;
                                                                var _term$24 = Kind$Term$ref$("Equal.apply");
                                                                var _term$25 = Kind$Term$app$(_term$24, Kind$Term$hol$(Bits$e));
                                                                var _term$26 = Kind$Term$app$(_term$25, Kind$Term$hol$(Bits$e));
                                                                var _term$27 = Kind$Term$app$(_term$26, Kind$Term$hol$(Bits$e));
                                                                var _term$28 = Kind$Term$app$(_term$27, Kind$Term$hol$(Bits$e));
                                                                var _term$29 = Kind$Term$app$(_term$28, $3488);
                                                                var _term$30 = Kind$Term$app$(_term$29, $3503);
                                                                var $3519 = Parser$Reply$value$($3516, $3517, Kind$Term$ori$($3518, _term$30));
                                                                var $3511 = $3519;
                                                                break;
                                                        };
                                                        var $3504 = $3511;
                                                        break;
                                                };
                                                var $3496 = $3504;
                                                break;
                                        };
                                        var $3489 = $3496;
                                        break;
                                };
                                var $3481 = $3489;
                                break;
                        };
                        var $3474 = $3481;
                        break;
                };
                var $3466 = $3474;
                break;
        };
        return $3466;
    };
    const Kind$Parser$apply = x0 => x1 => Kind$Parser$apply$(x0, x1);

    function Kind$Parser$chain$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3521 = self.idx;
                var $3522 = self.code;
                var $3523 = self.err;
                var $3524 = Parser$Reply$error$($3521, $3522, $3523);
                var $3520 = $3524;
                break;
            case 'Parser.Reply.value':
                var $3525 = self.idx;
                var $3526 = self.code;
                var $3527 = self.val;
                var self = Kind$Parser$text$("chain(", $3525, $3526);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $3529 = self.idx;
                        var $3530 = self.code;
                        var $3531 = self.err;
                        var $3532 = Parser$Reply$error$($3529, $3530, $3531);
                        var $3528 = $3532;
                        break;
                    case 'Parser.Reply.value':
                        var $3533 = self.idx;
                        var $3534 = self.code;
                        var self = Kind$Parser$term$($3533, $3534);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $3536 = self.idx;
                                var $3537 = self.code;
                                var $3538 = self.err;
                                var $3539 = Parser$Reply$error$($3536, $3537, $3538);
                                var $3535 = $3539;
                                break;
                            case 'Parser.Reply.value':
                                var $3540 = self.idx;
                                var $3541 = self.code;
                                var $3542 = self.val;
                                var self = Kind$Parser$text$(",", $3540, $3541);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $3544 = self.idx;
                                        var $3545 = self.code;
                                        var $3546 = self.err;
                                        var $3547 = Parser$Reply$error$($3544, $3545, $3546);
                                        var $3543 = $3547;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $3548 = self.idx;
                                        var $3549 = self.code;
                                        var self = Kind$Parser$term$($3548, $3549);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $3551 = self.idx;
                                                var $3552 = self.code;
                                                var $3553 = self.err;
                                                var $3554 = Parser$Reply$error$($3551, $3552, $3553);
                                                var $3550 = $3554;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $3555 = self.idx;
                                                var $3556 = self.code;
                                                var $3557 = self.val;
                                                var self = Kind$Parser$text$(")", $3555, $3556);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $3559 = self.idx;
                                                        var $3560 = self.code;
                                                        var $3561 = self.err;
                                                        var $3562 = Parser$Reply$error$($3559, $3560, $3561);
                                                        var $3558 = $3562;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $3563 = self.idx;
                                                        var $3564 = self.code;
                                                        var self = Kind$Parser$stop$($3527, $3563, $3564);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $3566 = self.idx;
                                                                var $3567 = self.code;
                                                                var $3568 = self.err;
                                                                var $3569 = Parser$Reply$error$($3566, $3567, $3568);
                                                                var $3565 = $3569;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $3570 = self.idx;
                                                                var $3571 = self.code;
                                                                var $3572 = self.val;
                                                                var _term$24 = Kind$Term$ref$("Equal.chain");
                                                                var _term$25 = Kind$Term$app$(_term$24, Kind$Term$hol$(Bits$e));
                                                                var _term$26 = Kind$Term$app$(_term$25, Kind$Term$hol$(Bits$e));
                                                                var _term$27 = Kind$Term$app$(_term$26, Kind$Term$hol$(Bits$e));
                                                                var _term$28 = Kind$Term$app$(_term$27, Kind$Term$hol$(Bits$e));
                                                                var _term$29 = Kind$Term$app$(_term$28, $3542);
                                                                var _term$30 = Kind$Term$app$(_term$29, $3557);
                                                                var $3573 = Parser$Reply$value$($3570, $3571, Kind$Term$ori$($3572, _term$30));
                                                                var $3565 = $3573;
                                                                break;
                                                        };
                                                        var $3558 = $3565;
                                                        break;
                                                };
                                                var $3550 = $3558;
                                                break;
                                        };
                                        var $3543 = $3550;
                                        break;
                                };
                                var $3535 = $3543;
                                break;
                        };
                        var $3528 = $3535;
                        break;
                };
                var $3520 = $3528;
                break;
        };
        return $3520;
    };
    const Kind$Parser$chain = x0 => x1 => Kind$Parser$chain$(x0, x1);

    function Kind$Parser$mirror$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3575 = self.idx;
                var $3576 = self.code;
                var $3577 = self.err;
                var $3578 = Parser$Reply$error$($3575, $3576, $3577);
                var $3574 = $3578;
                break;
            case 'Parser.Reply.value':
                var $3579 = self.idx;
                var $3580 = self.code;
                var $3581 = self.val;
                var self = Kind$Parser$text$("mirror(", $3579, $3580);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $3583 = self.idx;
                        var $3584 = self.code;
                        var $3585 = self.err;
                        var $3586 = Parser$Reply$error$($3583, $3584, $3585);
                        var $3582 = $3586;
                        break;
                    case 'Parser.Reply.value':
                        var $3587 = self.idx;
                        var $3588 = self.code;
                        var self = Kind$Parser$term$($3587, $3588);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $3590 = self.idx;
                                var $3591 = self.code;
                                var $3592 = self.err;
                                var $3593 = Parser$Reply$error$($3590, $3591, $3592);
                                var $3589 = $3593;
                                break;
                            case 'Parser.Reply.value':
                                var $3594 = self.idx;
                                var $3595 = self.code;
                                var $3596 = self.val;
                                var self = Kind$Parser$text$(")", $3594, $3595);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $3598 = self.idx;
                                        var $3599 = self.code;
                                        var $3600 = self.err;
                                        var $3601 = Parser$Reply$error$($3598, $3599, $3600);
                                        var $3597 = $3601;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $3602 = self.idx;
                                        var $3603 = self.code;
                                        var self = Kind$Parser$stop$($3581, $3602, $3603);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $3605 = self.idx;
                                                var $3606 = self.code;
                                                var $3607 = self.err;
                                                var $3608 = Parser$Reply$error$($3605, $3606, $3607);
                                                var $3604 = $3608;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $3609 = self.idx;
                                                var $3610 = self.code;
                                                var $3611 = self.val;
                                                var _term$18 = Kind$Term$ref$("Equal.mirror");
                                                var _term$19 = Kind$Term$app$(_term$18, Kind$Term$hol$(Bits$e));
                                                var _term$20 = Kind$Term$app$(_term$19, Kind$Term$hol$(Bits$e));
                                                var _term$21 = Kind$Term$app$(_term$20, Kind$Term$hol$(Bits$e));
                                                var _term$22 = Kind$Term$app$(_term$21, $3596);
                                                var $3612 = Parser$Reply$value$($3609, $3610, Kind$Term$ori$($3611, _term$22));
                                                var $3604 = $3612;
                                                break;
                                        };
                                        var $3597 = $3604;
                                        break;
                                };
                                var $3589 = $3597;
                                break;
                        };
                        var $3582 = $3589;
                        break;
                };
                var $3574 = $3582;
                break;
        };
        return $3574;
    };
    const Kind$Parser$mirror = x0 => x1 => Kind$Parser$mirror$(x0, x1);

    function Kind$Name$read$(_str$1) {
        var $3613 = _str$1;
        return $3613;
    };
    const Kind$Name$read = x0 => Kind$Name$read$(x0);

    function Kind$Parser$list$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3615 = self.idx;
                var $3616 = self.code;
                var $3617 = self.err;
                var $3618 = Parser$Reply$error$($3615, $3616, $3617);
                var $3614 = $3618;
                break;
            case 'Parser.Reply.value':
                var $3619 = self.idx;
                var $3620 = self.code;
                var $3621 = self.val;
                var self = Kind$Parser$text$("[", $3619, $3620);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $3623 = self.idx;
                        var $3624 = self.code;
                        var $3625 = self.err;
                        var $3626 = Parser$Reply$error$($3623, $3624, $3625);
                        var $3622 = $3626;
                        break;
                    case 'Parser.Reply.value':
                        var $3627 = self.idx;
                        var $3628 = self.code;
                        var self = Parser$until$(Kind$Parser$text("]"), Kind$Parser$item(Kind$Parser$term))($3627)($3628);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $3630 = self.idx;
                                var $3631 = self.code;
                                var $3632 = self.err;
                                var $3633 = Parser$Reply$error$($3630, $3631, $3632);
                                var $3629 = $3633;
                                break;
                            case 'Parser.Reply.value':
                                var $3634 = self.idx;
                                var $3635 = self.code;
                                var $3636 = self.val;
                                var self = Kind$Parser$stop$($3621, $3634, $3635);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $3638 = self.idx;
                                        var $3639 = self.code;
                                        var $3640 = self.err;
                                        var $3641 = Parser$Reply$error$($3638, $3639, $3640);
                                        var $3637 = $3641;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $3642 = self.idx;
                                        var $3643 = self.code;
                                        var $3644 = self.val;
                                        var $3645 = Parser$Reply$value$($3642, $3643, List$fold$($3636, Kind$Term$ori$($3644, Kind$Term$app$(Kind$Term$ref$(Kind$Name$read$("List.nil")), Kind$Term$hol$(Bits$e))), (_x$15 => _xs$16 => {
                                            var _term$17 = Kind$Term$ref$(Kind$Name$read$("List.cons"));
                                            var _term$18 = Kind$Term$app$(_term$17, Kind$Term$hol$(Bits$e));
                                            var _term$19 = Kind$Term$app$(_term$18, _x$15);
                                            var _term$20 = Kind$Term$app$(_term$19, _xs$16);
                                            var $3646 = Kind$Term$ori$($3644, _term$20);
                                            return $3646;
                                        })));
                                        var $3637 = $3645;
                                        break;
                                };
                                var $3629 = $3637;
                                break;
                        };
                        var $3622 = $3629;
                        break;
                };
                var $3614 = $3622;
                break;
        };
        return $3614;
    };
    const Kind$Parser$list = x0 => x1 => Kind$Parser$list$(x0, x1);

    function Kind$Parser$map$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3648 = self.idx;
                var $3649 = self.code;
                var $3650 = self.err;
                var $3651 = Parser$Reply$error$($3648, $3649, $3650);
                var $3647 = $3651;
                break;
            case 'Parser.Reply.value':
                var $3652 = self.idx;
                var $3653 = self.code;
                var $3654 = self.val;
                var self = Kind$Parser$text$("{", $3652, $3653);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $3656 = self.idx;
                        var $3657 = self.code;
                        var $3658 = self.err;
                        var $3659 = Parser$Reply$error$($3656, $3657, $3658);
                        var $3655 = $3659;
                        break;
                    case 'Parser.Reply.value':
                        var $3660 = self.idx;
                        var $3661 = self.code;
                        var self = Parser$until$(Kind$Parser$text("}"), Kind$Parser$item((_idx$9 => _code$10 => {
                            var self = Kind$Parser$term$(_idx$9, _code$10);
                            switch (self._) {
                                case 'Parser.Reply.error':
                                    var $3664 = self.idx;
                                    var $3665 = self.code;
                                    var $3666 = self.err;
                                    var $3667 = Parser$Reply$error$($3664, $3665, $3666);
                                    var $3663 = $3667;
                                    break;
                                case 'Parser.Reply.value':
                                    var $3668 = self.idx;
                                    var $3669 = self.code;
                                    var $3670 = self.val;
                                    var self = Kind$Parser$text$(":", $3668, $3669);
                                    switch (self._) {
                                        case 'Parser.Reply.error':
                                            var $3672 = self.idx;
                                            var $3673 = self.code;
                                            var $3674 = self.err;
                                            var $3675 = Parser$Reply$error$($3672, $3673, $3674);
                                            var $3671 = $3675;
                                            break;
                                        case 'Parser.Reply.value':
                                            var $3676 = self.idx;
                                            var $3677 = self.code;
                                            var self = Kind$Parser$term$($3676, $3677);
                                            switch (self._) {
                                                case 'Parser.Reply.error':
                                                    var $3679 = self.idx;
                                                    var $3680 = self.code;
                                                    var $3681 = self.err;
                                                    var $3682 = Parser$Reply$error$($3679, $3680, $3681);
                                                    var $3678 = $3682;
                                                    break;
                                                case 'Parser.Reply.value':
                                                    var $3683 = self.idx;
                                                    var $3684 = self.code;
                                                    var $3685 = self.val;
                                                    var $3686 = Parser$Reply$value$($3683, $3684, Pair$new$($3670, $3685));
                                                    var $3678 = $3686;
                                                    break;
                                            };
                                            var $3671 = $3678;
                                            break;
                                    };
                                    var $3663 = $3671;
                                    break;
                            };
                            return $3663;
                        })))($3660)($3661);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $3687 = self.idx;
                                var $3688 = self.code;
                                var $3689 = self.err;
                                var $3690 = Parser$Reply$error$($3687, $3688, $3689);
                                var $3662 = $3690;
                                break;
                            case 'Parser.Reply.value':
                                var $3691 = self.idx;
                                var $3692 = self.code;
                                var $3693 = self.val;
                                var self = Kind$Parser$stop$($3654, $3691, $3692);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $3695 = self.idx;
                                        var $3696 = self.code;
                                        var $3697 = self.err;
                                        var $3698 = Parser$Reply$error$($3695, $3696, $3697);
                                        var $3694 = $3698;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $3699 = self.idx;
                                        var $3700 = self.code;
                                        var $3701 = self.val;
                                        var _list$15 = List$fold$($3693, Kind$Term$ori$($3701, Kind$Term$app$(Kind$Term$ref$("List.nil"), Kind$Term$hol$(Bits$e))), (_kv$15 => _xs$16 => {
                                            var self = _kv$15;
                                            switch (self._) {
                                                case 'Pair.new':
                                                    var $3704 = self.fst;
                                                    var $3705 = self.snd;
                                                    var _pair$19 = Kind$Term$ref$("Pair.new");
                                                    var _pair$20 = Kind$Term$app$(_pair$19, Kind$Term$hol$(Bits$e));
                                                    var _pair$21 = Kind$Term$app$(_pair$20, Kind$Term$hol$(Bits$e));
                                                    var _pair$22 = Kind$Term$app$(_pair$21, $3704);
                                                    var _pair$23 = Kind$Term$app$(_pair$22, $3705);
                                                    var _term$24 = Kind$Term$ref$("List.cons");
                                                    var _term$25 = Kind$Term$app$(_term$24, Kind$Term$hol$(Bits$e));
                                                    var _term$26 = Kind$Term$app$(_term$25, _pair$23);
                                                    var _term$27 = Kind$Term$app$(_term$26, _xs$16);
                                                    var $3706 = Kind$Term$ori$($3701, _term$27);
                                                    var $3703 = $3706;
                                                    break;
                                            };
                                            return $3703;
                                        }));
                                        var _term$16 = Kind$Term$ref$("Map.from_list");
                                        var _term$17 = Kind$Term$app$(_term$16, Kind$Term$hol$(Bits$e));
                                        var _term$18 = Kind$Term$app$(_term$17, _list$15);
                                        var $3702 = Parser$Reply$value$($3699, $3700, Kind$Term$ori$($3701, _term$18));
                                        var $3694 = $3702;
                                        break;
                                };
                                var $3662 = $3694;
                                break;
                        };
                        var $3655 = $3662;
                        break;
                };
                var $3647 = $3655;
                break;
        };
        return $3647;
    };
    const Kind$Parser$map = x0 => x1 => Kind$Parser$map$(x0, x1);

    function Kind$Parser$log$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3708 = self.idx;
                var $3709 = self.code;
                var $3710 = self.err;
                var $3711 = Parser$Reply$error$($3708, $3709, $3710);
                var $3707 = $3711;
                break;
            case 'Parser.Reply.value':
                var $3712 = self.idx;
                var $3713 = self.code;
                var $3714 = self.val;
                var self = Kind$Parser$text$("log(", $3712, $3713);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $3716 = self.idx;
                        var $3717 = self.code;
                        var $3718 = self.err;
                        var $3719 = Parser$Reply$error$($3716, $3717, $3718);
                        var $3715 = $3719;
                        break;
                    case 'Parser.Reply.value':
                        var $3720 = self.idx;
                        var $3721 = self.code;
                        var self = Parser$until$(Kind$Parser$text(")"), Kind$Parser$item(Kind$Parser$term))($3720)($3721);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $3723 = self.idx;
                                var $3724 = self.code;
                                var $3725 = self.err;
                                var $3726 = Parser$Reply$error$($3723, $3724, $3725);
                                var $3722 = $3726;
                                break;
                            case 'Parser.Reply.value':
                                var $3727 = self.idx;
                                var $3728 = self.code;
                                var $3729 = self.val;
                                var self = Kind$Parser$term$($3727, $3728);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $3731 = self.idx;
                                        var $3732 = self.code;
                                        var $3733 = self.err;
                                        var $3734 = Parser$Reply$error$($3731, $3732, $3733);
                                        var $3730 = $3734;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $3735 = self.idx;
                                        var $3736 = self.code;
                                        var $3737 = self.val;
                                        var _term$15 = Kind$Term$ref$("Debug.log");
                                        var _term$16 = Kind$Term$app$(_term$15, Kind$Term$hol$(Bits$e));
                                        var _args$17 = List$fold$($3729, Kind$Term$ref$("String.nil"), (_x$17 => _xs$18 => {
                                            var _arg$19 = Kind$Term$ref$("String.concat");
                                            var _arg$20 = Kind$Term$app$(_arg$19, _x$17);
                                            var _arg$21 = Kind$Term$app$(_arg$20, _xs$18);
                                            var $3739 = _arg$21;
                                            return $3739;
                                        }));
                                        var _term$18 = Kind$Term$app$(_term$16, _args$17);
                                        var _term$19 = Kind$Term$app$(_term$18, Kind$Term$lam$("", (_x$19 => {
                                            var $3740 = $3737;
                                            return $3740;
                                        })));
                                        var self = Kind$Parser$stop$($3714, $3735, $3736);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $3741 = self.idx;
                                                var $3742 = self.code;
                                                var $3743 = self.err;
                                                var $3744 = Parser$Reply$error$($3741, $3742, $3743);
                                                var $3738 = $3744;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $3745 = self.idx;
                                                var $3746 = self.code;
                                                var $3747 = self.val;
                                                var $3748 = Parser$Reply$value$($3745, $3746, Kind$Term$ori$($3747, _term$19));
                                                var $3738 = $3748;
                                                break;
                                        };
                                        var $3730 = $3738;
                                        break;
                                };
                                var $3722 = $3730;
                                break;
                        };
                        var $3715 = $3722;
                        break;
                };
                var $3707 = $3715;
                break;
        };
        return $3707;
    };
    const Kind$Parser$log = x0 => x1 => Kind$Parser$log$(x0, x1);

    function Kind$Parser$do$statements$(_monad_name$1) {
        var $3749 = Parser$first_of$(List$cons$((_idx$2 => _code$3 => {
            var self = Kind$Parser$init$(_idx$2, _code$3);
            switch (self._) {
                case 'Parser.Reply.error':
                    var $3751 = self.idx;
                    var $3752 = self.code;
                    var $3753 = self.err;
                    var $3754 = Parser$Reply$error$($3751, $3752, $3753);
                    var $3750 = $3754;
                    break;
                case 'Parser.Reply.value':
                    var $3755 = self.idx;
                    var $3756 = self.code;
                    var $3757 = self.val;
                    var self = Parser$first_of$(List$cons$(Kind$Parser$text("var "), List$cons$(Kind$Parser$text("get "), List$nil)))($3755)($3756);
                    switch (self._) {
                        case 'Parser.Reply.error':
                            var $3759 = self.idx;
                            var $3760 = self.code;
                            var $3761 = self.err;
                            var $3762 = Parser$Reply$error$($3759, $3760, $3761);
                            var $3758 = $3762;
                            break;
                        case 'Parser.Reply.value':
                            var $3763 = self.idx;
                            var $3764 = self.code;
                            var self = Kind$Parser$name1$($3763, $3764);
                            switch (self._) {
                                case 'Parser.Reply.error':
                                    var $3766 = self.idx;
                                    var $3767 = self.code;
                                    var $3768 = self.err;
                                    var $3769 = Parser$Reply$error$($3766, $3767, $3768);
                                    var $3765 = $3769;
                                    break;
                                case 'Parser.Reply.value':
                                    var $3770 = self.idx;
                                    var $3771 = self.code;
                                    var $3772 = self.val;
                                    var self = Kind$Parser$text$("=", $3770, $3771);
                                    switch (self._) {
                                        case 'Parser.Reply.error':
                                            var $3774 = self.idx;
                                            var $3775 = self.code;
                                            var $3776 = self.err;
                                            var $3777 = Parser$Reply$error$($3774, $3775, $3776);
                                            var $3773 = $3777;
                                            break;
                                        case 'Parser.Reply.value':
                                            var $3778 = self.idx;
                                            var $3779 = self.code;
                                            var self = Kind$Parser$term$($3778, $3779);
                                            switch (self._) {
                                                case 'Parser.Reply.error':
                                                    var $3781 = self.idx;
                                                    var $3782 = self.code;
                                                    var $3783 = self.err;
                                                    var $3784 = Parser$Reply$error$($3781, $3782, $3783);
                                                    var $3780 = $3784;
                                                    break;
                                                case 'Parser.Reply.value':
                                                    var $3785 = self.idx;
                                                    var $3786 = self.code;
                                                    var $3787 = self.val;
                                                    var self = Parser$maybe$(Kind$Parser$text(";"), $3785, $3786);
                                                    switch (self._) {
                                                        case 'Parser.Reply.error':
                                                            var $3789 = self.idx;
                                                            var $3790 = self.code;
                                                            var $3791 = self.err;
                                                            var $3792 = Parser$Reply$error$($3789, $3790, $3791);
                                                            var $3788 = $3792;
                                                            break;
                                                        case 'Parser.Reply.value':
                                                            var $3793 = self.idx;
                                                            var $3794 = self.code;
                                                            var self = Kind$Parser$do$statements$(_monad_name$1)($3793)($3794);
                                                            switch (self._) {
                                                                case 'Parser.Reply.error':
                                                                    var $3796 = self.idx;
                                                                    var $3797 = self.code;
                                                                    var $3798 = self.err;
                                                                    var $3799 = Parser$Reply$error$($3796, $3797, $3798);
                                                                    var $3795 = $3799;
                                                                    break;
                                                                case 'Parser.Reply.value':
                                                                    var $3800 = self.idx;
                                                                    var $3801 = self.code;
                                                                    var $3802 = self.val;
                                                                    var self = Kind$Parser$stop$($3757, $3800, $3801);
                                                                    switch (self._) {
                                                                        case 'Parser.Reply.error':
                                                                            var $3804 = self.idx;
                                                                            var $3805 = self.code;
                                                                            var $3806 = self.err;
                                                                            var $3807 = Parser$Reply$error$($3804, $3805, $3806);
                                                                            var $3803 = $3807;
                                                                            break;
                                                                        case 'Parser.Reply.value':
                                                                            var $3808 = self.idx;
                                                                            var $3809 = self.code;
                                                                            var $3810 = self.val;
                                                                            var _term$28 = Kind$Term$app$(Kind$Term$ref$("Monad.bind"), Kind$Term$ref$(_monad_name$1));
                                                                            var _term$29 = Kind$Term$app$(_term$28, Kind$Term$ref$((_monad_name$1 + ".monad")));
                                                                            var _term$30 = Kind$Term$app$(_term$29, Kind$Term$hol$(Bits$e));
                                                                            var _term$31 = Kind$Term$app$(_term$30, Kind$Term$hol$(Bits$e));
                                                                            var _term$32 = Kind$Term$app$(_term$31, $3787);
                                                                            var _term$33 = Kind$Term$app$(_term$32, Kind$Term$lam$($3772, (_x$33 => {
                                                                                var $3812 = $3802;
                                                                                return $3812;
                                                                            })));
                                                                            var $3811 = Parser$Reply$value$($3808, $3809, Kind$Term$ori$($3810, _term$33));
                                                                            var $3803 = $3811;
                                                                            break;
                                                                    };
                                                                    var $3795 = $3803;
                                                                    break;
                                                            };
                                                            var $3788 = $3795;
                                                            break;
                                                    };
                                                    var $3780 = $3788;
                                                    break;
                                            };
                                            var $3773 = $3780;
                                            break;
                                    };
                                    var $3765 = $3773;
                                    break;
                            };
                            var $3758 = $3765;
                            break;
                    };
                    var $3750 = $3758;
                    break;
            };
            return $3750;
        }), List$cons$((_idx$2 => _code$3 => {
            var self = Kind$Parser$init$(_idx$2, _code$3);
            switch (self._) {
                case 'Parser.Reply.error':
                    var $3814 = self.idx;
                    var $3815 = self.code;
                    var $3816 = self.err;
                    var $3817 = Parser$Reply$error$($3814, $3815, $3816);
                    var $3813 = $3817;
                    break;
                case 'Parser.Reply.value':
                    var $3818 = self.idx;
                    var $3819 = self.code;
                    var $3820 = self.val;
                    var self = Kind$Parser$text$("let ", $3818, $3819);
                    switch (self._) {
                        case 'Parser.Reply.error':
                            var $3822 = self.idx;
                            var $3823 = self.code;
                            var $3824 = self.err;
                            var $3825 = Parser$Reply$error$($3822, $3823, $3824);
                            var $3821 = $3825;
                            break;
                        case 'Parser.Reply.value':
                            var $3826 = self.idx;
                            var $3827 = self.code;
                            var self = Kind$Parser$name1$($3826, $3827);
                            switch (self._) {
                                case 'Parser.Reply.error':
                                    var $3829 = self.idx;
                                    var $3830 = self.code;
                                    var $3831 = self.err;
                                    var $3832 = Parser$Reply$error$($3829, $3830, $3831);
                                    var $3828 = $3832;
                                    break;
                                case 'Parser.Reply.value':
                                    var $3833 = self.idx;
                                    var $3834 = self.code;
                                    var $3835 = self.val;
                                    var self = Kind$Parser$text$("=", $3833, $3834);
                                    switch (self._) {
                                        case 'Parser.Reply.error':
                                            var $3837 = self.idx;
                                            var $3838 = self.code;
                                            var $3839 = self.err;
                                            var $3840 = Parser$Reply$error$($3837, $3838, $3839);
                                            var $3836 = $3840;
                                            break;
                                        case 'Parser.Reply.value':
                                            var $3841 = self.idx;
                                            var $3842 = self.code;
                                            var self = Kind$Parser$term$($3841, $3842);
                                            switch (self._) {
                                                case 'Parser.Reply.error':
                                                    var $3844 = self.idx;
                                                    var $3845 = self.code;
                                                    var $3846 = self.err;
                                                    var $3847 = Parser$Reply$error$($3844, $3845, $3846);
                                                    var $3843 = $3847;
                                                    break;
                                                case 'Parser.Reply.value':
                                                    var $3848 = self.idx;
                                                    var $3849 = self.code;
                                                    var $3850 = self.val;
                                                    var self = Parser$maybe$(Kind$Parser$text(";"), $3848, $3849);
                                                    switch (self._) {
                                                        case 'Parser.Reply.error':
                                                            var $3852 = self.idx;
                                                            var $3853 = self.code;
                                                            var $3854 = self.err;
                                                            var $3855 = Parser$Reply$error$($3852, $3853, $3854);
                                                            var $3851 = $3855;
                                                            break;
                                                        case 'Parser.Reply.value':
                                                            var $3856 = self.idx;
                                                            var $3857 = self.code;
                                                            var self = Kind$Parser$do$statements$(_monad_name$1)($3856)($3857);
                                                            switch (self._) {
                                                                case 'Parser.Reply.error':
                                                                    var $3859 = self.idx;
                                                                    var $3860 = self.code;
                                                                    var $3861 = self.err;
                                                                    var $3862 = Parser$Reply$error$($3859, $3860, $3861);
                                                                    var $3858 = $3862;
                                                                    break;
                                                                case 'Parser.Reply.value':
                                                                    var $3863 = self.idx;
                                                                    var $3864 = self.code;
                                                                    var $3865 = self.val;
                                                                    var self = Kind$Parser$stop$($3820, $3863, $3864);
                                                                    switch (self._) {
                                                                        case 'Parser.Reply.error':
                                                                            var $3867 = self.idx;
                                                                            var $3868 = self.code;
                                                                            var $3869 = self.err;
                                                                            var $3870 = Parser$Reply$error$($3867, $3868, $3869);
                                                                            var $3866 = $3870;
                                                                            break;
                                                                        case 'Parser.Reply.value':
                                                                            var $3871 = self.idx;
                                                                            var $3872 = self.code;
                                                                            var $3873 = self.val;
                                                                            var $3874 = Parser$Reply$value$($3871, $3872, Kind$Term$ori$($3873, Kind$Term$let$($3835, $3850, (_x$28 => {
                                                                                var $3875 = $3865;
                                                                                return $3875;
                                                                            }))));
                                                                            var $3866 = $3874;
                                                                            break;
                                                                    };
                                                                    var $3858 = $3866;
                                                                    break;
                                                            };
                                                            var $3851 = $3858;
                                                            break;
                                                    };
                                                    var $3843 = $3851;
                                                    break;
                                            };
                                            var $3836 = $3843;
                                            break;
                                    };
                                    var $3828 = $3836;
                                    break;
                            };
                            var $3821 = $3828;
                            break;
                    };
                    var $3813 = $3821;
                    break;
            };
            return $3813;
        }), List$cons$((_idx$2 => _code$3 => {
            var self = Kind$Parser$init$(_idx$2, _code$3);
            switch (self._) {
                case 'Parser.Reply.error':
                    var $3877 = self.idx;
                    var $3878 = self.code;
                    var $3879 = self.err;
                    var $3880 = Parser$Reply$error$($3877, $3878, $3879);
                    var $3876 = $3880;
                    break;
                case 'Parser.Reply.value':
                    var $3881 = self.idx;
                    var $3882 = self.code;
                    var $3883 = self.val;
                    var self = Kind$Parser$text$("return ", $3881, $3882);
                    switch (self._) {
                        case 'Parser.Reply.error':
                            var $3885 = self.idx;
                            var $3886 = self.code;
                            var $3887 = self.err;
                            var $3888 = Parser$Reply$error$($3885, $3886, $3887);
                            var $3884 = $3888;
                            break;
                        case 'Parser.Reply.value':
                            var $3889 = self.idx;
                            var $3890 = self.code;
                            var self = Kind$Parser$term$($3889, $3890);
                            switch (self._) {
                                case 'Parser.Reply.error':
                                    var $3892 = self.idx;
                                    var $3893 = self.code;
                                    var $3894 = self.err;
                                    var $3895 = Parser$Reply$error$($3892, $3893, $3894);
                                    var $3891 = $3895;
                                    break;
                                case 'Parser.Reply.value':
                                    var $3896 = self.idx;
                                    var $3897 = self.code;
                                    var $3898 = self.val;
                                    var self = Parser$maybe$(Kind$Parser$text(";"), $3896, $3897);
                                    switch (self._) {
                                        case 'Parser.Reply.error':
                                            var $3900 = self.idx;
                                            var $3901 = self.code;
                                            var $3902 = self.err;
                                            var $3903 = Parser$Reply$error$($3900, $3901, $3902);
                                            var $3899 = $3903;
                                            break;
                                        case 'Parser.Reply.value':
                                            var $3904 = self.idx;
                                            var $3905 = self.code;
                                            var self = Kind$Parser$stop$($3883, $3904, $3905);
                                            switch (self._) {
                                                case 'Parser.Reply.error':
                                                    var $3907 = self.idx;
                                                    var $3908 = self.code;
                                                    var $3909 = self.err;
                                                    var $3910 = Parser$Reply$error$($3907, $3908, $3909);
                                                    var $3906 = $3910;
                                                    break;
                                                case 'Parser.Reply.value':
                                                    var $3911 = self.idx;
                                                    var $3912 = self.code;
                                                    var $3913 = self.val;
                                                    var _term$19 = Kind$Term$app$(Kind$Term$ref$("Monad.pure"), Kind$Term$ref$(_monad_name$1));
                                                    var _term$20 = Kind$Term$app$(_term$19, Kind$Term$ref$((_monad_name$1 + ".monad")));
                                                    var _term$21 = Kind$Term$app$(_term$20, Kind$Term$hol$(Bits$e));
                                                    var _term$22 = Kind$Term$app$(_term$21, $3898);
                                                    var $3914 = Parser$Reply$value$($3911, $3912, Kind$Term$ori$($3913, _term$22));
                                                    var $3906 = $3914;
                                                    break;
                                            };
                                            var $3899 = $3906;
                                            break;
                                    };
                                    var $3891 = $3899;
                                    break;
                            };
                            var $3884 = $3891;
                            break;
                    };
                    var $3876 = $3884;
                    break;
            };
            return $3876;
        }), List$cons$((_idx$2 => _code$3 => {
            var self = Kind$Parser$init$(_idx$2, _code$3);
            switch (self._) {
                case 'Parser.Reply.error':
                    var $3916 = self.idx;
                    var $3917 = self.code;
                    var $3918 = self.err;
                    var $3919 = Parser$Reply$error$($3916, $3917, $3918);
                    var $3915 = $3919;
                    break;
                case 'Parser.Reply.value':
                    var $3920 = self.idx;
                    var $3921 = self.code;
                    var $3922 = self.val;
                    var self = Kind$Parser$term$($3920, $3921);
                    switch (self._) {
                        case 'Parser.Reply.error':
                            var $3924 = self.idx;
                            var $3925 = self.code;
                            var $3926 = self.err;
                            var $3927 = Parser$Reply$error$($3924, $3925, $3926);
                            var $3923 = $3927;
                            break;
                        case 'Parser.Reply.value':
                            var $3928 = self.idx;
                            var $3929 = self.code;
                            var $3930 = self.val;
                            var self = Parser$maybe$(Kind$Parser$text(";"), $3928, $3929);
                            switch (self._) {
                                case 'Parser.Reply.error':
                                    var $3932 = self.idx;
                                    var $3933 = self.code;
                                    var $3934 = self.err;
                                    var $3935 = Parser$Reply$error$($3932, $3933, $3934);
                                    var $3931 = $3935;
                                    break;
                                case 'Parser.Reply.value':
                                    var $3936 = self.idx;
                                    var $3937 = self.code;
                                    var self = Kind$Parser$do$statements$(_monad_name$1)($3936)($3937);
                                    switch (self._) {
                                        case 'Parser.Reply.error':
                                            var $3939 = self.idx;
                                            var $3940 = self.code;
                                            var $3941 = self.err;
                                            var $3942 = Parser$Reply$error$($3939, $3940, $3941);
                                            var $3938 = $3942;
                                            break;
                                        case 'Parser.Reply.value':
                                            var $3943 = self.idx;
                                            var $3944 = self.code;
                                            var $3945 = self.val;
                                            var self = Kind$Parser$stop$($3922, $3943, $3944);
                                            switch (self._) {
                                                case 'Parser.Reply.error':
                                                    var $3947 = self.idx;
                                                    var $3948 = self.code;
                                                    var $3949 = self.err;
                                                    var $3950 = Parser$Reply$error$($3947, $3948, $3949);
                                                    var $3946 = $3950;
                                                    break;
                                                case 'Parser.Reply.value':
                                                    var $3951 = self.idx;
                                                    var $3952 = self.code;
                                                    var $3953 = self.val;
                                                    var _term$19 = Kind$Term$app$(Kind$Term$ref$("Monad.bind"), Kind$Term$ref$(_monad_name$1));
                                                    var _term$20 = Kind$Term$app$(_term$19, Kind$Term$ref$((_monad_name$1 + ".monad")));
                                                    var _term$21 = Kind$Term$app$(_term$20, Kind$Term$hol$(Bits$e));
                                                    var _term$22 = Kind$Term$app$(_term$21, Kind$Term$hol$(Bits$e));
                                                    var _term$23 = Kind$Term$app$(_term$22, $3930);
                                                    var _term$24 = Kind$Term$app$(_term$23, Kind$Term$lam$("", (_x$24 => {
                                                        var $3955 = $3945;
                                                        return $3955;
                                                    })));
                                                    var $3954 = Parser$Reply$value$($3951, $3952, Kind$Term$ori$($3953, _term$24));
                                                    var $3946 = $3954;
                                                    break;
                                            };
                                            var $3938 = $3946;
                                            break;
                                    };
                                    var $3931 = $3938;
                                    break;
                            };
                            var $3923 = $3931;
                            break;
                    };
                    var $3915 = $3923;
                    break;
            };
            return $3915;
        }), List$cons$((_idx$2 => _code$3 => {
            var self = Kind$Parser$term$(_idx$2, _code$3);
            switch (self._) {
                case 'Parser.Reply.error':
                    var $3957 = self.idx;
                    var $3958 = self.code;
                    var $3959 = self.err;
                    var $3960 = Parser$Reply$error$($3957, $3958, $3959);
                    var $3956 = $3960;
                    break;
                case 'Parser.Reply.value':
                    var $3961 = self.idx;
                    var $3962 = self.code;
                    var $3963 = self.val;
                    var self = Parser$maybe$(Kind$Parser$text(";"), $3961, $3962);
                    switch (self._) {
                        case 'Parser.Reply.error':
                            var $3965 = self.idx;
                            var $3966 = self.code;
                            var $3967 = self.err;
                            var $3968 = Parser$Reply$error$($3965, $3966, $3967);
                            var $3964 = $3968;
                            break;
                        case 'Parser.Reply.value':
                            var $3969 = self.idx;
                            var $3970 = self.code;
                            var $3971 = Parser$Reply$value$($3969, $3970, $3963);
                            var $3964 = $3971;
                            break;
                    };
                    var $3956 = $3964;
                    break;
            };
            return $3956;
        }), List$nil))))));
        return $3749;
    };
    const Kind$Parser$do$statements = x0 => Kind$Parser$do$statements$(x0);

    function Kind$Parser$do$(_idx$1, _code$2) {
        var self = Parser$maybe$(Kind$Parser$text("do "), _idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3973 = self.idx;
                var $3974 = self.code;
                var $3975 = self.err;
                var $3976 = Parser$Reply$error$($3973, $3974, $3975);
                var $3972 = $3976;
                break;
            case 'Parser.Reply.value':
                var $3977 = self.idx;
                var $3978 = self.code;
                var self = Kind$Parser$name1$($3977, $3978);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $3980 = self.idx;
                        var $3981 = self.code;
                        var $3982 = self.err;
                        var $3983 = Parser$Reply$error$($3980, $3981, $3982);
                        var $3979 = $3983;
                        break;
                    case 'Parser.Reply.value':
                        var $3984 = self.idx;
                        var $3985 = self.code;
                        var $3986 = self.val;
                        var self = Parser$text$(" {", $3984, $3985);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $3988 = self.idx;
                                var $3989 = self.code;
                                var $3990 = self.err;
                                var $3991 = Parser$Reply$error$($3988, $3989, $3990);
                                var $3987 = $3991;
                                break;
                            case 'Parser.Reply.value':
                                var $3992 = self.idx;
                                var $3993 = self.code;
                                var self = Kind$Parser$do$statements$($3986)($3992)($3993);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $3995 = self.idx;
                                        var $3996 = self.code;
                                        var $3997 = self.err;
                                        var $3998 = Parser$Reply$error$($3995, $3996, $3997);
                                        var $3994 = $3998;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $3999 = self.idx;
                                        var $4000 = self.code;
                                        var $4001 = self.val;
                                        var self = Kind$Parser$text$("}", $3999, $4000);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $4003 = self.idx;
                                                var $4004 = self.code;
                                                var $4005 = self.err;
                                                var $4006 = Parser$Reply$error$($4003, $4004, $4005);
                                                var $4002 = $4006;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $4007 = self.idx;
                                                var $4008 = self.code;
                                                var $4009 = Parser$Reply$value$($4007, $4008, $4001);
                                                var $4002 = $4009;
                                                break;
                                        };
                                        var $3994 = $4002;
                                        break;
                                };
                                var $3987 = $3994;
                                break;
                        };
                        var $3979 = $3987;
                        break;
                };
                var $3972 = $3979;
                break;
        };
        return $3972;
    };
    const Kind$Parser$do = x0 => x1 => Kind$Parser$do$(x0, x1);

    function Parser$try$(_parse$2, _idx$3, _code$4) {
        var self = _parse$2(_idx$3)(_code$4);
        switch (self._) {
            case 'Parser.Reply.error':
                var $4011 = Parser$Reply$value$(_idx$3, _code$4, Bool$false);
                var $4010 = $4011;
                break;
            case 'Parser.Reply.value':
                var $4012 = Parser$Reply$value$(_idx$3, _code$4, Bool$true);
                var $4010 = $4012;
                break;
        };
        return $4010;
    };
    const Parser$try = x0 => x1 => x2 => Parser$try$(x0, x1, x2);

    function Parser$fail$(_error$2, _idx$3, _code$4) {
        var $4013 = Parser$Reply$error$(_idx$3, _code$4, _error$2);
        return $4013;
    };
    const Parser$fail = x0 => x1 => x2 => Parser$fail$(x0, x1, x2);

    function Parser$avoiding$(_test$2, _parse$3, _idx$4, _code$5) {
        var self = Parser$try$(_test$2, _idx$4, _code$5);
        switch (self._) {
            case 'Parser.Reply.error':
                var $4015 = self.idx;
                var $4016 = self.code;
                var $4017 = self.err;
                var $4018 = Parser$Reply$error$($4015, $4016, $4017);
                var $4014 = $4018;
                break;
            case 'Parser.Reply.value':
                var $4019 = self.idx;
                var $4020 = self.code;
                var $4021 = self.val;
                var self = $4021;
                if (self) {
                    var $4023 = Parser$fail("Avoided.");
                    var $4022 = $4023;
                } else {
                    var $4024 = _parse$3;
                    var $4022 = $4024;
                };
                var $4022 = $4022($4019)($4020);
                var $4014 = $4022;
                break;
        };
        return $4014;
    };
    const Parser$avoiding = x0 => x1 => x2 => x3 => Parser$avoiding$(x0, x1, x2, x3);

    function Maybe$default$(_m$2, _a$3) {
        var self = _m$2;
        switch (self._) {
            case 'Maybe.some':
                var $4026 = self.value;
                var $4027 = $4026;
                var $4025 = $4027;
                break;
            case 'Maybe.none':
                var $4028 = _a$3;
                var $4025 = $4028;
                break;
        };
        return $4025;
    };
    const Maybe$default = x0 => x1 => Maybe$default$(x0, x1);

    function Kind$Term$unroll_nat$(_natx$1) {
        var self = _natx$1;
        if (self === 0n) {
            var $4030 = Kind$Term$ref$(Kind$Name$read$("Nat.zero"));
            var $4029 = $4030;
        } else {
            var $4031 = (self - 1n);
            var _func$3 = Kind$Term$ref$(Kind$Name$read$("Nat.succ"));
            var _argm$4 = Kind$Term$nat$($4031);
            var $4032 = Kind$Term$app$(_func$3, _argm$4);
            var $4029 = $4032;
        };
        return $4029;
    };
    const Kind$Term$unroll_nat = x0 => Kind$Term$unroll_nat$(x0);

    function Word$to_bits$(_a$2) {
        var self = _a$2;
        switch (self._) {
            case 'Word.o':
                var $4034 = self.pred;
                var $4035 = (Word$to_bits$($4034) + '0');
                var $4033 = $4035;
                break;
            case 'Word.i':
                var $4036 = self.pred;
                var $4037 = (Word$to_bits$($4036) + '1');
                var $4033 = $4037;
                break;
            case 'Word.e':
                var $4038 = Bits$e;
                var $4033 = $4038;
                break;
        };
        return $4033;
    };
    const Word$to_bits = x0 => Word$to_bits$(x0);
    const U16$to_bits = a0 => (u16_to_bits(a0));

    function Kind$Term$unroll_chr$bits$(_bits$1) {
        var self = _bits$1;
        switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
            case 'o':
                var $4040 = self.slice(0, -1);
                var $4041 = Kind$Term$app$(Kind$Term$ref$(Kind$Name$read$("Bits.o")), Kind$Term$unroll_chr$bits$($4040));
                var $4039 = $4041;
                break;
            case 'i':
                var $4042 = self.slice(0, -1);
                var $4043 = Kind$Term$app$(Kind$Term$ref$(Kind$Name$read$("Bits.i")), Kind$Term$unroll_chr$bits$($4042));
                var $4039 = $4043;
                break;
            case 'e':
                var $4044 = Kind$Term$ref$(Kind$Name$read$("Bits.e"));
                var $4039 = $4044;
                break;
        };
        return $4039;
    };
    const Kind$Term$unroll_chr$bits = x0 => Kind$Term$unroll_chr$bits$(x0);

    function Kind$Term$unroll_chr$(_chrx$1) {
        var _bits$2 = (u16_to_bits(_chrx$1));
        var _term$3 = Kind$Term$ref$(Kind$Name$read$("Word.from_bits"));
        var _term$4 = Kind$Term$app$(_term$3, Kind$Term$nat$(16n));
        var _term$5 = Kind$Term$app$(_term$4, Kind$Term$unroll_chr$bits$(_bits$2));
        var _term$6 = Kind$Term$app$(Kind$Term$ref$(Kind$Name$read$("U16.new")), _term$5);
        var $4045 = _term$6;
        return $4045;
    };
    const Kind$Term$unroll_chr = x0 => Kind$Term$unroll_chr$(x0);

    function Kind$Term$unroll_str$(_strx$1) {
        var self = _strx$1;
        if (self.length === 0) {
            var $4047 = Kind$Term$ref$(Kind$Name$read$("String.nil"));
            var $4046 = $4047;
        } else {
            var $4048 = self.charCodeAt(0);
            var $4049 = self.slice(1);
            var _char$4 = Kind$Term$chr$($4048);
            var _term$5 = Kind$Term$ref$(Kind$Name$read$("String.cons"));
            var _term$6 = Kind$Term$app$(_term$5, _char$4);
            var _term$7 = Kind$Term$app$(_term$6, Kind$Term$str$($4049));
            var $4050 = _term$7;
            var $4046 = $4050;
        };
        return $4046;
    };
    const Kind$Term$unroll_str = x0 => Kind$Term$unroll_str$(x0);

    function Kind$Term$reduce$(_term$1, _defs$2) {
        var self = _term$1;
        switch (self._) {
            case 'Kind.Term.ref':
                var $4052 = self.name;
                var self = Kind$Map$get$($4052, _defs$2);
                switch (self._) {
                    case 'Maybe.some':
                        var $4054 = self.value;
                        var self = $4054;
                        switch (self._) {
                            case 'Kind.Def.new':
                                var $4056 = self.term;
                                var $4057 = Kind$Term$reduce$($4056, _defs$2);
                                var $4055 = $4057;
                                break;
                        };
                        var $4053 = $4055;
                        break;
                    case 'Maybe.none':
                        var $4058 = Kind$Term$ref$($4052);
                        var $4053 = $4058;
                        break;
                };
                var $4051 = $4053;
                break;
            case 'Kind.Term.app':
                var $4059 = self.func;
                var $4060 = self.argm;
                var _func$5 = Kind$Term$reduce$($4059, _defs$2);
                var self = _func$5;
                switch (self._) {
                    case 'Kind.Term.lam':
                        var $4062 = self.body;
                        var $4063 = Kind$Term$reduce$($4062($4060), _defs$2);
                        var $4061 = $4063;
                        break;
                    case 'Kind.Term.var':
                    case 'Kind.Term.ref':
                    case 'Kind.Term.typ':
                    case 'Kind.Term.all':
                    case 'Kind.Term.app':
                    case 'Kind.Term.let':
                    case 'Kind.Term.def':
                    case 'Kind.Term.ann':
                    case 'Kind.Term.gol':
                    case 'Kind.Term.hol':
                    case 'Kind.Term.nat':
                    case 'Kind.Term.chr':
                    case 'Kind.Term.str':
                    case 'Kind.Term.cse':
                    case 'Kind.Term.ori':
                        var $4064 = _term$1;
                        var $4061 = $4064;
                        break;
                };
                var $4051 = $4061;
                break;
            case 'Kind.Term.let':
                var $4065 = self.expr;
                var $4066 = self.body;
                var $4067 = Kind$Term$reduce$($4066($4065), _defs$2);
                var $4051 = $4067;
                break;
            case 'Kind.Term.def':
                var $4068 = self.expr;
                var $4069 = self.body;
                var $4070 = Kind$Term$reduce$($4069($4068), _defs$2);
                var $4051 = $4070;
                break;
            case 'Kind.Term.ann':
                var $4071 = self.term;
                var $4072 = Kind$Term$reduce$($4071, _defs$2);
                var $4051 = $4072;
                break;
            case 'Kind.Term.nat':
                var $4073 = self.natx;
                var $4074 = Kind$Term$reduce$(Kind$Term$unroll_nat$($4073), _defs$2);
                var $4051 = $4074;
                break;
            case 'Kind.Term.chr':
                var $4075 = self.chrx;
                var $4076 = Kind$Term$reduce$(Kind$Term$unroll_chr$($4075), _defs$2);
                var $4051 = $4076;
                break;
            case 'Kind.Term.str':
                var $4077 = self.strx;
                var $4078 = Kind$Term$reduce$(Kind$Term$unroll_str$($4077), _defs$2);
                var $4051 = $4078;
                break;
            case 'Kind.Term.ori':
                var $4079 = self.expr;
                var $4080 = Kind$Term$reduce$($4079, _defs$2);
                var $4051 = $4080;
                break;
            case 'Kind.Term.var':
            case 'Kind.Term.typ':
            case 'Kind.Term.all':
            case 'Kind.Term.lam':
            case 'Kind.Term.gol':
            case 'Kind.Term.hol':
            case 'Kind.Term.cse':
                var $4081 = _term$1;
                var $4051 = $4081;
                break;
        };
        return $4051;
    };
    const Kind$Term$reduce = x0 => x1 => Kind$Term$reduce$(x0, x1);

    function Kind$Term$extract_name$(_term$1) {
        var _term$2 = Kind$Term$reduce$(_term$1, Kind$Map$new);
        var self = _term$2;
        switch (self._) {
            case 'Kind.Term.var':
                var $4083 = self.name;
                var $4084 = $4083;
                var $4082 = $4084;
                break;
            case 'Kind.Term.ref':
                var $4085 = self.name;
                var $4086 = $4085;
                var $4082 = $4086;
                break;
            case 'Kind.Term.typ':
            case 'Kind.Term.all':
            case 'Kind.Term.lam':
            case 'Kind.Term.app':
            case 'Kind.Term.let':
            case 'Kind.Term.def':
            case 'Kind.Term.ann':
            case 'Kind.Term.gol':
            case 'Kind.Term.hol':
            case 'Kind.Term.nat':
            case 'Kind.Term.chr':
            case 'Kind.Term.str':
            case 'Kind.Term.cse':
            case 'Kind.Term.ori':
                var $4087 = "self";
                var $4082 = $4087;
                break;
        };
        return $4082;
    };
    const Kind$Term$extract_name = x0 => Kind$Term$extract_name$(x0);

    function Kind$Ann$new$(_name$1, _term$2, _type$3) {
        var $4088 = ({
            _: 'Kind.Ann.new',
            'name': _name$1,
            'term': _term$2,
            'type': _type$3
        });
        return $4088;
    };
    const Kind$Ann$new = x0 => x1 => x2 => Kind$Ann$new$(x0, x1, x2);
    const Kind$Parser$case$with = Parser$first_of$(List$cons$((_idx$1 => _code$2 => {
        var self = Kind$Parser$text$("with ", _idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $4090 = self.idx;
                var $4091 = self.code;
                var $4092 = self.err;
                var $4093 = Parser$Reply$error$($4090, $4091, $4092);
                var $4089 = $4093;
                break;
            case 'Parser.Reply.value':
                var $4094 = self.idx;
                var $4095 = self.code;
                var $4096 = Parser$many$((_idx$6 => _code$7 => {
                    var self = Kind$Parser$name1$(_idx$6, _code$7);
                    switch (self._) {
                        case 'Parser.Reply.error':
                            var $4098 = self.idx;
                            var $4099 = self.code;
                            var $4100 = self.err;
                            var $4101 = Parser$Reply$error$($4098, $4099, $4100);
                            var $4097 = $4101;
                            break;
                        case 'Parser.Reply.value':
                            var $4102 = self.idx;
                            var $4103 = self.code;
                            var $4104 = self.val;
                            var self = Parser$maybe$((_idx$11 => _code$12 => {
                                var self = Kind$Parser$text$(":", _idx$11, _code$12);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $4107 = self.idx;
                                        var $4108 = self.code;
                                        var $4109 = self.err;
                                        var $4110 = Parser$Reply$error$($4107, $4108, $4109);
                                        var $4106 = $4110;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $4111 = self.idx;
                                        var $4112 = self.code;
                                        var self = Kind$Parser$term$($4111, $4112);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $4114 = self.idx;
                                                var $4115 = self.code;
                                                var $4116 = self.err;
                                                var $4117 = Parser$Reply$error$($4114, $4115, $4116);
                                                var $4113 = $4117;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $4118 = self.idx;
                                                var $4119 = self.code;
                                                var $4120 = self.val;
                                                var self = Parser$maybe$(Kind$Parser$text(";"), $4118, $4119);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $4122 = self.idx;
                                                        var $4123 = self.code;
                                                        var $4124 = self.err;
                                                        var $4125 = Parser$Reply$error$($4122, $4123, $4124);
                                                        var $4121 = $4125;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $4126 = self.idx;
                                                        var $4127 = self.code;
                                                        var $4128 = Parser$Reply$value$($4126, $4127, $4120);
                                                        var $4121 = $4128;
                                                        break;
                                                };
                                                var $4113 = $4121;
                                                break;
                                        };
                                        var $4106 = $4113;
                                        break;
                                };
                                return $4106;
                            }), $4102, $4103);
                            switch (self._) {
                                case 'Parser.Reply.error':
                                    var $4129 = self.idx;
                                    var $4130 = self.code;
                                    var $4131 = self.err;
                                    var $4132 = Parser$Reply$error$($4129, $4130, $4131);
                                    var $4105 = $4132;
                                    break;
                                case 'Parser.Reply.value':
                                    var $4133 = self.idx;
                                    var $4134 = self.code;
                                    var $4135 = self.val;
                                    var $4136 = Parser$Reply$value$($4133, $4134, Kind$Ann$new$($4104, Kind$Term$ref$($4104), $4135));
                                    var $4105 = $4136;
                                    break;
                            };
                            var $4097 = $4105;
                            break;
                    };
                    return $4097;
                }))($4094)($4095);
                var $4089 = $4096;
                break;
        };
        return $4089;
    }), List$cons$((_idx$1 => _code$2 => {
        var $4137 = Parser$Reply$value$(_idx$1, _code$2, List$nil);
        return $4137;
    }), List$nil)));

    function Kind$Parser$case$case$(_idx$1, _code$2) {
        var self = Parser$until$(Kind$Parser$text(":"), Kind$Parser$name1)(_idx$1)(_code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $4139 = self.idx;
                var $4140 = self.code;
                var $4141 = self.err;
                var $4142 = Parser$Reply$error$($4139, $4140, $4141);
                var $4138 = $4142;
                break;
            case 'Parser.Reply.value':
                var $4143 = self.idx;
                var $4144 = self.code;
                var $4145 = self.val;
                var self = Kind$Parser$term$($4143, $4144);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $4147 = self.idx;
                        var $4148 = self.code;
                        var $4149 = self.err;
                        var $4150 = Parser$Reply$error$($4147, $4148, $4149);
                        var $4146 = $4150;
                        break;
                    case 'Parser.Reply.value':
                        var $4151 = self.idx;
                        var $4152 = self.code;
                        var $4153 = self.val;
                        var self = Parser$maybe$(Kind$Parser$text(","), $4151, $4152);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $4155 = self.idx;
                                var $4156 = self.code;
                                var $4157 = self.err;
                                var $4158 = Parser$Reply$error$($4155, $4156, $4157);
                                var $4154 = $4158;
                                break;
                            case 'Parser.Reply.value':
                                var $4159 = self.idx;
                                var $4160 = self.code;
                                var $4161 = Parser$Reply$value$($4159, $4160, Pair$new$($4145, $4153));
                                var $4154 = $4161;
                                break;
                        };
                        var $4146 = $4154;
                        break;
                };
                var $4138 = $4146;
                break;
        };
        return $4138;
    };
    const Kind$Parser$case$case = x0 => x1 => Kind$Parser$case$case$(x0, x1);
    const Debug$log = a0 => a1 => ((console.log(a0), a1()));

    function Kind$Parser$case$group$(_dflt$1, _cses$2) {
        var self = _cses$2;
        switch (self._) {
            case 'List.cons':
                var $4163 = self.head;
                var $4164 = self.tail;
                var _map$5 = Kind$Parser$case$group$(_dflt$1, $4164);
                var self = $4163;
                switch (self._) {
                    case 'Pair.new':
                        var $4166 = self.fst;
                        var $4167 = self.snd;
                        var self = $4166;
                        switch (self._) {
                            case 'List.cons':
                                var $4169 = self.head;
                                var $4170 = self.tail;
                                var _rest$10 = Maybe$default$(Kind$Map$get$($4169, _map$5), List$nil);
                                var $4171 = Kind$Map$set$($4169, List$cons$(Pair$new$($4170, $4167), _rest$10), _map$5);
                                var $4168 = $4171;
                                break;
                            case 'List.nil':
                                var $4172 = _map$5;
                                var $4168 = $4172;
                                break;
                        };
                        var $4165 = $4168;
                        break;
                };
                var $4162 = $4165;
                break;
            case 'List.nil':
                var self = _dflt$1;
                switch (self._) {
                    case 'Maybe.some':
                        var $4174 = self.value;
                        var $4175 = Kind$Map$set$("_", List$cons$(Pair$new$(List$nil, $4174), List$nil), Kind$Map$new);
                        var $4173 = $4175;
                        break;
                    case 'Maybe.none':
                        var $4176 = Kind$Map$new;
                        var $4173 = $4176;
                        break;
                };
                var $4162 = $4173;
                break;
        };
        return $4162;
    };
    const Kind$Parser$case$group = x0 => x1 => Kind$Parser$case$group$(x0, x1);

    function BitsMap$map$(_fn$3, _map$4) {
        var self = _map$4;
        switch (self._) {
            case 'BitsMap.tie':
                var $4178 = self.val;
                var $4179 = self.lft;
                var $4180 = self.rgt;
                var self = $4178;
                switch (self._) {
                    case 'Maybe.some':
                        var $4182 = self.value;
                        var $4183 = Maybe$some$(_fn$3($4182));
                        var _val$8 = $4183;
                        break;
                    case 'Maybe.none':
                        var $4184 = Maybe$none;
                        var _val$8 = $4184;
                        break;
                };
                var _lft$9 = BitsMap$map$(_fn$3, $4179);
                var _rgt$10 = BitsMap$map$(_fn$3, $4180);
                var $4181 = BitsMap$tie$(_val$8, _lft$9, _rgt$10);
                var $4177 = $4181;
                break;
            case 'BitsMap.new':
                var $4185 = BitsMap$new;
                var $4177 = $4185;
                break;
        };
        return $4177;
    };
    const BitsMap$map = x0 => x1 => BitsMap$map$(x0, x1);

    function Kind$Map$map$(_fn$3, _map$4) {
        var $4186 = BitsMap$map$(_fn$3, _map$4);
        return $4186;
    };
    const Kind$Map$map = x0 => x1 => Kind$Map$map$(x0, x1);

    function Kind$Term$cse$(_path$1, _expr$2, _name$3, _with$4, _cses$5, _moti$6) {
        var $4187 = ({
            _: 'Kind.Term.cse',
            'path': _path$1,
            'expr': _expr$2,
            'name': _name$3,
            'with': _with$4,
            'cses': _cses$5,
            'moti': _moti$6
        });
        return $4187;
    };
    const Kind$Term$cse = x0 => x1 => x2 => x3 => x4 => x5 => Kind$Term$cse$(x0, x1, x2, x3, x4, x5);

    function Kind$Parser$case$build$(_vals$1, _wyth$2, _cses$3, _dflt$4, _moti$5, _orig$6) {
        var self = _vals$1;
        switch (self._) {
            case 'List.cons':
                var $4189 = self.head;
                var $4190 = self.tail;
                var _group$9 = Kind$Parser$case$group$(_dflt$4, _cses$3);
                var _name$10 = Pair$fst$($4189);
                var _expr$11 = Pair$snd$($4189);
                var _cses$12 = Kind$Map$map$((_cses$12 => {
                    var $4192 = Kind$Parser$case$build$($4190, _wyth$2, _cses$12, _dflt$4, _moti$5, _orig$6);
                    return $4192;
                }), _group$9);
                var $4191 = Kind$Term$ori$(_orig$6, Kind$Term$cse$(Bits$e, _expr$11, _name$10, _wyth$2, _cses$12, _moti$5));
                var $4188 = $4191;
                break;
            case 'List.nil':
                var self = _cses$3;
                switch (self._) {
                    case 'List.cons':
                        var $4194 = self.head;
                        var $4195 = Pair$snd$($4194);
                        var $4193 = $4195;
                        break;
                    case 'List.nil':
                        var $4196 = ((console.log(("MISSING CASE" + String$nil)), (_$7 => {
                            var $4197 = Kind$Term$ref$("missing_case");
                            return $4197;
                        })()));
                        var $4193 = $4196;
                        break;
                };
                var $4188 = $4193;
                break;
        };
        return $4188;
    };
    const Kind$Parser$case$build = x0 => x1 => x2 => x3 => x4 => x5 => Kind$Parser$case$build$(x0, x1, x2, x3, x4, x5);

    function Kind$Parser$case$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $4199 = self.idx;
                var $4200 = self.code;
                var $4201 = self.err;
                var $4202 = Parser$Reply$error$($4199, $4200, $4201);
                var $4198 = $4202;
                break;
            case 'Parser.Reply.value':
                var $4203 = self.idx;
                var $4204 = self.code;
                var $4205 = self.val;
                var self = Kind$Parser$text$("case ", $4203, $4204);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $4207 = self.idx;
                        var $4208 = self.code;
                        var $4209 = self.err;
                        var $4210 = Parser$Reply$error$($4207, $4208, $4209);
                        var $4206 = $4210;
                        break;
                    case 'Parser.Reply.value':
                        var $4211 = self.idx;
                        var $4212 = self.code;
                        var self = Parser$many1$((_idx$9 => _code$10 => {
                            var self = Parser$avoiding$(Kind$Parser$text("{"), Kind$Parser$term, _idx$9, _code$10);
                            switch (self._) {
                                case 'Parser.Reply.error':
                                    var $4215 = self.idx;
                                    var $4216 = self.code;
                                    var $4217 = self.err;
                                    var $4218 = Parser$Reply$error$($4215, $4216, $4217);
                                    var $4214 = $4218;
                                    break;
                                case 'Parser.Reply.value':
                                    var $4219 = self.idx;
                                    var $4220 = self.code;
                                    var $4221 = self.val;
                                    var self = Parser$maybe$((_idx$14 => _code$15 => {
                                        var self = Kind$Parser$text$("as", _idx$14, _code$15);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $4224 = self.idx;
                                                var $4225 = self.code;
                                                var $4226 = self.err;
                                                var $4227 = Parser$Reply$error$($4224, $4225, $4226);
                                                var $4223 = $4227;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $4228 = self.idx;
                                                var $4229 = self.code;
                                                var self = Kind$Parser$name1$($4228, $4229);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $4231 = self.idx;
                                                        var $4232 = self.code;
                                                        var $4233 = self.err;
                                                        var $4234 = Parser$Reply$error$($4231, $4232, $4233);
                                                        var $4230 = $4234;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $4235 = self.idx;
                                                        var $4236 = self.code;
                                                        var $4237 = self.val;
                                                        var self = Parser$maybe$(Kind$Parser$text(";"), $4235, $4236);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $4239 = self.idx;
                                                                var $4240 = self.code;
                                                                var $4241 = self.err;
                                                                var $4242 = Parser$Reply$error$($4239, $4240, $4241);
                                                                var $4238 = $4242;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $4243 = self.idx;
                                                                var $4244 = self.code;
                                                                var $4245 = Parser$Reply$value$($4243, $4244, $4237);
                                                                var $4238 = $4245;
                                                                break;
                                                        };
                                                        var $4230 = $4238;
                                                        break;
                                                };
                                                var $4223 = $4230;
                                                break;
                                        };
                                        return $4223;
                                    }), $4219, $4220);
                                    switch (self._) {
                                        case 'Parser.Reply.error':
                                            var $4246 = self.idx;
                                            var $4247 = self.code;
                                            var $4248 = self.err;
                                            var $4249 = Parser$Reply$error$($4246, $4247, $4248);
                                            var $4222 = $4249;
                                            break;
                                        case 'Parser.Reply.value':
                                            var $4250 = self.idx;
                                            var $4251 = self.code;
                                            var $4252 = self.val;
                                            var _name$17 = Maybe$default$($4252, Kind$Term$extract_name$($4221));
                                            var $4253 = Parser$Reply$value$($4250, $4251, Pair$new$(_name$17, $4221));
                                            var $4222 = $4253;
                                            break;
                                    };
                                    var $4214 = $4222;
                                    break;
                            };
                            return $4214;
                        }), $4211, $4212);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $4254 = self.idx;
                                var $4255 = self.code;
                                var $4256 = self.err;
                                var $4257 = Parser$Reply$error$($4254, $4255, $4256);
                                var $4213 = $4257;
                                break;
                            case 'Parser.Reply.value':
                                var $4258 = self.idx;
                                var $4259 = self.code;
                                var $4260 = self.val;
                                var self = Kind$Parser$case$with($4258)($4259);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $4262 = self.idx;
                                        var $4263 = self.code;
                                        var $4264 = self.err;
                                        var $4265 = Parser$Reply$error$($4262, $4263, $4264);
                                        var $4261 = $4265;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $4266 = self.idx;
                                        var $4267 = self.code;
                                        var $4268 = self.val;
                                        var self = Kind$Parser$text$("{", $4266, $4267);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $4270 = self.idx;
                                                var $4271 = self.code;
                                                var $4272 = self.err;
                                                var $4273 = Parser$Reply$error$($4270, $4271, $4272);
                                                var $4269 = $4273;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $4274 = self.idx;
                                                var $4275 = self.code;
                                                var self = Parser$until$(Kind$Parser$text("}"), Kind$Parser$case$case)($4274)($4275);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $4277 = self.idx;
                                                        var $4278 = self.code;
                                                        var $4279 = self.err;
                                                        var $4280 = Parser$Reply$error$($4277, $4278, $4279);
                                                        var $4276 = $4280;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $4281 = self.idx;
                                                        var $4282 = self.code;
                                                        var $4283 = self.val;
                                                        var self = Parser$maybe$(Kind$Parser$text("!"), $4281, $4282);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $4285 = self.idx;
                                                                var $4286 = self.code;
                                                                var $4287 = self.err;
                                                                var $4288 = Parser$Reply$error$($4285, $4286, $4287);
                                                                var $4284 = $4288;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $4289 = self.idx;
                                                                var $4290 = self.code;
                                                                var $4291 = self.val;
                                                                var self = Parser$maybe$((_idx$24 => _code$25 => {
                                                                    var self = Kind$Parser$text$("default", _idx$24, _code$25);
                                                                    switch (self._) {
                                                                        case 'Parser.Reply.error':
                                                                            var $4294 = self.idx;
                                                                            var $4295 = self.code;
                                                                            var $4296 = self.err;
                                                                            var $4297 = Parser$Reply$error$($4294, $4295, $4296);
                                                                            var $4293 = $4297;
                                                                            break;
                                                                        case 'Parser.Reply.value':
                                                                            var $4298 = self.idx;
                                                                            var $4299 = self.code;
                                                                            var self = Kind$Parser$term$($4298, $4299);
                                                                            switch (self._) {
                                                                                case 'Parser.Reply.error':
                                                                                    var $4301 = self.idx;
                                                                                    var $4302 = self.code;
                                                                                    var $4303 = self.err;
                                                                                    var $4304 = Parser$Reply$error$($4301, $4302, $4303);
                                                                                    var $4300 = $4304;
                                                                                    break;
                                                                                case 'Parser.Reply.value':
                                                                                    var $4305 = self.idx;
                                                                                    var $4306 = self.code;
                                                                                    var $4307 = self.val;
                                                                                    var $4308 = Parser$Reply$value$($4305, $4306, $4307);
                                                                                    var $4300 = $4308;
                                                                                    break;
                                                                            };
                                                                            var $4293 = $4300;
                                                                            break;
                                                                    };
                                                                    return $4293;
                                                                }), $4289, $4290);
                                                                switch (self._) {
                                                                    case 'Parser.Reply.error':
                                                                        var $4309 = self.idx;
                                                                        var $4310 = self.code;
                                                                        var $4311 = self.err;
                                                                        var $4312 = Parser$Reply$error$($4309, $4310, $4311);
                                                                        var $4292 = $4312;
                                                                        break;
                                                                    case 'Parser.Reply.value':
                                                                        var $4313 = self.idx;
                                                                        var $4314 = self.code;
                                                                        var $4315 = self.val;
                                                                        var self = Parser$maybe$((_idx$27 => _code$28 => {
                                                                            var self = Kind$Parser$text$(":", _idx$27, _code$28);
                                                                            switch (self._) {
                                                                                case 'Parser.Reply.error':
                                                                                    var $4318 = self.idx;
                                                                                    var $4319 = self.code;
                                                                                    var $4320 = self.err;
                                                                                    var $4321 = Parser$Reply$error$($4318, $4319, $4320);
                                                                                    var $4317 = $4321;
                                                                                    break;
                                                                                case 'Parser.Reply.value':
                                                                                    var $4322 = self.idx;
                                                                                    var $4323 = self.code;
                                                                                    var $4324 = Kind$Parser$term$($4322, $4323);
                                                                                    var $4317 = $4324;
                                                                                    break;
                                                                            };
                                                                            return $4317;
                                                                        }), $4313, $4314);
                                                                        switch (self._) {
                                                                            case 'Parser.Reply.error':
                                                                                var $4325 = self.idx;
                                                                                var $4326 = self.code;
                                                                                var $4327 = self.err;
                                                                                var $4328 = Parser$Reply$error$($4325, $4326, $4327);
                                                                                var $4316 = $4328;
                                                                                break;
                                                                            case 'Parser.Reply.value':
                                                                                var $4329 = self.idx;
                                                                                var $4330 = self.code;
                                                                                var $4331 = self.val;
                                                                                var self = $4331;
                                                                                switch (self._) {
                                                                                    case 'Maybe.some':
                                                                                        var $4333 = self.value;
                                                                                        var $4334 = Maybe$some$($4333);
                                                                                        var _moti$30 = $4334;
                                                                                        break;
                                                                                    case 'Maybe.none':
                                                                                        var self = $4291;
                                                                                        switch (self._) {
                                                                                            case 'Maybe.none':
                                                                                                var $4336 = Maybe$some$(Kind$Term$hol$(Bits$e));
                                                                                                var $4335 = $4336;
                                                                                                break;
                                                                                            case 'Maybe.some':
                                                                                                var $4337 = Maybe$none;
                                                                                                var $4335 = $4337;
                                                                                                break;
                                                                                        };
                                                                                        var _moti$30 = $4335;
                                                                                        break;
                                                                                };
                                                                                var self = Kind$Parser$stop$($4205, $4329, $4330);
                                                                                switch (self._) {
                                                                                    case 'Parser.Reply.error':
                                                                                        var $4338 = self.idx;
                                                                                        var $4339 = self.code;
                                                                                        var $4340 = self.err;
                                                                                        var $4341 = Parser$Reply$error$($4338, $4339, $4340);
                                                                                        var $4332 = $4341;
                                                                                        break;
                                                                                    case 'Parser.Reply.value':
                                                                                        var $4342 = self.idx;
                                                                                        var $4343 = self.code;
                                                                                        var $4344 = self.val;
                                                                                        var $4345 = Parser$Reply$value$($4342, $4343, Kind$Parser$case$build$($4260, $4268, $4283, $4315, _moti$30, $4344));
                                                                                        var $4332 = $4345;
                                                                                        break;
                                                                                };
                                                                                var $4316 = $4332;
                                                                                break;
                                                                        };
                                                                        var $4292 = $4316;
                                                                        break;
                                                                };
                                                                var $4284 = $4292;
                                                                break;
                                                        };
                                                        var $4276 = $4284;
                                                        break;
                                                };
                                                var $4269 = $4276;
                                                break;
                                        };
                                        var $4261 = $4269;
                                        break;
                                };
                                var $4213 = $4261;
                                break;
                        };
                        var $4206 = $4213;
                        break;
                };
                var $4198 = $4206;
                break;
        };
        return $4198;
    };
    const Kind$Parser$case = x0 => x1 => Kind$Parser$case$(x0, x1);

    function Kind$Parser$open$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $4347 = self.idx;
                var $4348 = self.code;
                var $4349 = self.err;
                var $4350 = Parser$Reply$error$($4347, $4348, $4349);
                var $4346 = $4350;
                break;
            case 'Parser.Reply.value':
                var $4351 = self.idx;
                var $4352 = self.code;
                var $4353 = self.val;
                var self = Kind$Parser$text$("open ", $4351, $4352);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $4355 = self.idx;
                        var $4356 = self.code;
                        var $4357 = self.err;
                        var $4358 = Parser$Reply$error$($4355, $4356, $4357);
                        var $4354 = $4358;
                        break;
                    case 'Parser.Reply.value':
                        var $4359 = self.idx;
                        var $4360 = self.code;
                        var self = Kind$Parser$spaces($4359)($4360);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $4362 = self.idx;
                                var $4363 = self.code;
                                var $4364 = self.err;
                                var $4365 = Parser$Reply$error$($4362, $4363, $4364);
                                var $4361 = $4365;
                                break;
                            case 'Parser.Reply.value':
                                var $4366 = self.idx;
                                var $4367 = self.code;
                                var self = Kind$Parser$term$($4366, $4367);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $4369 = self.idx;
                                        var $4370 = self.code;
                                        var $4371 = self.err;
                                        var $4372 = Parser$Reply$error$($4369, $4370, $4371);
                                        var $4368 = $4372;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $4373 = self.idx;
                                        var $4374 = self.code;
                                        var $4375 = self.val;
                                        var self = Parser$maybe$((_idx$15 => _code$16 => {
                                            var self = Kind$Parser$text$("as", _idx$15, _code$16);
                                            switch (self._) {
                                                case 'Parser.Reply.error':
                                                    var $4378 = self.idx;
                                                    var $4379 = self.code;
                                                    var $4380 = self.err;
                                                    var $4381 = Parser$Reply$error$($4378, $4379, $4380);
                                                    var $4377 = $4381;
                                                    break;
                                                case 'Parser.Reply.value':
                                                    var $4382 = self.idx;
                                                    var $4383 = self.code;
                                                    var $4384 = Kind$Parser$name1$($4382, $4383);
                                                    var $4377 = $4384;
                                                    break;
                                            };
                                            return $4377;
                                        }), $4373, $4374);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $4385 = self.idx;
                                                var $4386 = self.code;
                                                var $4387 = self.err;
                                                var $4388 = Parser$Reply$error$($4385, $4386, $4387);
                                                var $4376 = $4388;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $4389 = self.idx;
                                                var $4390 = self.code;
                                                var $4391 = self.val;
                                                var self = Parser$maybe$(Kind$Parser$text(";"), $4389, $4390);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $4393 = self.idx;
                                                        var $4394 = self.code;
                                                        var $4395 = self.err;
                                                        var $4396 = Parser$Reply$error$($4393, $4394, $4395);
                                                        var $4392 = $4396;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $4397 = self.idx;
                                                        var $4398 = self.code;
                                                        var self = $4391;
                                                        switch (self._) {
                                                            case 'Maybe.some':
                                                                var $4400 = self.value;
                                                                var $4401 = $4400;
                                                                var _name$21 = $4401;
                                                                break;
                                                            case 'Maybe.none':
                                                                var self = Kind$Term$reduce$($4375, Kind$Map$new);
                                                                switch (self._) {
                                                                    case 'Kind.Term.var':
                                                                        var $4403 = self.name;
                                                                        var $4404 = $4403;
                                                                        var $4402 = $4404;
                                                                        break;
                                                                    case 'Kind.Term.ref':
                                                                        var $4405 = self.name;
                                                                        var $4406 = $4405;
                                                                        var $4402 = $4406;
                                                                        break;
                                                                    case 'Kind.Term.typ':
                                                                    case 'Kind.Term.all':
                                                                    case 'Kind.Term.lam':
                                                                    case 'Kind.Term.app':
                                                                    case 'Kind.Term.let':
                                                                    case 'Kind.Term.def':
                                                                    case 'Kind.Term.ann':
                                                                    case 'Kind.Term.gol':
                                                                    case 'Kind.Term.hol':
                                                                    case 'Kind.Term.nat':
                                                                    case 'Kind.Term.chr':
                                                                    case 'Kind.Term.str':
                                                                    case 'Kind.Term.cse':
                                                                    case 'Kind.Term.ori':
                                                                        var $4407 = Kind$Name$read$("self");
                                                                        var $4402 = $4407;
                                                                        break;
                                                                };
                                                                var _name$21 = $4402;
                                                                break;
                                                        };
                                                        var _wyth$22 = List$nil;
                                                        var self = Kind$Parser$term$($4397, $4398);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $4408 = self.idx;
                                                                var $4409 = self.code;
                                                                var $4410 = self.err;
                                                                var $4411 = Parser$Reply$error$($4408, $4409, $4410);
                                                                var $4399 = $4411;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $4412 = self.idx;
                                                                var $4413 = self.code;
                                                                var $4414 = self.val;
                                                                var _cses$26 = Kind$Map$set$("_", $4414, Kind$Map$new);
                                                                var _moti$27 = Maybe$some$(Kind$Term$hol$(Bits$e));
                                                                var self = Kind$Parser$stop$($4353, $4412, $4413);
                                                                switch (self._) {
                                                                    case 'Parser.Reply.error':
                                                                        var $4416 = self.idx;
                                                                        var $4417 = self.code;
                                                                        var $4418 = self.err;
                                                                        var $4419 = Parser$Reply$error$($4416, $4417, $4418);
                                                                        var $4415 = $4419;
                                                                        break;
                                                                    case 'Parser.Reply.value':
                                                                        var $4420 = self.idx;
                                                                        var $4421 = self.code;
                                                                        var $4422 = self.val;
                                                                        var $4423 = Parser$Reply$value$($4420, $4421, Kind$Term$ori$($4422, Kind$Term$cse$(Bits$e, $4375, _name$21, _wyth$22, _cses$26, _moti$27)));
                                                                        var $4415 = $4423;
                                                                        break;
                                                                };
                                                                var $4399 = $4415;
                                                                break;
                                                        };
                                                        var $4392 = $4399;
                                                        break;
                                                };
                                                var $4376 = $4392;
                                                break;
                                        };
                                        var $4368 = $4376;
                                        break;
                                };
                                var $4361 = $4368;
                                break;
                        };
                        var $4354 = $4361;
                        break;
                };
                var $4346 = $4354;
                break;
        };
        return $4346;
    };
    const Kind$Parser$open = x0 => x1 => Kind$Parser$open$(x0, x1);

    function Kind$Parser$without$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $4425 = self.idx;
                var $4426 = self.code;
                var $4427 = self.err;
                var $4428 = Parser$Reply$error$($4425, $4426, $4427);
                var $4424 = $4428;
                break;
            case 'Parser.Reply.value':
                var $4429 = self.idx;
                var $4430 = self.code;
                var $4431 = self.val;
                var self = Kind$Parser$text$("without ", $4429, $4430);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $4433 = self.idx;
                        var $4434 = self.code;
                        var $4435 = self.err;
                        var $4436 = Parser$Reply$error$($4433, $4434, $4435);
                        var $4432 = $4436;
                        break;
                    case 'Parser.Reply.value':
                        var $4437 = self.idx;
                        var $4438 = self.code;
                        var self = Kind$Parser$name1$($4437, $4438);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $4440 = self.idx;
                                var $4441 = self.code;
                                var $4442 = self.err;
                                var $4443 = Parser$Reply$error$($4440, $4441, $4442);
                                var $4439 = $4443;
                                break;
                            case 'Parser.Reply.value':
                                var $4444 = self.idx;
                                var $4445 = self.code;
                                var $4446 = self.val;
                                var self = Kind$Parser$text$(":", $4444, $4445);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $4448 = self.idx;
                                        var $4449 = self.code;
                                        var $4450 = self.err;
                                        var $4451 = Parser$Reply$error$($4448, $4449, $4450);
                                        var $4447 = $4451;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $4452 = self.idx;
                                        var $4453 = self.code;
                                        var self = Kind$Parser$term$($4452, $4453);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $4455 = self.idx;
                                                var $4456 = self.code;
                                                var $4457 = self.err;
                                                var $4458 = Parser$Reply$error$($4455, $4456, $4457);
                                                var $4454 = $4458;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $4459 = self.idx;
                                                var $4460 = self.code;
                                                var $4461 = self.val;
                                                var self = Kind$Parser$term$($4459, $4460);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $4463 = self.idx;
                                                        var $4464 = self.code;
                                                        var $4465 = self.err;
                                                        var $4466 = Parser$Reply$error$($4463, $4464, $4465);
                                                        var $4462 = $4466;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $4467 = self.idx;
                                                        var $4468 = self.code;
                                                        var $4469 = self.val;
                                                        var self = Kind$Parser$stop$($4431, $4467, $4468);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $4471 = self.idx;
                                                                var $4472 = self.code;
                                                                var $4473 = self.err;
                                                                var $4474 = Parser$Reply$error$($4471, $4472, $4473);
                                                                var $4470 = $4474;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $4475 = self.idx;
                                                                var $4476 = self.code;
                                                                var $4477 = self.val;
                                                                var _term$24 = Kind$Term$ref$($4446);
                                                                var _term$25 = Kind$Term$app$(_term$24, Kind$Term$lam$("", (_x$25 => {
                                                                    var $4479 = Kind$Term$hol$(Bits$e);
                                                                    return $4479;
                                                                })));
                                                                var _term$26 = Kind$Term$app$(_term$25, $4461);
                                                                var _term$27 = Kind$Term$app$(_term$26, Kind$Term$lam$($4446, (_x$27 => {
                                                                    var $4480 = $4469;
                                                                    return $4480;
                                                                })));
                                                                var $4478 = Parser$Reply$value$($4475, $4476, Kind$Term$ori$($4477, _term$27));
                                                                var $4470 = $4478;
                                                                break;
                                                        };
                                                        var $4462 = $4470;
                                                        break;
                                                };
                                                var $4454 = $4462;
                                                break;
                                        };
                                        var $4447 = $4454;
                                        break;
                                };
                                var $4439 = $4447;
                                break;
                        };
                        var $4432 = $4439;
                        break;
                };
                var $4424 = $4432;
                break;
        };
        return $4424;
    };
    const Kind$Parser$without = x0 => x1 => Kind$Parser$without$(x0, x1);

    function Kind$Parser$switch$case$(_idx$1, _code$2) {
        var self = Kind$Parser$term$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $4482 = self.idx;
                var $4483 = self.code;
                var $4484 = self.err;
                var $4485 = Parser$Reply$error$($4482, $4483, $4484);
                var $4481 = $4485;
                break;
            case 'Parser.Reply.value':
                var $4486 = self.idx;
                var $4487 = self.code;
                var $4488 = self.val;
                var self = Kind$Parser$text$(":", $4486, $4487);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $4490 = self.idx;
                        var $4491 = self.code;
                        var $4492 = self.err;
                        var $4493 = Parser$Reply$error$($4490, $4491, $4492);
                        var $4489 = $4493;
                        break;
                    case 'Parser.Reply.value':
                        var $4494 = self.idx;
                        var $4495 = self.code;
                        var self = Kind$Parser$term$($4494, $4495);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $4497 = self.idx;
                                var $4498 = self.code;
                                var $4499 = self.err;
                                var $4500 = Parser$Reply$error$($4497, $4498, $4499);
                                var $4496 = $4500;
                                break;
                            case 'Parser.Reply.value':
                                var $4501 = self.idx;
                                var $4502 = self.code;
                                var $4503 = self.val;
                                var $4504 = Parser$Reply$value$($4501, $4502, Pair$new$($4488, $4503));
                                var $4496 = $4504;
                                break;
                        };
                        var $4489 = $4496;
                        break;
                };
                var $4481 = $4489;
                break;
        };
        return $4481;
    };
    const Kind$Parser$switch$case = x0 => x1 => Kind$Parser$switch$case$(x0, x1);

    function Kind$Parser$switch$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $4506 = self.idx;
                var $4507 = self.code;
                var $4508 = self.err;
                var $4509 = Parser$Reply$error$($4506, $4507, $4508);
                var $4505 = $4509;
                break;
            case 'Parser.Reply.value':
                var $4510 = self.idx;
                var $4511 = self.code;
                var $4512 = self.val;
                var self = Kind$Parser$text$("switch ", $4510, $4511);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $4514 = self.idx;
                        var $4515 = self.code;
                        var $4516 = self.err;
                        var $4517 = Parser$Reply$error$($4514, $4515, $4516);
                        var $4513 = $4517;
                        break;
                    case 'Parser.Reply.value':
                        var $4518 = self.idx;
                        var $4519 = self.code;
                        var self = Kind$Parser$term$($4518, $4519);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $4521 = self.idx;
                                var $4522 = self.code;
                                var $4523 = self.err;
                                var $4524 = Parser$Reply$error$($4521, $4522, $4523);
                                var $4520 = $4524;
                                break;
                            case 'Parser.Reply.value':
                                var $4525 = self.idx;
                                var $4526 = self.code;
                                var $4527 = self.val;
                                var self = Kind$Parser$text$("{", $4525, $4526);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $4529 = self.idx;
                                        var $4530 = self.code;
                                        var $4531 = self.err;
                                        var $4532 = Parser$Reply$error$($4529, $4530, $4531);
                                        var $4528 = $4532;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $4533 = self.idx;
                                        var $4534 = self.code;
                                        var self = Parser$until$(Kind$Parser$text("}"), Kind$Parser$switch$case)($4533)($4534);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $4536 = self.idx;
                                                var $4537 = self.code;
                                                var $4538 = self.err;
                                                var $4539 = Parser$Reply$error$($4536, $4537, $4538);
                                                var $4535 = $4539;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $4540 = self.idx;
                                                var $4541 = self.code;
                                                var $4542 = self.val;
                                                var self = Kind$Parser$text$("default ", $4540, $4541);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $4544 = self.idx;
                                                        var $4545 = self.code;
                                                        var $4546 = self.err;
                                                        var $4547 = Parser$Reply$error$($4544, $4545, $4546);
                                                        var $4543 = $4547;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $4548 = self.idx;
                                                        var $4549 = self.code;
                                                        var self = Kind$Parser$term$($4548, $4549);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $4551 = self.idx;
                                                                var $4552 = self.code;
                                                                var $4553 = self.err;
                                                                var $4554 = Parser$Reply$error$($4551, $4552, $4553);
                                                                var $4550 = $4554;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $4555 = self.idx;
                                                                var $4556 = self.code;
                                                                var $4557 = self.val;
                                                                var self = Kind$Parser$stop$($4512, $4555, $4556);
                                                                switch (self._) {
                                                                    case 'Parser.Reply.error':
                                                                        var $4559 = self.idx;
                                                                        var $4560 = self.code;
                                                                        var $4561 = self.err;
                                                                        var $4562 = Parser$Reply$error$($4559, $4560, $4561);
                                                                        var $4558 = $4562;
                                                                        break;
                                                                    case 'Parser.Reply.value':
                                                                        var $4563 = self.idx;
                                                                        var $4564 = self.code;
                                                                        var $4565 = self.val;
                                                                        var _term$27 = List$fold$($4542, $4557, (_cse$27 => _rest$28 => {
                                                                            var self = _cse$27;
                                                                            switch (self._) {
                                                                                case 'Pair.new':
                                                                                    var $4568 = self.fst;
                                                                                    var $4569 = self.snd;
                                                                                    var _term$31 = Kind$Term$app$($4527, $4568);
                                                                                    var _term$32 = Kind$Term$app$(_term$31, Kind$Term$lam$("", (_x$32 => {
                                                                                        var $4571 = Kind$Term$hol$(Bits$e);
                                                                                        return $4571;
                                                                                    })));
                                                                                    var _term$33 = Kind$Term$app$(_term$32, $4569);
                                                                                    var _term$34 = Kind$Term$app$(_term$33, _rest$28);
                                                                                    var $4570 = _term$34;
                                                                                    var $4567 = $4570;
                                                                                    break;
                                                                            };
                                                                            return $4567;
                                                                        }));
                                                                        var $4566 = Parser$Reply$value$($4563, $4564, Kind$Term$ori$($4565, _term$27));
                                                                        var $4558 = $4566;
                                                                        break;
                                                                };
                                                                var $4550 = $4558;
                                                                break;
                                                        };
                                                        var $4543 = $4550;
                                                        break;
                                                };
                                                var $4535 = $4543;
                                                break;
                                        };
                                        var $4528 = $4535;
                                        break;
                                };
                                var $4520 = $4528;
                                break;
                        };
                        var $4513 = $4520;
                        break;
                };
                var $4505 = $4513;
                break;
        };
        return $4505;
    };
    const Kind$Parser$switch = x0 => x1 => Kind$Parser$switch$(x0, x1);

    function Bits$tail$(_a$1) {
        var self = _a$1;
        switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
            case 'o':
                var $4573 = self.slice(0, -1);
                var $4574 = $4573;
                var $4572 = $4574;
                break;
            case 'i':
                var $4575 = self.slice(0, -1);
                var $4576 = $4575;
                var $4572 = $4576;
                break;
            case 'e':
                var $4577 = Bits$e;
                var $4572 = $4577;
                break;
        };
        return $4572;
    };
    const Bits$tail = x0 => Bits$tail$(x0);

    function Bits$inc$(_a$1) {
        var self = _a$1;
        switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
            case 'o':
                var $4579 = self.slice(0, -1);
                var $4580 = ($4579 + '1');
                var $4578 = $4580;
                break;
            case 'i':
                var $4581 = self.slice(0, -1);
                var $4582 = (Bits$inc$($4581) + '0');
                var $4578 = $4582;
                break;
            case 'e':
                var $4583 = (Bits$e + '1');
                var $4578 = $4583;
                break;
        };
        return $4578;
    };
    const Bits$inc = x0 => Bits$inc$(x0);
    const Nat$to_bits = a0 => (nat_to_bits(a0));

    function Maybe$is_some$(_m$2) {
        var self = _m$2;
        switch (self._) {
            case 'Maybe.none':
                var $4585 = Bool$false;
                var $4584 = $4585;
                break;
            case 'Maybe.some':
                var $4586 = Bool$true;
                var $4584 = $4586;
                break;
        };
        return $4584;
    };
    const Maybe$is_some = x0 => Maybe$is_some$(x0);

    function Kind$Term$gol$(_name$1, _dref$2, _verb$3) {
        var $4587 = ({
            _: 'Kind.Term.gol',
            'name': _name$1,
            'dref': _dref$2,
            'verb': _verb$3
        });
        return $4587;
    };
    const Kind$Term$gol = x0 => x1 => x2 => Kind$Term$gol$(x0, x1, x2);

    function Kind$Parser$goal$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $4589 = self.idx;
                var $4590 = self.code;
                var $4591 = self.err;
                var $4592 = Parser$Reply$error$($4589, $4590, $4591);
                var $4588 = $4592;
                break;
            case 'Parser.Reply.value':
                var $4593 = self.idx;
                var $4594 = self.code;
                var $4595 = self.val;
                var self = Kind$Parser$text$("?", $4593, $4594);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $4597 = self.idx;
                        var $4598 = self.code;
                        var $4599 = self.err;
                        var $4600 = Parser$Reply$error$($4597, $4598, $4599);
                        var $4596 = $4600;
                        break;
                    case 'Parser.Reply.value':
                        var $4601 = self.idx;
                        var $4602 = self.code;
                        var self = Kind$Parser$name$($4601, $4602);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $4604 = self.idx;
                                var $4605 = self.code;
                                var $4606 = self.err;
                                var $4607 = Parser$Reply$error$($4604, $4605, $4606);
                                var $4603 = $4607;
                                break;
                            case 'Parser.Reply.value':
                                var $4608 = self.idx;
                                var $4609 = self.code;
                                var $4610 = self.val;
                                var self = Parser$many$((_idx$12 => _code$13 => {
                                    var self = Kind$Parser$text$("-", _idx$12, _code$13);
                                    switch (self._) {
                                        case 'Parser.Reply.error':
                                            var $4613 = self.idx;
                                            var $4614 = self.code;
                                            var $4615 = self.err;
                                            var $4616 = Parser$Reply$error$($4613, $4614, $4615);
                                            var $4612 = $4616;
                                            break;
                                        case 'Parser.Reply.value':
                                            var $4617 = self.idx;
                                            var $4618 = self.code;
                                            var self = Parser$nat$($4617, $4618);
                                            switch (self._) {
                                                case 'Parser.Reply.error':
                                                    var $4620 = self.idx;
                                                    var $4621 = self.code;
                                                    var $4622 = self.err;
                                                    var $4623 = Parser$Reply$error$($4620, $4621, $4622);
                                                    var $4619 = $4623;
                                                    break;
                                                case 'Parser.Reply.value':
                                                    var $4624 = self.idx;
                                                    var $4625 = self.code;
                                                    var $4626 = self.val;
                                                    var _bits$20 = Bits$reverse$(Bits$tail$(Bits$reverse$((nat_to_bits($4626)))));
                                                    var $4627 = Parser$Reply$value$($4624, $4625, _bits$20);
                                                    var $4619 = $4627;
                                                    break;
                                            };
                                            var $4612 = $4619;
                                            break;
                                    };
                                    return $4612;
                                }))($4608)($4609);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $4628 = self.idx;
                                        var $4629 = self.code;
                                        var $4630 = self.err;
                                        var $4631 = Parser$Reply$error$($4628, $4629, $4630);
                                        var $4611 = $4631;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $4632 = self.idx;
                                        var $4633 = self.code;
                                        var $4634 = self.val;
                                        var self = Parser$maybe$(Parser$text("-"), $4632, $4633);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $4636 = self.idx;
                                                var $4637 = self.code;
                                                var $4638 = self.err;
                                                var $4639 = Parser$Reply$error$($4636, $4637, $4638);
                                                var self = $4639;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $4640 = self.idx;
                                                var $4641 = self.code;
                                                var $4642 = self.val;
                                                var $4643 = Parser$Reply$value$($4640, $4641, Maybe$is_some$($4642));
                                                var self = $4643;
                                                break;
                                        };
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $4644 = self.idx;
                                                var $4645 = self.code;
                                                var $4646 = self.err;
                                                var $4647 = Parser$Reply$error$($4644, $4645, $4646);
                                                var $4635 = $4647;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $4648 = self.idx;
                                                var $4649 = self.code;
                                                var $4650 = self.val;
                                                var self = Kind$Parser$stop$($4595, $4648, $4649);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $4652 = self.idx;
                                                        var $4653 = self.code;
                                                        var $4654 = self.err;
                                                        var $4655 = Parser$Reply$error$($4652, $4653, $4654);
                                                        var $4651 = $4655;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $4656 = self.idx;
                                                        var $4657 = self.code;
                                                        var $4658 = self.val;
                                                        var $4659 = Parser$Reply$value$($4656, $4657, Kind$Term$ori$($4658, Kind$Term$gol$($4610, $4634, $4650)));
                                                        var $4651 = $4659;
                                                        break;
                                                };
                                                var $4635 = $4651;
                                                break;
                                        };
                                        var $4611 = $4635;
                                        break;
                                };
                                var $4603 = $4611;
                                break;
                        };
                        var $4596 = $4603;
                        break;
                };
                var $4588 = $4596;
                break;
        };
        return $4588;
    };
    const Kind$Parser$goal = x0 => x1 => Kind$Parser$goal$(x0, x1);

    function Kind$Parser$hole$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $4661 = self.idx;
                var $4662 = self.code;
                var $4663 = self.err;
                var $4664 = Parser$Reply$error$($4661, $4662, $4663);
                var $4660 = $4664;
                break;
            case 'Parser.Reply.value':
                var $4665 = self.idx;
                var $4666 = self.code;
                var $4667 = self.val;
                var self = Kind$Parser$text$("_", $4665, $4666);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $4669 = self.idx;
                        var $4670 = self.code;
                        var $4671 = self.err;
                        var $4672 = Parser$Reply$error$($4669, $4670, $4671);
                        var $4668 = $4672;
                        break;
                    case 'Parser.Reply.value':
                        var $4673 = self.idx;
                        var $4674 = self.code;
                        var self = Kind$Parser$stop$($4667, $4673, $4674);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $4676 = self.idx;
                                var $4677 = self.code;
                                var $4678 = self.err;
                                var $4679 = Parser$Reply$error$($4676, $4677, $4678);
                                var $4675 = $4679;
                                break;
                            case 'Parser.Reply.value':
                                var $4680 = self.idx;
                                var $4681 = self.code;
                                var $4682 = self.val;
                                var $4683 = Parser$Reply$value$($4680, $4681, Kind$Term$ori$($4682, Kind$Term$hol$(Bits$e)));
                                var $4675 = $4683;
                                break;
                        };
                        var $4668 = $4675;
                        break;
                };
                var $4660 = $4668;
                break;
        };
        return $4660;
    };
    const Kind$Parser$hole = x0 => x1 => Kind$Parser$hole$(x0, x1);

    function Kind$Parser$float$sign$(_idx$1, _code$2) {
        var self = _code$2;
        if (self.length === 0) {
            var $4685 = Parser$Reply$error$(_idx$1, _code$2, "Expected \'+\' or \'-\'.");
            var $4684 = $4685;
        } else {
            var $4686 = self.charCodeAt(0);
            var $4687 = self.slice(1);
            var _sidx$5 = Nat$succ$(_idx$1);
            var self = (($4686 === 43) || ($4686 === 45));
            if (self) {
                var $4689 = Parser$Reply$value$(_sidx$5, $4687, $4686);
                var $4688 = $4689;
            } else {
                var $4690 = Parser$Reply$error$(_idx$1, _code$2, "Expected \'+\' ou \'-\'.");
                var $4688 = $4690;
            };
            var $4684 = $4688;
        };
        return $4684;
    };
    const Kind$Parser$float$sign = x0 => x1 => Kind$Parser$float$sign$(x0, x1);

    function List$any$(_cond$2, _list$3) {
        var List$any$ = (_cond$2, _list$3) => ({
            ctr: 'TCO',
            arg: [_cond$2, _list$3]
        });
        var List$any = _cond$2 => _list$3 => List$any$(_cond$2, _list$3);
        var arg = [_cond$2, _list$3];
        while (true) {
            let [_cond$2, _list$3] = arg;
            var R = (() => {
                var self = _list$3;
                switch (self._) {
                    case 'List.cons':
                        var $4691 = self.head;
                        var $4692 = self.tail;
                        var self = _cond$2($4691);
                        if (self) {
                            var $4694 = Bool$true;
                            var $4693 = $4694;
                        } else {
                            var $4695 = List$any$(_cond$2, $4692);
                            var $4693 = $4695;
                        };
                        return $4693;
                    case 'List.nil':
                        var $4696 = Bool$false;
                        return $4696;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const List$any = x0 => x1 => List$any$(x0, x1);

    function Kind$Parser$float$str_digit$(_idx$1, _code$2) {
        var self = _code$2;
        if (self.length === 0) {
            var $4698 = Parser$Reply$error$(_idx$1, _code$2, "Not a digit.");
            var $4697 = $4698;
        } else {
            var $4699 = self.charCodeAt(0);
            var $4700 = self.slice(1);
            var _sidx$5 = Nat$succ$(_idx$1);
            var _digits$6 = List$cons$(48, List$cons$(49, List$cons$(50, List$cons$(51, List$cons$(52, List$cons$(52, List$cons$(53, List$cons$(54, List$cons$(55, List$cons$(56, List$cons$(57, List$nil)))))))))));
            var self = List$any$(a1 => ($4699 === a1), _digits$6);
            if (self) {
                var $4702 = Parser$Reply$value$(_sidx$5, $4700, $4699);
                var $4701 = $4702;
            } else {
                var $4703 = Parser$Reply$error$(_idx$1, _code$2, "Not a digit.");
                var $4701 = $4703;
            };
            var $4697 = $4701;
        };
        return $4697;
    };
    const Kind$Parser$float$str_digit = x0 => x1 => Kind$Parser$float$str_digit$(x0, x1);

    function String$from_list$(_xs$1) {
        var self = _xs$1;
        switch (self._) {
            case 'List.cons':
                var $4705 = self.head;
                var $4706 = self.tail;
                var $4707 = String$cons$($4705, String$from_list$($4706));
                var $4704 = $4707;
                break;
            case 'List.nil':
                var $4708 = String$nil;
                var $4704 = $4708;
                break;
        };
        return $4704;
    };
    const String$from_list = x0 => String$from_list$(x0);

    function Kind$Parser$float$64$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $4710 = self.idx;
                var $4711 = self.code;
                var $4712 = self.err;
                var $4713 = Parser$Reply$error$($4710, $4711, $4712);
                var $4709 = $4713;
                break;
            case 'Parser.Reply.value':
                var $4714 = self.idx;
                var $4715 = self.code;
                var $4716 = self.val;
                var self = Parser$maybe$(Kind$Parser$float$sign, $4714, $4715);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $4718 = self.idx;
                        var $4719 = self.code;
                        var $4720 = self.err;
                        var $4721 = Parser$Reply$error$($4718, $4719, $4720);
                        var $4717 = $4721;
                        break;
                    case 'Parser.Reply.value':
                        var $4722 = self.idx;
                        var $4723 = self.code;
                        var $4724 = self.val;
                        var _sign$9 = Maybe$default$($4724, 43);
                        var self = Parser$many1$(Kind$Parser$float$str_digit, $4722, $4723);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $4726 = self.idx;
                                var $4727 = self.code;
                                var $4728 = self.err;
                                var $4729 = Parser$Reply$error$($4726, $4727, $4728);
                                var $4725 = $4729;
                                break;
                            case 'Parser.Reply.value':
                                var $4730 = self.idx;
                                var $4731 = self.code;
                                var $4732 = self.val;
                                var self = Parser$text$(".", $4730, $4731);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $4734 = self.idx;
                                        var $4735 = self.code;
                                        var $4736 = self.err;
                                        var $4737 = Parser$Reply$error$($4734, $4735, $4736);
                                        var $4733 = $4737;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $4738 = self.idx;
                                        var $4739 = self.code;
                                        var self = Parser$many1$(Kind$Parser$float$str_digit, $4738, $4739);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $4741 = self.idx;
                                                var $4742 = self.code;
                                                var $4743 = self.err;
                                                var $4744 = Parser$Reply$error$($4741, $4742, $4743);
                                                var $4740 = $4744;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $4745 = self.idx;
                                                var $4746 = self.code;
                                                var $4747 = self.val;
                                                var self = Parser$text$("#64", $4745, $4746);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $4749 = self.idx;
                                                        var $4750 = self.code;
                                                        var $4751 = self.err;
                                                        var $4752 = Parser$Reply$error$($4749, $4750, $4751);
                                                        var $4748 = $4752;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $4753 = self.idx;
                                                        var $4754 = self.code;
                                                        var _float_str$22 = Kind$Term$str$((String$cons$(_sign$9, String$from_list$($4732)) + ("." + String$from_list$($4747))));
                                                        var _conv$23 = Kind$Term$ref$("F64.parse");
                                                        var _term$24 = Kind$Term$app$(_conv$23, _float_str$22);
                                                        var self = Kind$Parser$stop$($4716, $4753, $4754);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $4756 = self.idx;
                                                                var $4757 = self.code;
                                                                var $4758 = self.err;
                                                                var $4759 = Parser$Reply$error$($4756, $4757, $4758);
                                                                var $4755 = $4759;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $4760 = self.idx;
                                                                var $4761 = self.code;
                                                                var $4762 = self.val;
                                                                var $4763 = Parser$Reply$value$($4760, $4761, Kind$Term$ori$($4762, _term$24));
                                                                var $4755 = $4763;
                                                                break;
                                                        };
                                                        var $4748 = $4755;
                                                        break;
                                                };
                                                var $4740 = $4748;
                                                break;
                                        };
                                        var $4733 = $4740;
                                        break;
                                };
                                var $4725 = $4733;
                                break;
                        };
                        var $4717 = $4725;
                        break;
                };
                var $4709 = $4717;
                break;
        };
        return $4709;
    };
    const Kind$Parser$float$64 = x0 => x1 => Kind$Parser$float$64$(x0, x1);

    function Kind$Parser$float$32$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $4765 = self.idx;
                var $4766 = self.code;
                var $4767 = self.err;
                var $4768 = Parser$Reply$error$($4765, $4766, $4767);
                var $4764 = $4768;
                break;
            case 'Parser.Reply.value':
                var $4769 = self.idx;
                var $4770 = self.code;
                var $4771 = self.val;
                var self = Parser$maybe$(Kind$Parser$float$sign, $4769, $4770);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $4773 = self.idx;
                        var $4774 = self.code;
                        var $4775 = self.err;
                        var $4776 = Parser$Reply$error$($4773, $4774, $4775);
                        var $4772 = $4776;
                        break;
                    case 'Parser.Reply.value':
                        var $4777 = self.idx;
                        var $4778 = self.code;
                        var $4779 = self.val;
                        var _sign$9 = Maybe$default$($4779, 43);
                        var self = Parser$many1$(Kind$Parser$float$str_digit, $4777, $4778);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $4781 = self.idx;
                                var $4782 = self.code;
                                var $4783 = self.err;
                                var $4784 = Parser$Reply$error$($4781, $4782, $4783);
                                var $4780 = $4784;
                                break;
                            case 'Parser.Reply.value':
                                var $4785 = self.idx;
                                var $4786 = self.code;
                                var $4787 = self.val;
                                var self = Parser$text$(".", $4785, $4786);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $4789 = self.idx;
                                        var $4790 = self.code;
                                        var $4791 = self.err;
                                        var $4792 = Parser$Reply$error$($4789, $4790, $4791);
                                        var $4788 = $4792;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $4793 = self.idx;
                                        var $4794 = self.code;
                                        var self = Parser$many1$(Kind$Parser$float$str_digit, $4793, $4794);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $4796 = self.idx;
                                                var $4797 = self.code;
                                                var $4798 = self.err;
                                                var $4799 = Parser$Reply$error$($4796, $4797, $4798);
                                                var $4795 = $4799;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $4800 = self.idx;
                                                var $4801 = self.code;
                                                var $4802 = self.val;
                                                var self = Parser$text$("#32", $4800, $4801);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $4804 = self.idx;
                                                        var $4805 = self.code;
                                                        var $4806 = self.err;
                                                        var $4807 = Parser$Reply$error$($4804, $4805, $4806);
                                                        var $4803 = $4807;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $4808 = self.idx;
                                                        var $4809 = self.code;
                                                        var _float_str$22 = Kind$Term$str$((String$cons$(_sign$9, String$from_list$($4787)) + ("." + String$from_list$($4802))));
                                                        var _conv$23 = Kind$Term$ref$("F32.parse");
                                                        var _term$24 = Kind$Term$app$(_conv$23, _float_str$22);
                                                        var self = Kind$Parser$stop$($4771, $4808, $4809);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $4811 = self.idx;
                                                                var $4812 = self.code;
                                                                var $4813 = self.err;
                                                                var $4814 = Parser$Reply$error$($4811, $4812, $4813);
                                                                var $4810 = $4814;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $4815 = self.idx;
                                                                var $4816 = self.code;
                                                                var $4817 = self.val;
                                                                var $4818 = Parser$Reply$value$($4815, $4816, Kind$Term$ori$($4817, _term$24));
                                                                var $4810 = $4818;
                                                                break;
                                                        };
                                                        var $4803 = $4810;
                                                        break;
                                                };
                                                var $4795 = $4803;
                                                break;
                                        };
                                        var $4788 = $4795;
                                        break;
                                };
                                var $4780 = $4788;
                                break;
                        };
                        var $4772 = $4780;
                        break;
                };
                var $4764 = $4772;
                break;
        };
        return $4764;
    };
    const Kind$Parser$float$32 = x0 => x1 => Kind$Parser$float$32$(x0, x1);

    function Either$(_A$1, _B$2) {
        var $4819 = null;
        return $4819;
    };
    const Either = x0 => x1 => Either$(x0, x1);

    function Either$left$(_value$3) {
        var $4820 = ({
            _: 'Either.left',
            'value': _value$3
        });
        return $4820;
    };
    const Either$left = x0 => Either$left$(x0);

    function Either$right$(_value$3) {
        var $4821 = ({
            _: 'Either.right',
            'value': _value$3
        });
        return $4821;
    };
    const Either$right = x0 => Either$right$(x0);

    function Nat$sub_rem$(_n$1, _m$2) {
        var Nat$sub_rem$ = (_n$1, _m$2) => ({
            ctr: 'TCO',
            arg: [_n$1, _m$2]
        });
        var Nat$sub_rem = _n$1 => _m$2 => Nat$sub_rem$(_n$1, _m$2);
        var arg = [_n$1, _m$2];
        while (true) {
            let [_n$1, _m$2] = arg;
            var R = (() => {
                var self = _m$2;
                if (self === 0n) {
                    var $4822 = Either$left$(_n$1);
                    return $4822;
                } else {
                    var $4823 = (self - 1n);
                    var self = _n$1;
                    if (self === 0n) {
                        var $4825 = Either$right$(Nat$succ$($4823));
                        var $4824 = $4825;
                    } else {
                        var $4826 = (self - 1n);
                        var $4827 = Nat$sub_rem$($4826, $4823);
                        var $4824 = $4827;
                    };
                    return $4824;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Nat$sub_rem = x0 => x1 => Nat$sub_rem$(x0, x1);

    function Nat$div_mod$go$(_n$1, _m$2, _d$3) {
        var Nat$div_mod$go$ = (_n$1, _m$2, _d$3) => ({
            ctr: 'TCO',
            arg: [_n$1, _m$2, _d$3]
        });
        var Nat$div_mod$go = _n$1 => _m$2 => _d$3 => Nat$div_mod$go$(_n$1, _m$2, _d$3);
        var arg = [_n$1, _m$2, _d$3];
        while (true) {
            let [_n$1, _m$2, _d$3] = arg;
            var R = (() => {
                var self = Nat$sub_rem$(_n$1, _m$2);
                switch (self._) {
                    case 'Either.left':
                        var $4828 = self.value;
                        var $4829 = Nat$div_mod$go$($4828, _m$2, Nat$succ$(_d$3));
                        return $4829;
                    case 'Either.right':
                        var $4830 = Pair$new$(_d$3, _n$1);
                        return $4830;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Nat$div_mod$go = x0 => x1 => x2 => Nat$div_mod$go$(x0, x1, x2);
    const Nat$div_mod = a0 => a1 => (({
        _: 'Pair.new',
        'fst': a0 / a1,
        'snd': a0 % a1
    }));

    function Nat$to_base$go$(_base$1, _nat$2, _res$3) {
        var Nat$to_base$go$ = (_base$1, _nat$2, _res$3) => ({
            ctr: 'TCO',
            arg: [_base$1, _nat$2, _res$3]
        });
        var Nat$to_base$go = _base$1 => _nat$2 => _res$3 => Nat$to_base$go$(_base$1, _nat$2, _res$3);
        var arg = [_base$1, _nat$2, _res$3];
        while (true) {
            let [_base$1, _nat$2, _res$3] = arg;
            var R = (() => {
                var self = (({
                    _: 'Pair.new',
                    'fst': _nat$2 / _base$1,
                    'snd': _nat$2 % _base$1
                }));
                switch (self._) {
                    case 'Pair.new':
                        var $4831 = self.fst;
                        var $4832 = self.snd;
                        var self = $4831;
                        if (self === 0n) {
                            var $4834 = List$cons$($4832, _res$3);
                            var $4833 = $4834;
                        } else {
                            var $4835 = (self - 1n);
                            var $4836 = Nat$to_base$go$(_base$1, $4831, List$cons$($4832, _res$3));
                            var $4833 = $4836;
                        };
                        return $4833;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Nat$to_base$go = x0 => x1 => x2 => Nat$to_base$go$(x0, x1, x2);

    function Nat$to_base$(_base$1, _nat$2) {
        var $4837 = Nat$to_base$go$(_base$1, _nat$2, List$nil);
        return $4837;
    };
    const Nat$to_base = x0 => x1 => Nat$to_base$(x0, x1);

    function Nat$mod$go$(_n$1, _m$2, _r$3) {
        var Nat$mod$go$ = (_n$1, _m$2, _r$3) => ({
            ctr: 'TCO',
            arg: [_n$1, _m$2, _r$3]
        });
        var Nat$mod$go = _n$1 => _m$2 => _r$3 => Nat$mod$go$(_n$1, _m$2, _r$3);
        var arg = [_n$1, _m$2, _r$3];
        while (true) {
            let [_n$1, _m$2, _r$3] = arg;
            var R = (() => {
                var self = _m$2;
                if (self === 0n) {
                    var $4838 = Nat$mod$go$(_n$1, _r$3, _m$2);
                    return $4838;
                } else {
                    var $4839 = (self - 1n);
                    var self = _n$1;
                    if (self === 0n) {
                        var $4841 = _r$3;
                        var $4840 = $4841;
                    } else {
                        var $4842 = (self - 1n);
                        var $4843 = Nat$mod$go$($4842, $4839, Nat$succ$(_r$3));
                        var $4840 = $4843;
                    };
                    return $4840;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Nat$mod$go = x0 => x1 => x2 => Nat$mod$go$(x0, x1, x2);
    const Nat$mod = a0 => a1 => (a0 % a1);
    const Nat$lte = a0 => a1 => (a0 <= a1);

    function List$at$(_index$2, _list$3) {
        var List$at$ = (_index$2, _list$3) => ({
            ctr: 'TCO',
            arg: [_index$2, _list$3]
        });
        var List$at = _index$2 => _list$3 => List$at$(_index$2, _list$3);
        var arg = [_index$2, _list$3];
        while (true) {
            let [_index$2, _list$3] = arg;
            var R = (() => {
                var self = _list$3;
                switch (self._) {
                    case 'List.cons':
                        var $4844 = self.head;
                        var $4845 = self.tail;
                        var self = _index$2;
                        if (self === 0n) {
                            var $4847 = Maybe$some$($4844);
                            var $4846 = $4847;
                        } else {
                            var $4848 = (self - 1n);
                            var $4849 = List$at$($4848, $4845);
                            var $4846 = $4849;
                        };
                        return $4846;
                    case 'List.nil':
                        var $4850 = Maybe$none;
                        return $4850;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const List$at = x0 => x1 => List$at$(x0, x1);

    function Nat$show_digit$(_base$1, _n$2) {
        var _m$3 = (_n$2 % _base$1);
        var _base64$4 = List$cons$(48, List$cons$(49, List$cons$(50, List$cons$(51, List$cons$(52, List$cons$(53, List$cons$(54, List$cons$(55, List$cons$(56, List$cons$(57, List$cons$(65, List$cons$(66, List$cons$(67, List$cons$(68, List$cons$(69, List$cons$(70, List$cons$(71, List$cons$(72, List$cons$(73, List$cons$(74, List$cons$(75, List$cons$(76, List$cons$(77, List$cons$(78, List$cons$(79, List$cons$(80, List$cons$(81, List$cons$(82, List$cons$(83, List$cons$(84, List$cons$(85, List$cons$(86, List$cons$(87, List$cons$(88, List$cons$(89, List$cons$(90, List$cons$(97, List$cons$(98, List$cons$(99, List$cons$(100, List$cons$(101, List$cons$(102, List$cons$(103, List$cons$(104, List$cons$(105, List$cons$(106, List$cons$(107, List$cons$(108, List$cons$(109, List$cons$(110, List$cons$(111, List$cons$(112, List$cons$(113, List$cons$(114, List$cons$(115, List$cons$(116, List$cons$(117, List$cons$(118, List$cons$(119, List$cons$(120, List$cons$(121, List$cons$(122, List$cons$(43, List$cons$(47, List$nil))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))));
        var self = ((_base$1 > 0n) && (_base$1 <= 64n));
        if (self) {
            var self = List$at$(_m$3, _base64$4);
            switch (self._) {
                case 'Maybe.some':
                    var $4853 = self.value;
                    var $4854 = $4853;
                    var $4852 = $4854;
                    break;
                case 'Maybe.none':
                    var $4855 = 35;
                    var $4852 = $4855;
                    break;
            };
            var $4851 = $4852;
        } else {
            var $4856 = 35;
            var $4851 = $4856;
        };
        return $4851;
    };
    const Nat$show_digit = x0 => x1 => Nat$show_digit$(x0, x1);

    function Nat$to_string_base$(_base$1, _nat$2) {
        var $4857 = List$fold$(Nat$to_base$(_base$1, _nat$2), String$nil, (_n$3 => _str$4 => {
            var $4858 = String$cons$(Nat$show_digit$(_base$1, _n$3), _str$4);
            return $4858;
        }));
        return $4857;
    };
    const Nat$to_string_base = x0 => x1 => Nat$to_string_base$(x0, x1);

    function Nat$show$(_n$1) {
        var $4859 = Nat$to_string_base$(10n, _n$1);
        return $4859;
    };
    const Nat$show = x0 => Nat$show$(x0);

    function Kind$Parser$int_pos$(_idx$1, _code$2) {
        var self = Parser$text$("+", _idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $4861 = self.idx;
                var $4862 = self.code;
                var $4863 = self.err;
                var $4864 = Parser$Reply$error$($4861, $4862, $4863);
                var $4860 = $4864;
                break;
            case 'Parser.Reply.value':
                var $4865 = self.idx;
                var $4866 = self.code;
                var self = Parser$many1$(Parser$digit, $4865, $4866);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $4868 = self.idx;
                        var $4869 = self.code;
                        var $4870 = self.err;
                        var $4871 = Parser$Reply$error$($4868, $4869, $4870);
                        var $4867 = $4871;
                        break;
                    case 'Parser.Reply.value':
                        var $4872 = self.idx;
                        var $4873 = self.code;
                        var $4874 = self.val;
                        var $4875 = Parser$Reply$value$($4872, $4873, Pair$new$(Bool$true, Nat$from_base$(10n, $4874)));
                        var $4867 = $4875;
                        break;
                };
                var $4860 = $4867;
                break;
        };
        return $4860;
    };
    const Kind$Parser$int_pos = x0 => x1 => Kind$Parser$int_pos$(x0, x1);

    function Kind$Parser$int_neg$(_idx$1, _code$2) {
        var self = Parser$text$("-", _idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $4877 = self.idx;
                var $4878 = self.code;
                var $4879 = self.err;
                var $4880 = Parser$Reply$error$($4877, $4878, $4879);
                var $4876 = $4880;
                break;
            case 'Parser.Reply.value':
                var $4881 = self.idx;
                var $4882 = self.code;
                var self = Parser$many1$(Parser$digit, $4881, $4882);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $4884 = self.idx;
                        var $4885 = self.code;
                        var $4886 = self.err;
                        var $4887 = Parser$Reply$error$($4884, $4885, $4886);
                        var $4883 = $4887;
                        break;
                    case 'Parser.Reply.value':
                        var $4888 = self.idx;
                        var $4889 = self.code;
                        var $4890 = self.val;
                        var $4891 = Parser$Reply$value$($4888, $4889, Pair$new$(Bool$false, Nat$from_base$(10n, $4890)));
                        var $4883 = $4891;
                        break;
                };
                var $4876 = $4883;
                break;
        };
        return $4876;
    };
    const Kind$Parser$int_neg = x0 => x1 => Kind$Parser$int_neg$(x0, x1);

    function Kind$Parser$int$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $4893 = self.idx;
                var $4894 = self.code;
                var $4895 = self.err;
                var $4896 = Parser$Reply$error$($4893, $4894, $4895);
                var $4892 = $4896;
                break;
            case 'Parser.Reply.value':
                var $4897 = self.idx;
                var $4898 = self.code;
                var $4899 = self.val;
                var self = Kind$Parser$spaces($4897)($4898);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $4901 = self.idx;
                        var $4902 = self.code;
                        var $4903 = self.err;
                        var $4904 = Parser$Reply$error$($4901, $4902, $4903);
                        var $4900 = $4904;
                        break;
                    case 'Parser.Reply.value':
                        var $4905 = self.idx;
                        var $4906 = self.code;
                        var self = Parser$first_of$(List$cons$(Kind$Parser$int_pos, List$cons$(Kind$Parser$int_neg, List$nil)))($4905)($4906);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $4908 = self.idx;
                                var $4909 = self.code;
                                var $4910 = self.err;
                                var $4911 = Parser$Reply$error$($4908, $4909, $4910);
                                var $4907 = $4911;
                                break;
                            case 'Parser.Reply.value':
                                var $4912 = self.idx;
                                var $4913 = self.code;
                                var $4914 = self.val;
                                var self = $4914;
                                switch (self._) {
                                    case 'Pair.new':
                                        var $4916 = self.fst;
                                        var $4917 = self.snd;
                                        var _ret$14 = Kind$Term$ref$("Int.from_nat");
                                        var _ret$15 = Kind$Term$app$(_ret$14, Kind$Term$nat$($4917));
                                        var self = $4916;
                                        if (self) {
                                            var $4919 = _ret$15;
                                            var $4918 = $4919;
                                        } else {
                                            var _inv$16 = Kind$Term$ref$("Int.neg");
                                            var $4920 = Kind$Term$app$(_inv$16, _ret$15);
                                            var $4918 = $4920;
                                        };
                                        var _term$12 = $4918;
                                        break;
                                };
                                var self = Kind$Parser$stop$($4899, $4912, $4913);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $4921 = self.idx;
                                        var $4922 = self.code;
                                        var $4923 = self.err;
                                        var $4924 = Parser$Reply$error$($4921, $4922, $4923);
                                        var $4915 = $4924;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $4925 = self.idx;
                                        var $4926 = self.code;
                                        var $4927 = self.val;
                                        var $4928 = Parser$Reply$value$($4925, $4926, Kind$Term$ori$($4927, _term$12));
                                        var $4915 = $4928;
                                        break;
                                };
                                var $4907 = $4915;
                                break;
                        };
                        var $4900 = $4907;
                        break;
                };
                var $4892 = $4900;
                break;
        };
        return $4892;
    };
    const Kind$Parser$int = x0 => x1 => Kind$Parser$int$(x0, x1);

    function Kind$Parser$machine_integer$signed$(_size$1) {
        var _size_str$2 = Nat$show$(_size$1);
        var $4929 = (_idx$3 => _code$4 => {
            var self = Kind$Parser$init$(_idx$3, _code$4);
            switch (self._) {
                case 'Parser.Reply.error':
                    var $4931 = self.idx;
                    var $4932 = self.code;
                    var $4933 = self.err;
                    var $4934 = Parser$Reply$error$($4931, $4932, $4933);
                    var $4930 = $4934;
                    break;
                case 'Parser.Reply.value':
                    var $4935 = self.idx;
                    var $4936 = self.code;
                    var $4937 = self.val;
                    var self = Kind$Parser$spaces($4935)($4936);
                    switch (self._) {
                        case 'Parser.Reply.error':
                            var $4939 = self.idx;
                            var $4940 = self.code;
                            var $4941 = self.err;
                            var $4942 = Parser$Reply$error$($4939, $4940, $4941);
                            var $4938 = $4942;
                            break;
                        case 'Parser.Reply.value':
                            var $4943 = self.idx;
                            var $4944 = self.code;
                            var self = Kind$Parser$int$($4943, $4944);
                            switch (self._) {
                                case 'Parser.Reply.error':
                                    var $4946 = self.idx;
                                    var $4947 = self.code;
                                    var $4948 = self.err;
                                    var $4949 = Parser$Reply$error$($4946, $4947, $4948);
                                    var $4945 = $4949;
                                    break;
                                case 'Parser.Reply.value':
                                    var $4950 = self.idx;
                                    var $4951 = self.code;
                                    var $4952 = self.val;
                                    var self = Parser$text$(("#" + _size_str$2), $4950, $4951);
                                    switch (self._) {
                                        case 'Parser.Reply.error':
                                            var $4954 = self.idx;
                                            var $4955 = self.code;
                                            var $4956 = self.err;
                                            var $4957 = Parser$Reply$error$($4954, $4955, $4956);
                                            var $4953 = $4957;
                                            break;
                                        case 'Parser.Reply.value':
                                            var $4958 = self.idx;
                                            var $4959 = self.code;
                                            var _term$17 = Kind$Term$ref$(("Int.to_i" + _size_str$2));
                                            var _term$18 = Kind$Term$app$(_term$17, $4952);
                                            var self = Kind$Parser$stop$($4937, $4958, $4959);
                                            switch (self._) {
                                                case 'Parser.Reply.error':
                                                    var $4961 = self.idx;
                                                    var $4962 = self.code;
                                                    var $4963 = self.err;
                                                    var $4964 = Parser$Reply$error$($4961, $4962, $4963);
                                                    var $4960 = $4964;
                                                    break;
                                                case 'Parser.Reply.value':
                                                    var $4965 = self.idx;
                                                    var $4966 = self.code;
                                                    var $4967 = self.val;
                                                    var $4968 = Parser$Reply$value$($4965, $4966, Kind$Term$ori$($4967, _term$18));
                                                    var $4960 = $4968;
                                                    break;
                                            };
                                            var $4953 = $4960;
                                            break;
                                    };
                                    var $4945 = $4953;
                                    break;
                            };
                            var $4938 = $4945;
                            break;
                    };
                    var $4930 = $4938;
                    break;
            };
            return $4930;
        });
        return $4929;
    };
    const Kind$Parser$machine_integer$signed = x0 => Kind$Parser$machine_integer$signed$(x0);

    function Parser$hex_digit$(_idx$1, _code$2) {
        var self = _code$2;
        if (self.length === 0) {
            var $4970 = Parser$Reply$error$(_idx$1, _code$2, "Not a digit.");
            var $4969 = $4970;
        } else {
            var $4971 = self.charCodeAt(0);
            var $4972 = self.slice(1);
            var _sidx$5 = Nat$succ$(_idx$1);
            var self = ($4971 === 48);
            if (self) {
                var $4974 = Parser$Reply$value$(_sidx$5, $4972, 0n);
                var $4973 = $4974;
            } else {
                var self = ($4971 === 49);
                if (self) {
                    var $4976 = Parser$Reply$value$(_sidx$5, $4972, 1n);
                    var $4975 = $4976;
                } else {
                    var self = ($4971 === 50);
                    if (self) {
                        var $4978 = Parser$Reply$value$(_sidx$5, $4972, 2n);
                        var $4977 = $4978;
                    } else {
                        var self = ($4971 === 51);
                        if (self) {
                            var $4980 = Parser$Reply$value$(_sidx$5, $4972, 3n);
                            var $4979 = $4980;
                        } else {
                            var self = ($4971 === 52);
                            if (self) {
                                var $4982 = Parser$Reply$value$(_sidx$5, $4972, 4n);
                                var $4981 = $4982;
                            } else {
                                var self = ($4971 === 53);
                                if (self) {
                                    var $4984 = Parser$Reply$value$(_sidx$5, $4972, 5n);
                                    var $4983 = $4984;
                                } else {
                                    var self = ($4971 === 54);
                                    if (self) {
                                        var $4986 = Parser$Reply$value$(_sidx$5, $4972, 6n);
                                        var $4985 = $4986;
                                    } else {
                                        var self = ($4971 === 55);
                                        if (self) {
                                            var $4988 = Parser$Reply$value$(_sidx$5, $4972, 7n);
                                            var $4987 = $4988;
                                        } else {
                                            var self = ($4971 === 56);
                                            if (self) {
                                                var $4990 = Parser$Reply$value$(_sidx$5, $4972, 8n);
                                                var $4989 = $4990;
                                            } else {
                                                var self = ($4971 === 57);
                                                if (self) {
                                                    var $4992 = Parser$Reply$value$(_sidx$5, $4972, 9n);
                                                    var $4991 = $4992;
                                                } else {
                                                    var self = ($4971 === 97);
                                                    if (self) {
                                                        var $4994 = Parser$Reply$value$(_sidx$5, $4972, 10n);
                                                        var $4993 = $4994;
                                                    } else {
                                                        var self = ($4971 === 98);
                                                        if (self) {
                                                            var $4996 = Parser$Reply$value$(_sidx$5, $4972, 11n);
                                                            var $4995 = $4996;
                                                        } else {
                                                            var self = ($4971 === 99);
                                                            if (self) {
                                                                var $4998 = Parser$Reply$value$(_sidx$5, $4972, 12n);
                                                                var $4997 = $4998;
                                                            } else {
                                                                var self = ($4971 === 100);
                                                                if (self) {
                                                                    var $5000 = Parser$Reply$value$(_sidx$5, $4972, 13n);
                                                                    var $4999 = $5000;
                                                                } else {
                                                                    var self = ($4971 === 101);
                                                                    if (self) {
                                                                        var $5002 = Parser$Reply$value$(_sidx$5, $4972, 14n);
                                                                        var $5001 = $5002;
                                                                    } else {
                                                                        var self = ($4971 === 102);
                                                                        if (self) {
                                                                            var $5004 = Parser$Reply$value$(_sidx$5, $4972, 15n);
                                                                            var $5003 = $5004;
                                                                        } else {
                                                                            var self = ($4971 === 65);
                                                                            if (self) {
                                                                                var $5006 = Parser$Reply$value$(_sidx$5, $4972, 10n);
                                                                                var $5005 = $5006;
                                                                            } else {
                                                                                var self = ($4971 === 66);
                                                                                if (self) {
                                                                                    var $5008 = Parser$Reply$value$(_sidx$5, $4972, 11n);
                                                                                    var $5007 = $5008;
                                                                                } else {
                                                                                    var self = ($4971 === 67);
                                                                                    if (self) {
                                                                                        var $5010 = Parser$Reply$value$(_sidx$5, $4972, 12n);
                                                                                        var $5009 = $5010;
                                                                                    } else {
                                                                                        var self = ($4971 === 68);
                                                                                        if (self) {
                                                                                            var $5012 = Parser$Reply$value$(_sidx$5, $4972, 13n);
                                                                                            var $5011 = $5012;
                                                                                        } else {
                                                                                            var self = ($4971 === 69);
                                                                                            if (self) {
                                                                                                var $5014 = Parser$Reply$value$(_sidx$5, $4972, 14n);
                                                                                                var $5013 = $5014;
                                                                                            } else {
                                                                                                var self = ($4971 === 70);
                                                                                                if (self) {
                                                                                                    var $5016 = Parser$Reply$value$(_sidx$5, $4972, 15n);
                                                                                                    var $5015 = $5016;
                                                                                                } else {
                                                                                                    var $5017 = Parser$Reply$error$(_idx$1, _code$2, "Not a digit.");
                                                                                                    var $5015 = $5017;
                                                                                                };
                                                                                                var $5013 = $5015;
                                                                                            };
                                                                                            var $5011 = $5013;
                                                                                        };
                                                                                        var $5009 = $5011;
                                                                                    };
                                                                                    var $5007 = $5009;
                                                                                };
                                                                                var $5005 = $5007;
                                                                            };
                                                                            var $5003 = $5005;
                                                                        };
                                                                        var $5001 = $5003;
                                                                    };
                                                                    var $4999 = $5001;
                                                                };
                                                                var $4997 = $4999;
                                                            };
                                                            var $4995 = $4997;
                                                        };
                                                        var $4993 = $4995;
                                                    };
                                                    var $4991 = $4993;
                                                };
                                                var $4989 = $4991;
                                            };
                                            var $4987 = $4989;
                                        };
                                        var $4985 = $4987;
                                    };
                                    var $4983 = $4985;
                                };
                                var $4981 = $4983;
                            };
                            var $4979 = $4981;
                        };
                        var $4977 = $4979;
                    };
                    var $4975 = $4977;
                };
                var $4973 = $4975;
            };
            var $4969 = $4973;
        };
        return $4969;
    };
    const Parser$hex_digit = x0 => x1 => Parser$hex_digit$(x0, x1);

    function Parser$hex_nat$(_idx$1, _code$2) {
        var self = Parser$text$("0x", _idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $5019 = self.idx;
                var $5020 = self.code;
                var $5021 = self.err;
                var $5022 = Parser$Reply$error$($5019, $5020, $5021);
                var $5018 = $5022;
                break;
            case 'Parser.Reply.value':
                var $5023 = self.idx;
                var $5024 = self.code;
                var self = Parser$many1$(Parser$hex_digit, $5023, $5024);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $5026 = self.idx;
                        var $5027 = self.code;
                        var $5028 = self.err;
                        var $5029 = Parser$Reply$error$($5026, $5027, $5028);
                        var $5025 = $5029;
                        break;
                    case 'Parser.Reply.value':
                        var $5030 = self.idx;
                        var $5031 = self.code;
                        var $5032 = self.val;
                        var $5033 = Parser$Reply$value$($5030, $5031, Nat$from_base$(16n, $5032));
                        var $5025 = $5033;
                        break;
                };
                var $5018 = $5025;
                break;
        };
        return $5018;
    };
    const Parser$hex_nat = x0 => x1 => Parser$hex_nat$(x0, x1);

    function Kind$Parser$nat$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $5035 = self.idx;
                var $5036 = self.code;
                var $5037 = self.err;
                var $5038 = Parser$Reply$error$($5035, $5036, $5037);
                var $5034 = $5038;
                break;
            case 'Parser.Reply.value':
                var $5039 = self.idx;
                var $5040 = self.code;
                var $5041 = self.val;
                var self = Kind$Parser$spaces($5039)($5040);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $5043 = self.idx;
                        var $5044 = self.code;
                        var $5045 = self.err;
                        var $5046 = Parser$Reply$error$($5043, $5044, $5045);
                        var $5042 = $5046;
                        break;
                    case 'Parser.Reply.value':
                        var $5047 = self.idx;
                        var $5048 = self.code;
                        var self = Parser$first_of$(List$cons$(Parser$hex_nat, List$cons$(Parser$nat, List$nil)))($5047)($5048);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $5050 = self.idx;
                                var $5051 = self.code;
                                var $5052 = self.err;
                                var $5053 = Parser$Reply$error$($5050, $5051, $5052);
                                var $5049 = $5053;
                                break;
                            case 'Parser.Reply.value':
                                var $5054 = self.idx;
                                var $5055 = self.code;
                                var $5056 = self.val;
                                var self = Kind$Parser$stop$($5041, $5054, $5055);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $5058 = self.idx;
                                        var $5059 = self.code;
                                        var $5060 = self.err;
                                        var $5061 = Parser$Reply$error$($5058, $5059, $5060);
                                        var $5057 = $5061;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $5062 = self.idx;
                                        var $5063 = self.code;
                                        var $5064 = self.val;
                                        var $5065 = Parser$Reply$value$($5062, $5063, Kind$Term$ori$($5064, Kind$Term$nat$($5056)));
                                        var $5057 = $5065;
                                        break;
                                };
                                var $5049 = $5057;
                                break;
                        };
                        var $5042 = $5049;
                        break;
                };
                var $5034 = $5042;
                break;
        };
        return $5034;
    };
    const Kind$Parser$nat = x0 => x1 => Kind$Parser$nat$(x0, x1);

    function Kind$Parser$machine_integer$unsigned$(_size$1) {
        var _size_str$2 = Nat$show$(_size$1);
        var $5066 = (_idx$3 => _code$4 => {
            var self = Kind$Parser$init$(_idx$3, _code$4);
            switch (self._) {
                case 'Parser.Reply.error':
                    var $5068 = self.idx;
                    var $5069 = self.code;
                    var $5070 = self.err;
                    var $5071 = Parser$Reply$error$($5068, $5069, $5070);
                    var $5067 = $5071;
                    break;
                case 'Parser.Reply.value':
                    var $5072 = self.idx;
                    var $5073 = self.code;
                    var $5074 = self.val;
                    var self = Kind$Parser$spaces($5072)($5073);
                    switch (self._) {
                        case 'Parser.Reply.error':
                            var $5076 = self.idx;
                            var $5077 = self.code;
                            var $5078 = self.err;
                            var $5079 = Parser$Reply$error$($5076, $5077, $5078);
                            var $5075 = $5079;
                            break;
                        case 'Parser.Reply.value':
                            var $5080 = self.idx;
                            var $5081 = self.code;
                            var self = Kind$Parser$nat$($5080, $5081);
                            switch (self._) {
                                case 'Parser.Reply.error':
                                    var $5083 = self.idx;
                                    var $5084 = self.code;
                                    var $5085 = self.err;
                                    var $5086 = Parser$Reply$error$($5083, $5084, $5085);
                                    var $5082 = $5086;
                                    break;
                                case 'Parser.Reply.value':
                                    var $5087 = self.idx;
                                    var $5088 = self.code;
                                    var $5089 = self.val;
                                    var self = Parser$text$(("#" + Nat$show$(_size$1)), $5087, $5088);
                                    switch (self._) {
                                        case 'Parser.Reply.error':
                                            var $5091 = self.idx;
                                            var $5092 = self.code;
                                            var $5093 = self.err;
                                            var $5094 = Parser$Reply$error$($5091, $5092, $5093);
                                            var $5090 = $5094;
                                            break;
                                        case 'Parser.Reply.value':
                                            var $5095 = self.idx;
                                            var $5096 = self.code;
                                            var _term$17 = Kind$Term$ref$(("Nat.to_u" + Nat$show$(_size$1)));
                                            var _term$18 = Kind$Term$app$(_term$17, $5089);
                                            var self = Kind$Parser$stop$($5074, $5095, $5096);
                                            switch (self._) {
                                                case 'Parser.Reply.error':
                                                    var $5098 = self.idx;
                                                    var $5099 = self.code;
                                                    var $5100 = self.err;
                                                    var $5101 = Parser$Reply$error$($5098, $5099, $5100);
                                                    var $5097 = $5101;
                                                    break;
                                                case 'Parser.Reply.value':
                                                    var $5102 = self.idx;
                                                    var $5103 = self.code;
                                                    var $5104 = self.val;
                                                    var $5105 = Parser$Reply$value$($5102, $5103, Kind$Term$ori$($5104, _term$18));
                                                    var $5097 = $5105;
                                                    break;
                                            };
                                            var $5090 = $5097;
                                            break;
                                    };
                                    var $5082 = $5090;
                                    break;
                            };
                            var $5075 = $5082;
                            break;
                    };
                    var $5067 = $5075;
                    break;
            };
            return $5067;
        });
        return $5066;
    };
    const Kind$Parser$machine_integer$unsigned = x0 => Kind$Parser$machine_integer$unsigned$(x0);

    function Kind$Parser$u64$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $5107 = self.idx;
                var $5108 = self.code;
                var $5109 = self.err;
                var $5110 = Parser$Reply$error$($5107, $5108, $5109);
                var $5106 = $5110;
                break;
            case 'Parser.Reply.value':
                var $5111 = self.idx;
                var $5112 = self.code;
                var $5113 = self.val;
                var self = Kind$Parser$spaces($5111)($5112);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $5115 = self.idx;
                        var $5116 = self.code;
                        var $5117 = self.err;
                        var $5118 = Parser$Reply$error$($5115, $5116, $5117);
                        var $5114 = $5118;
                        break;
                    case 'Parser.Reply.value':
                        var $5119 = self.idx;
                        var $5120 = self.code;
                        var self = Parser$nat$($5119, $5120);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $5122 = self.idx;
                                var $5123 = self.code;
                                var $5124 = self.err;
                                var $5125 = Parser$Reply$error$($5122, $5123, $5124);
                                var $5121 = $5125;
                                break;
                            case 'Parser.Reply.value':
                                var $5126 = self.idx;
                                var $5127 = self.code;
                                var $5128 = self.val;
                                var self = Parser$text$("l", $5126, $5127);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $5130 = self.idx;
                                        var $5131 = self.code;
                                        var $5132 = self.err;
                                        var $5133 = Parser$Reply$error$($5130, $5131, $5132);
                                        var $5129 = $5133;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $5134 = self.idx;
                                        var $5135 = self.code;
                                        var _term$15 = Kind$Term$ref$("Nat.to_u64");
                                        var _term$16 = Kind$Term$app$(_term$15, Kind$Term$nat$($5128));
                                        var self = Kind$Parser$stop$($5113, $5134, $5135);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $5137 = self.idx;
                                                var $5138 = self.code;
                                                var $5139 = self.err;
                                                var $5140 = Parser$Reply$error$($5137, $5138, $5139);
                                                var $5136 = $5140;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $5141 = self.idx;
                                                var $5142 = self.code;
                                                var $5143 = self.val;
                                                var $5144 = Parser$Reply$value$($5141, $5142, Kind$Term$ori$($5143, _term$16));
                                                var $5136 = $5144;
                                                break;
                                        };
                                        var $5129 = $5136;
                                        break;
                                };
                                var $5121 = $5129;
                                break;
                        };
                        var $5114 = $5121;
                        break;
                };
                var $5106 = $5114;
                break;
        };
        return $5106;
    };
    const Kind$Parser$u64 = x0 => x1 => Kind$Parser$u64$(x0, x1);

    function Kind$Parser$u32$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $5146 = self.idx;
                var $5147 = self.code;
                var $5148 = self.err;
                var $5149 = Parser$Reply$error$($5146, $5147, $5148);
                var $5145 = $5149;
                break;
            case 'Parser.Reply.value':
                var $5150 = self.idx;
                var $5151 = self.code;
                var $5152 = self.val;
                var self = Kind$Parser$spaces($5150)($5151);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $5154 = self.idx;
                        var $5155 = self.code;
                        var $5156 = self.err;
                        var $5157 = Parser$Reply$error$($5154, $5155, $5156);
                        var $5153 = $5157;
                        break;
                    case 'Parser.Reply.value':
                        var $5158 = self.idx;
                        var $5159 = self.code;
                        var self = Parser$nat$($5158, $5159);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $5161 = self.idx;
                                var $5162 = self.code;
                                var $5163 = self.err;
                                var $5164 = Parser$Reply$error$($5161, $5162, $5163);
                                var $5160 = $5164;
                                break;
                            case 'Parser.Reply.value':
                                var $5165 = self.idx;
                                var $5166 = self.code;
                                var $5167 = self.val;
                                var self = Parser$text$("u", $5165, $5166);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $5169 = self.idx;
                                        var $5170 = self.code;
                                        var $5171 = self.err;
                                        var $5172 = Parser$Reply$error$($5169, $5170, $5171);
                                        var $5168 = $5172;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $5173 = self.idx;
                                        var $5174 = self.code;
                                        var _term$15 = Kind$Term$ref$("Nat.to_u32");
                                        var _term$16 = Kind$Term$app$(_term$15, Kind$Term$nat$($5167));
                                        var self = Kind$Parser$stop$($5152, $5173, $5174);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $5176 = self.idx;
                                                var $5177 = self.code;
                                                var $5178 = self.err;
                                                var $5179 = Parser$Reply$error$($5176, $5177, $5178);
                                                var $5175 = $5179;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $5180 = self.idx;
                                                var $5181 = self.code;
                                                var $5182 = self.val;
                                                var $5183 = Parser$Reply$value$($5180, $5181, Kind$Term$ori$($5182, _term$16));
                                                var $5175 = $5183;
                                                break;
                                        };
                                        var $5168 = $5175;
                                        break;
                                };
                                var $5160 = $5168;
                                break;
                        };
                        var $5153 = $5160;
                        break;
                };
                var $5145 = $5153;
                break;
        };
        return $5145;
    };
    const Kind$Parser$u32 = x0 => x1 => Kind$Parser$u32$(x0, x1);

    function Kind$Parser$u16$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $5185 = self.idx;
                var $5186 = self.code;
                var $5187 = self.err;
                var $5188 = Parser$Reply$error$($5185, $5186, $5187);
                var $5184 = $5188;
                break;
            case 'Parser.Reply.value':
                var $5189 = self.idx;
                var $5190 = self.code;
                var $5191 = self.val;
                var self = Kind$Parser$spaces($5189)($5190);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $5193 = self.idx;
                        var $5194 = self.code;
                        var $5195 = self.err;
                        var $5196 = Parser$Reply$error$($5193, $5194, $5195);
                        var $5192 = $5196;
                        break;
                    case 'Parser.Reply.value':
                        var $5197 = self.idx;
                        var $5198 = self.code;
                        var self = Parser$nat$($5197, $5198);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $5200 = self.idx;
                                var $5201 = self.code;
                                var $5202 = self.err;
                                var $5203 = Parser$Reply$error$($5200, $5201, $5202);
                                var $5199 = $5203;
                                break;
                            case 'Parser.Reply.value':
                                var $5204 = self.idx;
                                var $5205 = self.code;
                                var $5206 = self.val;
                                var self = Parser$text$("s", $5204, $5205);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $5208 = self.idx;
                                        var $5209 = self.code;
                                        var $5210 = self.err;
                                        var $5211 = Parser$Reply$error$($5208, $5209, $5210);
                                        var $5207 = $5211;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $5212 = self.idx;
                                        var $5213 = self.code;
                                        var _term$15 = Kind$Term$ref$("Nat.to_u16");
                                        var _term$16 = Kind$Term$app$(_term$15, Kind$Term$nat$($5206));
                                        var self = Kind$Parser$stop$($5191, $5212, $5213);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $5215 = self.idx;
                                                var $5216 = self.code;
                                                var $5217 = self.err;
                                                var $5218 = Parser$Reply$error$($5215, $5216, $5217);
                                                var $5214 = $5218;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $5219 = self.idx;
                                                var $5220 = self.code;
                                                var $5221 = self.val;
                                                var $5222 = Parser$Reply$value$($5219, $5220, Kind$Term$ori$($5221, _term$16));
                                                var $5214 = $5222;
                                                break;
                                        };
                                        var $5207 = $5214;
                                        break;
                                };
                                var $5199 = $5207;
                                break;
                        };
                        var $5192 = $5199;
                        break;
                };
                var $5184 = $5192;
                break;
        };
        return $5184;
    };
    const Kind$Parser$u16 = x0 => x1 => Kind$Parser$u16$(x0, x1);

    function Kind$Parser$u8$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $5224 = self.idx;
                var $5225 = self.code;
                var $5226 = self.err;
                var $5227 = Parser$Reply$error$($5224, $5225, $5226);
                var $5223 = $5227;
                break;
            case 'Parser.Reply.value':
                var $5228 = self.idx;
                var $5229 = self.code;
                var $5230 = self.val;
                var self = Kind$Parser$spaces($5228)($5229);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $5232 = self.idx;
                        var $5233 = self.code;
                        var $5234 = self.err;
                        var $5235 = Parser$Reply$error$($5232, $5233, $5234);
                        var $5231 = $5235;
                        break;
                    case 'Parser.Reply.value':
                        var $5236 = self.idx;
                        var $5237 = self.code;
                        var self = Parser$nat$($5236, $5237);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $5239 = self.idx;
                                var $5240 = self.code;
                                var $5241 = self.err;
                                var $5242 = Parser$Reply$error$($5239, $5240, $5241);
                                var $5238 = $5242;
                                break;
                            case 'Parser.Reply.value':
                                var $5243 = self.idx;
                                var $5244 = self.code;
                                var $5245 = self.val;
                                var self = Parser$text$("b", $5243, $5244);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $5247 = self.idx;
                                        var $5248 = self.code;
                                        var $5249 = self.err;
                                        var $5250 = Parser$Reply$error$($5247, $5248, $5249);
                                        var $5246 = $5250;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $5251 = self.idx;
                                        var $5252 = self.code;
                                        var _term$15 = Kind$Term$ref$("Nat.to_u8");
                                        var _term$16 = Kind$Term$app$(_term$15, Kind$Term$nat$($5245));
                                        var self = Kind$Parser$stop$($5230, $5251, $5252);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $5254 = self.idx;
                                                var $5255 = self.code;
                                                var $5256 = self.err;
                                                var $5257 = Parser$Reply$error$($5254, $5255, $5256);
                                                var $5253 = $5257;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $5258 = self.idx;
                                                var $5259 = self.code;
                                                var $5260 = self.val;
                                                var $5261 = Parser$Reply$value$($5258, $5259, Kind$Term$ori$($5260, _term$16));
                                                var $5253 = $5261;
                                                break;
                                        };
                                        var $5246 = $5253;
                                        break;
                                };
                                var $5238 = $5246;
                                break;
                        };
                        var $5231 = $5238;
                        break;
                };
                var $5223 = $5231;
                break;
        };
        return $5223;
    };
    const Kind$Parser$u8 = x0 => x1 => Kind$Parser$u8$(x0, x1);

    function Kind$Parser$reference$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $5263 = self.idx;
                var $5264 = self.code;
                var $5265 = self.err;
                var $5266 = Parser$Reply$error$($5263, $5264, $5265);
                var $5262 = $5266;
                break;
            case 'Parser.Reply.value':
                var $5267 = self.idx;
                var $5268 = self.code;
                var $5269 = self.val;
                var self = Kind$Parser$name1$($5267, $5268);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $5271 = self.idx;
                        var $5272 = self.code;
                        var $5273 = self.err;
                        var $5274 = Parser$Reply$error$($5271, $5272, $5273);
                        var $5270 = $5274;
                        break;
                    case 'Parser.Reply.value':
                        var $5275 = self.idx;
                        var $5276 = self.code;
                        var $5277 = self.val;
                        var self = Kind$Parser$stop$($5269, $5275, $5276);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $5279 = self.idx;
                                var $5280 = self.code;
                                var $5281 = self.err;
                                var $5282 = Parser$Reply$error$($5279, $5280, $5281);
                                var $5278 = $5282;
                                break;
                            case 'Parser.Reply.value':
                                var $5283 = self.idx;
                                var $5284 = self.code;
                                var $5285 = self.val;
                                var self = ($5277 === "case");
                                if (self) {
                                    var $5287 = Parser$fail("Reserved keyword.");
                                    var $5286 = $5287;
                                } else {
                                    var self = ($5277 === "do");
                                    if (self) {
                                        var $5289 = Parser$fail("Reserved keyword.");
                                        var $5288 = $5289;
                                    } else {
                                        var self = ($5277 === "if");
                                        if (self) {
                                            var $5291 = Parser$fail("Reserved keyword.");
                                            var $5290 = $5291;
                                        } else {
                                            var self = ($5277 === "with");
                                            if (self) {
                                                var $5293 = Parser$fail("Reserved keyword.");
                                                var $5292 = $5293;
                                            } else {
                                                var self = ($5277 === "let");
                                                if (self) {
                                                    var $5295 = Parser$fail("Reserved keyword.");
                                                    var $5294 = $5295;
                                                } else {
                                                    var self = ($5277 === "def");
                                                    if (self) {
                                                        var $5297 = Parser$fail("Reserved keyword.");
                                                        var $5296 = $5297;
                                                    } else {
                                                        var self = ($5277 === "Type");
                                                        if (self) {
                                                            var $5299 = (_idx$12 => _code$13 => {
                                                                var $5300 = Parser$Reply$value$(_idx$12, _code$13, Kind$Term$ori$($5285, Kind$Term$typ));
                                                                return $5300;
                                                            });
                                                            var $5298 = $5299;
                                                        } else {
                                                            var self = ($5277 === "true");
                                                            if (self) {
                                                                var $5302 = (_idx$12 => _code$13 => {
                                                                    var $5303 = Parser$Reply$value$(_idx$12, _code$13, Kind$Term$ori$($5285, Kind$Term$ref$("Bool.true")));
                                                                    return $5303;
                                                                });
                                                                var $5301 = $5302;
                                                            } else {
                                                                var self = ($5277 === "false");
                                                                if (self) {
                                                                    var $5305 = (_idx$12 => _code$13 => {
                                                                        var $5306 = Parser$Reply$value$(_idx$12, _code$13, Kind$Term$ori$($5285, Kind$Term$ref$("Bool.false")));
                                                                        return $5306;
                                                                    });
                                                                    var $5304 = $5305;
                                                                } else {
                                                                    var self = ($5277 === "unit");
                                                                    if (self) {
                                                                        var $5308 = (_idx$12 => _code$13 => {
                                                                            var $5309 = Parser$Reply$value$(_idx$12, _code$13, Kind$Term$ori$($5285, Kind$Term$ref$("Unit.new")));
                                                                            return $5309;
                                                                        });
                                                                        var $5307 = $5308;
                                                                    } else {
                                                                        var self = ($5277 === "none");
                                                                        if (self) {
                                                                            var _term$12 = Kind$Term$ref$("Maybe.none");
                                                                            var _term$13 = Kind$Term$app$(_term$12, Kind$Term$hol$(Bits$e));
                                                                            var $5311 = (_idx$14 => _code$15 => {
                                                                                var $5312 = Parser$Reply$value$(_idx$14, _code$15, Kind$Term$ori$($5285, _term$13));
                                                                                return $5312;
                                                                            });
                                                                            var $5310 = $5311;
                                                                        } else {
                                                                            var self = ($5277 === "refl");
                                                                            if (self) {
                                                                                var _term$12 = Kind$Term$ref$("Equal.refl");
                                                                                var _term$13 = Kind$Term$app$(_term$12, Kind$Term$hol$(Bits$e));
                                                                                var _term$14 = Kind$Term$app$(_term$13, Kind$Term$hol$(Bits$e));
                                                                                var $5314 = (_idx$15 => _code$16 => {
                                                                                    var $5315 = Parser$Reply$value$(_idx$15, _code$16, Kind$Term$ori$($5285, _term$14));
                                                                                    return $5315;
                                                                                });
                                                                                var $5313 = $5314;
                                                                            } else {
                                                                                var $5316 = (_idx$12 => _code$13 => {
                                                                                    var $5317 = Parser$Reply$value$(_idx$12, _code$13, Kind$Term$ori$($5285, Kind$Term$ref$($5277)));
                                                                                    return $5317;
                                                                                });
                                                                                var $5313 = $5316;
                                                                            };
                                                                            var $5310 = $5313;
                                                                        };
                                                                        var $5307 = $5310;
                                                                    };
                                                                    var $5304 = $5307;
                                                                };
                                                                var $5301 = $5304;
                                                            };
                                                            var $5298 = $5301;
                                                        };
                                                        var $5296 = $5298;
                                                    };
                                                    var $5294 = $5296;
                                                };
                                                var $5292 = $5294;
                                            };
                                            var $5290 = $5292;
                                        };
                                        var $5288 = $5290;
                                    };
                                    var $5286 = $5288;
                                };
                                var $5286 = $5286($5283)($5284);
                                var $5278 = $5286;
                                break;
                        };
                        var $5270 = $5278;
                        break;
                };
                var $5262 = $5270;
                break;
        };
        return $5262;
    };
    const Kind$Parser$reference = x0 => x1 => Kind$Parser$reference$(x0, x1);
    const List$for = a0 => a1 => a2 => (list_for(a0)(a1)(a2));

    function Kind$Parser$application$(_init$1, _func$2, _idx$3, _code$4) {
        var self = Parser$text$("(", _idx$3, _code$4);
        switch (self._) {
            case 'Parser.Reply.error':
                var $5319 = self.idx;
                var $5320 = self.code;
                var $5321 = self.err;
                var $5322 = Parser$Reply$error$($5319, $5320, $5321);
                var $5318 = $5322;
                break;
            case 'Parser.Reply.value':
                var $5323 = self.idx;
                var $5324 = self.code;
                var self = Parser$until1$(Kind$Parser$text(")"), Kind$Parser$item(Kind$Parser$term), $5323, $5324);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $5326 = self.idx;
                        var $5327 = self.code;
                        var $5328 = self.err;
                        var $5329 = Parser$Reply$error$($5326, $5327, $5328);
                        var $5325 = $5329;
                        break;
                    case 'Parser.Reply.value':
                        var $5330 = self.idx;
                        var $5331 = self.code;
                        var $5332 = self.val;
                        var self = Kind$Parser$stop$(_init$1, $5330, $5331);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $5334 = self.idx;
                                var $5335 = self.code;
                                var $5336 = self.err;
                                var $5337 = Parser$Reply$error$($5334, $5335, $5336);
                                var $5333 = $5337;
                                break;
                            case 'Parser.Reply.value':
                                var $5338 = self.idx;
                                var $5339 = self.code;
                                var $5340 = self.val;
                                var _expr$14 = (() => {
                                    var $5343 = _func$2;
                                    var $5344 = $5332;
                                    let _f$15 = $5343;
                                    let _x$14;
                                    while ($5344._ === 'List.cons') {
                                        _x$14 = $5344.head;
                                        var $5343 = Kind$Term$app$(_f$15, _x$14);
                                        _f$15 = $5343;
                                        $5344 = $5344.tail;
                                    }
                                    return _f$15;
                                })();
                                var $5341 = Parser$Reply$value$($5338, $5339, Kind$Term$ori$($5340, _expr$14));
                                var $5333 = $5341;
                                break;
                        };
                        var $5325 = $5333;
                        break;
                };
                var $5318 = $5325;
                break;
        };
        return $5318;
    };
    const Kind$Parser$application = x0 => x1 => x2 => x3 => Kind$Parser$application$(x0, x1, x2, x3);
    const Parser$spaces = Parser$many$(Parser$first_of$(List$cons$(Parser$text(" "), List$cons$(Parser$text("\u{a}"), List$nil))));

    function Parser$spaces_text$(_text$1, _idx$2, _code$3) {
        var self = Parser$spaces(_idx$2)(_code$3);
        switch (self._) {
            case 'Parser.Reply.error':
                var $5346 = self.idx;
                var $5347 = self.code;
                var $5348 = self.err;
                var $5349 = Parser$Reply$error$($5346, $5347, $5348);
                var $5345 = $5349;
                break;
            case 'Parser.Reply.value':
                var $5350 = self.idx;
                var $5351 = self.code;
                var $5352 = Parser$text$(_text$1, $5350, $5351);
                var $5345 = $5352;
                break;
        };
        return $5345;
    };
    const Parser$spaces_text = x0 => x1 => x2 => Parser$spaces_text$(x0, x1, x2);

    function Kind$Parser$application$erased$(_init$1, _func$2, _idx$3, _code$4) {
        var self = Parser$get_index$(_idx$3, _code$4);
        switch (self._) {
            case 'Parser.Reply.error':
                var $5354 = self.idx;
                var $5355 = self.code;
                var $5356 = self.err;
                var $5357 = Parser$Reply$error$($5354, $5355, $5356);
                var $5353 = $5357;
                break;
            case 'Parser.Reply.value':
                var $5358 = self.idx;
                var $5359 = self.code;
                var $5360 = self.val;
                var self = Parser$text$("<", $5358, $5359);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $5362 = self.idx;
                        var $5363 = self.code;
                        var $5364 = self.err;
                        var $5365 = Parser$Reply$error$($5362, $5363, $5364);
                        var $5361 = $5365;
                        break;
                    case 'Parser.Reply.value':
                        var $5366 = self.idx;
                        var $5367 = self.code;
                        var self = Parser$until1$(Parser$spaces_text(">"), Kind$Parser$item(Kind$Parser$term), $5366, $5367);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $5369 = self.idx;
                                var $5370 = self.code;
                                var $5371 = self.err;
                                var $5372 = Parser$Reply$error$($5369, $5370, $5371);
                                var $5368 = $5372;
                                break;
                            case 'Parser.Reply.value':
                                var $5373 = self.idx;
                                var $5374 = self.code;
                                var $5375 = self.val;
                                var self = Kind$Parser$stop$($5360, $5373, $5374);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $5377 = self.idx;
                                        var $5378 = self.code;
                                        var $5379 = self.err;
                                        var $5380 = Parser$Reply$error$($5377, $5378, $5379);
                                        var $5376 = $5380;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $5381 = self.idx;
                                        var $5382 = self.code;
                                        var $5383 = self.val;
                                        var _expr$17 = (() => {
                                            var $5386 = _func$2;
                                            var $5387 = $5375;
                                            let _f$18 = $5386;
                                            let _x$17;
                                            while ($5387._ === 'List.cons') {
                                                _x$17 = $5387.head;
                                                var $5386 = Kind$Term$app$(_f$18, _x$17);
                                                _f$18 = $5386;
                                                $5387 = $5387.tail;
                                            }
                                            return _f$18;
                                        })();
                                        var $5384 = Parser$Reply$value$($5381, $5382, Kind$Term$ori$($5383, _expr$17));
                                        var $5376 = $5384;
                                        break;
                                };
                                var $5368 = $5376;
                                break;
                        };
                        var $5361 = $5368;
                        break;
                };
                var $5353 = $5361;
                break;
        };
        return $5353;
    };
    const Kind$Parser$application$erased = x0 => x1 => x2 => x3 => Kind$Parser$application$erased$(x0, x1, x2, x3);

    function Kind$Parser$list_set$(_init$1, _list$2, _idx$3, _code$4) {
        var self = Parser$text$("[", _idx$3, _code$4);
        switch (self._) {
            case 'Parser.Reply.error':
                var $5389 = self.idx;
                var $5390 = self.code;
                var $5391 = self.err;
                var $5392 = Parser$Reply$error$($5389, $5390, $5391);
                var $5388 = $5392;
                break;
            case 'Parser.Reply.value':
                var $5393 = self.idx;
                var $5394 = self.code;
                var self = Kind$Parser$term$($5393, $5394);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $5396 = self.idx;
                        var $5397 = self.code;
                        var $5398 = self.err;
                        var $5399 = Parser$Reply$error$($5396, $5397, $5398);
                        var $5395 = $5399;
                        break;
                    case 'Parser.Reply.value':
                        var $5400 = self.idx;
                        var $5401 = self.code;
                        var $5402 = self.val;
                        var self = Kind$Parser$text$("]", $5400, $5401);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $5404 = self.idx;
                                var $5405 = self.code;
                                var $5406 = self.err;
                                var $5407 = Parser$Reply$error$($5404, $5405, $5406);
                                var $5403 = $5407;
                                break;
                            case 'Parser.Reply.value':
                                var $5408 = self.idx;
                                var $5409 = self.code;
                                var self = Kind$Parser$text$("<-", $5408, $5409);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $5411 = self.idx;
                                        var $5412 = self.code;
                                        var $5413 = self.err;
                                        var $5414 = Parser$Reply$error$($5411, $5412, $5413);
                                        var $5410 = $5414;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $5415 = self.idx;
                                        var $5416 = self.code;
                                        var self = Kind$Parser$term$($5415, $5416);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $5418 = self.idx;
                                                var $5419 = self.code;
                                                var $5420 = self.err;
                                                var $5421 = Parser$Reply$error$($5418, $5419, $5420);
                                                var $5417 = $5421;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $5422 = self.idx;
                                                var $5423 = self.code;
                                                var $5424 = self.val;
                                                var self = Kind$Parser$stop$(_init$1, $5422, $5423);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $5426 = self.idx;
                                                        var $5427 = self.code;
                                                        var $5428 = self.err;
                                                        var $5429 = Parser$Reply$error$($5426, $5427, $5428);
                                                        var $5425 = $5429;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $5430 = self.idx;
                                                        var $5431 = self.code;
                                                        var $5432 = self.val;
                                                        var _term$23 = Kind$Term$ref$("List.set");
                                                        var _term$24 = Kind$Term$app$(_term$23, Kind$Term$hol$(Bits$e));
                                                        var _term$25 = Kind$Term$app$(_term$24, $5402);
                                                        var _term$26 = Kind$Term$app$(_term$25, $5424);
                                                        var _term$27 = Kind$Term$app$(_term$26, _list$2);
                                                        var $5433 = Parser$Reply$value$($5430, $5431, Kind$Term$ori$($5432, _term$27));
                                                        var $5425 = $5433;
                                                        break;
                                                };
                                                var $5417 = $5425;
                                                break;
                                        };
                                        var $5410 = $5417;
                                        break;
                                };
                                var $5403 = $5410;
                                break;
                        };
                        var $5395 = $5403;
                        break;
                };
                var $5388 = $5395;
                break;
        };
        return $5388;
    };
    const Kind$Parser$list_set = x0 => x1 => x2 => x3 => Kind$Parser$list_set$(x0, x1, x2, x3);

    function Kind$Parser$list_get$(_init$1, _list$2, _idx$3, _code$4) {
        var self = Parser$text$("[", _idx$3, _code$4);
        switch (self._) {
            case 'Parser.Reply.error':
                var $5435 = self.idx;
                var $5436 = self.code;
                var $5437 = self.err;
                var $5438 = Parser$Reply$error$($5435, $5436, $5437);
                var $5434 = $5438;
                break;
            case 'Parser.Reply.value':
                var $5439 = self.idx;
                var $5440 = self.code;
                var self = Kind$Parser$term$($5439, $5440);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $5442 = self.idx;
                        var $5443 = self.code;
                        var $5444 = self.err;
                        var $5445 = Parser$Reply$error$($5442, $5443, $5444);
                        var $5441 = $5445;
                        break;
                    case 'Parser.Reply.value':
                        var $5446 = self.idx;
                        var $5447 = self.code;
                        var $5448 = self.val;
                        var self = Kind$Parser$text$("]", $5446, $5447);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $5450 = self.idx;
                                var $5451 = self.code;
                                var $5452 = self.err;
                                var $5453 = Parser$Reply$error$($5450, $5451, $5452);
                                var $5449 = $5453;
                                break;
                            case 'Parser.Reply.value':
                                var $5454 = self.idx;
                                var $5455 = self.code;
                                var self = Kind$Parser$stop$(_init$1, $5454, $5455);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $5457 = self.idx;
                                        var $5458 = self.code;
                                        var $5459 = self.err;
                                        var $5460 = Parser$Reply$error$($5457, $5458, $5459);
                                        var $5456 = $5460;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $5461 = self.idx;
                                        var $5462 = self.code;
                                        var $5463 = self.val;
                                        var _term$17 = Kind$Term$ref$("List.get");
                                        var _term$18 = Kind$Term$app$(_term$17, Kind$Term$hol$(Bits$e));
                                        var _term$19 = Kind$Term$app$(_term$18, $5448);
                                        var _term$20 = Kind$Term$app$(_term$19, _list$2);
                                        var $5464 = Parser$Reply$value$($5461, $5462, Kind$Term$ori$($5463, _term$20));
                                        var $5456 = $5464;
                                        break;
                                };
                                var $5449 = $5456;
                                break;
                        };
                        var $5441 = $5449;
                        break;
                };
                var $5434 = $5441;
                break;
        };
        return $5434;
    };
    const Kind$Parser$list_get = x0 => x1 => x2 => x3 => Kind$Parser$list_get$(x0, x1, x2, x3);

    function Kind$Parser$map_set$(_init$1, _map$2, _idx$3, _code$4) {
        var self = Parser$text$("{", _idx$3, _code$4);
        switch (self._) {
            case 'Parser.Reply.error':
                var $5466 = self.idx;
                var $5467 = self.code;
                var $5468 = self.err;
                var $5469 = Parser$Reply$error$($5466, $5467, $5468);
                var $5465 = $5469;
                break;
            case 'Parser.Reply.value':
                var $5470 = self.idx;
                var $5471 = self.code;
                var self = Kind$Parser$term$($5470, $5471);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $5473 = self.idx;
                        var $5474 = self.code;
                        var $5475 = self.err;
                        var $5476 = Parser$Reply$error$($5473, $5474, $5475);
                        var $5472 = $5476;
                        break;
                    case 'Parser.Reply.value':
                        var $5477 = self.idx;
                        var $5478 = self.code;
                        var $5479 = self.val;
                        var self = Kind$Parser$text$("}", $5477, $5478);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $5481 = self.idx;
                                var $5482 = self.code;
                                var $5483 = self.err;
                                var $5484 = Parser$Reply$error$($5481, $5482, $5483);
                                var $5480 = $5484;
                                break;
                            case 'Parser.Reply.value':
                                var $5485 = self.idx;
                                var $5486 = self.code;
                                var self = Kind$Parser$text$("<-", $5485, $5486);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $5488 = self.idx;
                                        var $5489 = self.code;
                                        var $5490 = self.err;
                                        var $5491 = Parser$Reply$error$($5488, $5489, $5490);
                                        var $5487 = $5491;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $5492 = self.idx;
                                        var $5493 = self.code;
                                        var self = Kind$Parser$term$($5492, $5493);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $5495 = self.idx;
                                                var $5496 = self.code;
                                                var $5497 = self.err;
                                                var $5498 = Parser$Reply$error$($5495, $5496, $5497);
                                                var $5494 = $5498;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $5499 = self.idx;
                                                var $5500 = self.code;
                                                var $5501 = self.val;
                                                var self = Kind$Parser$stop$(_init$1, $5499, $5500);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $5503 = self.idx;
                                                        var $5504 = self.code;
                                                        var $5505 = self.err;
                                                        var $5506 = Parser$Reply$error$($5503, $5504, $5505);
                                                        var $5502 = $5506;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $5507 = self.idx;
                                                        var $5508 = self.code;
                                                        var $5509 = self.val;
                                                        var _term$23 = Kind$Term$ref$("Map.set");
                                                        var _term$24 = Kind$Term$app$(_term$23, Kind$Term$hol$(Bits$e));
                                                        var _term$25 = Kind$Term$app$(_term$24, $5479);
                                                        var _term$26 = Kind$Term$app$(_term$25, $5501);
                                                        var _term$27 = Kind$Term$app$(_term$26, _map$2);
                                                        var $5510 = Parser$Reply$value$($5507, $5508, Kind$Term$ori$($5509, _term$27));
                                                        var $5502 = $5510;
                                                        break;
                                                };
                                                var $5494 = $5502;
                                                break;
                                        };
                                        var $5487 = $5494;
                                        break;
                                };
                                var $5480 = $5487;
                                break;
                        };
                        var $5472 = $5480;
                        break;
                };
                var $5465 = $5472;
                break;
        };
        return $5465;
    };
    const Kind$Parser$map_set = x0 => x1 => x2 => x3 => Kind$Parser$map_set$(x0, x1, x2, x3);

    function Kind$Parser$map_get$(_init$1, _map$2, _idx$3, _code$4) {
        var self = Parser$text$("{", _idx$3, _code$4);
        switch (self._) {
            case 'Parser.Reply.error':
                var $5512 = self.idx;
                var $5513 = self.code;
                var $5514 = self.err;
                var $5515 = Parser$Reply$error$($5512, $5513, $5514);
                var $5511 = $5515;
                break;
            case 'Parser.Reply.value':
                var $5516 = self.idx;
                var $5517 = self.code;
                var self = Kind$Parser$term$($5516, $5517);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $5519 = self.idx;
                        var $5520 = self.code;
                        var $5521 = self.err;
                        var $5522 = Parser$Reply$error$($5519, $5520, $5521);
                        var $5518 = $5522;
                        break;
                    case 'Parser.Reply.value':
                        var $5523 = self.idx;
                        var $5524 = self.code;
                        var $5525 = self.val;
                        var self = Kind$Parser$text$("}", $5523, $5524);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $5527 = self.idx;
                                var $5528 = self.code;
                                var $5529 = self.err;
                                var $5530 = Parser$Reply$error$($5527, $5528, $5529);
                                var $5526 = $5530;
                                break;
                            case 'Parser.Reply.value':
                                var $5531 = self.idx;
                                var $5532 = self.code;
                                var self = Kind$Parser$stop$(_init$1, $5531, $5532);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $5534 = self.idx;
                                        var $5535 = self.code;
                                        var $5536 = self.err;
                                        var $5537 = Parser$Reply$error$($5534, $5535, $5536);
                                        var $5533 = $5537;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $5538 = self.idx;
                                        var $5539 = self.code;
                                        var $5540 = self.val;
                                        var _term$17 = Kind$Term$ref$("Map.get");
                                        var _term$18 = Kind$Term$app$(_term$17, Kind$Term$hol$(Bits$e));
                                        var _term$19 = Kind$Term$app$(_term$18, $5525);
                                        var _term$20 = Kind$Term$app$(_term$19, _map$2);
                                        var $5541 = Parser$Reply$value$($5538, $5539, Kind$Term$ori$($5540, _term$20));
                                        var $5533 = $5541;
                                        break;
                                };
                                var $5526 = $5533;
                                break;
                        };
                        var $5518 = $5526;
                        break;
                };
                var $5511 = $5518;
                break;
        };
        return $5511;
    };
    const Kind$Parser$map_get = x0 => x1 => x2 => x3 => Kind$Parser$map_get$(x0, x1, x2, x3);

    function Kind$Parser$arrow$(_init$1, _xtyp$2, _idx$3, _code$4) {
        var self = Kind$Parser$text$("->", _idx$3, _code$4);
        switch (self._) {
            case 'Parser.Reply.error':
                var $5543 = self.idx;
                var $5544 = self.code;
                var $5545 = self.err;
                var $5546 = Parser$Reply$error$($5543, $5544, $5545);
                var $5542 = $5546;
                break;
            case 'Parser.Reply.value':
                var $5547 = self.idx;
                var $5548 = self.code;
                var self = Kind$Parser$term$($5547, $5548);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $5550 = self.idx;
                        var $5551 = self.code;
                        var $5552 = self.err;
                        var $5553 = Parser$Reply$error$($5550, $5551, $5552);
                        var $5549 = $5553;
                        break;
                    case 'Parser.Reply.value':
                        var $5554 = self.idx;
                        var $5555 = self.code;
                        var $5556 = self.val;
                        var self = Kind$Parser$stop$(_init$1, $5554, $5555);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $5558 = self.idx;
                                var $5559 = self.code;
                                var $5560 = self.err;
                                var $5561 = Parser$Reply$error$($5558, $5559, $5560);
                                var $5557 = $5561;
                                break;
                            case 'Parser.Reply.value':
                                var $5562 = self.idx;
                                var $5563 = self.code;
                                var $5564 = self.val;
                                var $5565 = Parser$Reply$value$($5562, $5563, Kind$Term$ori$($5564, Kind$Term$all$(Bool$false, "", "", _xtyp$2, (_s$14 => _x$15 => {
                                    var $5566 = $5556;
                                    return $5566;
                                }))));
                                var $5557 = $5565;
                                break;
                        };
                        var $5549 = $5557;
                        break;
                };
                var $5542 = $5549;
                break;
        };
        return $5542;
    };
    const Kind$Parser$arrow = x0 => x1 => x2 => x3 => Kind$Parser$arrow$(x0, x1, x2, x3);

    function Kind$Parser$op$(_sym$1, _ref$2, _init$3, _val0$4, _idx$5, _code$6) {
        var self = Kind$Parser$text$(_sym$1, _idx$5, _code$6);
        switch (self._) {
            case 'Parser.Reply.error':
                var $5568 = self.idx;
                var $5569 = self.code;
                var $5570 = self.err;
                var $5571 = Parser$Reply$error$($5568, $5569, $5570);
                var $5567 = $5571;
                break;
            case 'Parser.Reply.value':
                var $5572 = self.idx;
                var $5573 = self.code;
                var self = Parser$text$(" ", $5572, $5573);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $5575 = self.idx;
                        var $5576 = self.code;
                        var $5577 = self.err;
                        var $5578 = Parser$Reply$error$($5575, $5576, $5577);
                        var $5574 = $5578;
                        break;
                    case 'Parser.Reply.value':
                        var $5579 = self.idx;
                        var $5580 = self.code;
                        var self = Kind$Parser$term$($5579, $5580);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $5582 = self.idx;
                                var $5583 = self.code;
                                var $5584 = self.err;
                                var $5585 = Parser$Reply$error$($5582, $5583, $5584);
                                var $5581 = $5585;
                                break;
                            case 'Parser.Reply.value':
                                var $5586 = self.idx;
                                var $5587 = self.code;
                                var $5588 = self.val;
                                var self = Kind$Parser$stop$(_init$3, $5586, $5587);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $5590 = self.idx;
                                        var $5591 = self.code;
                                        var $5592 = self.err;
                                        var $5593 = Parser$Reply$error$($5590, $5591, $5592);
                                        var $5589 = $5593;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $5594 = self.idx;
                                        var $5595 = self.code;
                                        var $5596 = self.val;
                                        var _term$19 = Kind$Term$ref$(_ref$2);
                                        var _term$20 = Kind$Term$app$(_term$19, _val0$4);
                                        var _term$21 = Kind$Term$app$(_term$20, $5588);
                                        var $5597 = Parser$Reply$value$($5594, $5595, Kind$Term$ori$($5596, _term$21));
                                        var $5589 = $5597;
                                        break;
                                };
                                var $5581 = $5589;
                                break;
                        };
                        var $5574 = $5581;
                        break;
                };
                var $5567 = $5574;
                break;
        };
        return $5567;
    };
    const Kind$Parser$op = x0 => x1 => x2 => x3 => x4 => x5 => Kind$Parser$op$(x0, x1, x2, x3, x4, x5);
    const Kind$Parser$add = Kind$Parser$op("+")("Nat.add");
    const Kind$Parser$sub = Kind$Parser$op("-")("Nat.sub");
    const Kind$Parser$mul = Kind$Parser$op("*")("Nat.mul");
    const Kind$Parser$div = Kind$Parser$op("/")("Nat.div");
    const Kind$Parser$mod = Kind$Parser$op("%")("Nat.mod");
    const Kind$Parser$ltn = Kind$Parser$op("<?")("Nat.ltn");
    const Kind$Parser$lte = Kind$Parser$op("<=?")("Nat.lte");
    const Kind$Parser$eql = Kind$Parser$op("=?")("Nat.eql");
    const Kind$Parser$gte = Kind$Parser$op(">=?")("Nat.gte");
    const Kind$Parser$gtn = Kind$Parser$op(">?")("Nat.gtn");
    const Kind$Parser$and = Kind$Parser$op("&&")("Bool.and");
    const Kind$Parser$or = Kind$Parser$op("||")("Bool.or");

    function Kind$Parser$default$(_init$1, _val0$2, _idx$3, _code$4) {
        var self = Kind$Parser$text$("<>", _idx$3, _code$4);
        switch (self._) {
            case 'Parser.Reply.error':
                var $5599 = self.idx;
                var $5600 = self.code;
                var $5601 = self.err;
                var $5602 = Parser$Reply$error$($5599, $5600, $5601);
                var $5598 = $5602;
                break;
            case 'Parser.Reply.value':
                var $5603 = self.idx;
                var $5604 = self.code;
                var self = Kind$Parser$term$($5603, $5604);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $5606 = self.idx;
                        var $5607 = self.code;
                        var $5608 = self.err;
                        var $5609 = Parser$Reply$error$($5606, $5607, $5608);
                        var $5605 = $5609;
                        break;
                    case 'Parser.Reply.value':
                        var $5610 = self.idx;
                        var $5611 = self.code;
                        var $5612 = self.val;
                        var self = Kind$Parser$stop$(_init$1, $5610, $5611);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $5614 = self.idx;
                                var $5615 = self.code;
                                var $5616 = self.err;
                                var $5617 = Parser$Reply$error$($5614, $5615, $5616);
                                var $5613 = $5617;
                                break;
                            case 'Parser.Reply.value':
                                var $5618 = self.idx;
                                var $5619 = self.code;
                                var $5620 = self.val;
                                var _term$14 = Kind$Term$ref$("Maybe.default");
                                var _term$15 = Kind$Term$app$(_term$14, Kind$Term$hol$(Bits$e));
                                var _term$16 = Kind$Term$app$(_term$15, _val0$2);
                                var _term$17 = Kind$Term$app$(_term$16, $5612);
                                var $5621 = Parser$Reply$value$($5618, $5619, Kind$Term$ori$($5620, _term$17));
                                var $5613 = $5621;
                                break;
                        };
                        var $5605 = $5613;
                        break;
                };
                var $5598 = $5605;
                break;
        };
        return $5598;
    };
    const Kind$Parser$default = x0 => x1 => x2 => x3 => Kind$Parser$default$(x0, x1, x2, x3);

    function Kind$Parser$cons$(_init$1, _head$2, _idx$3, _code$4) {
        var self = Kind$Parser$text$("&", _idx$3, _code$4);
        switch (self._) {
            case 'Parser.Reply.error':
                var $5623 = self.idx;
                var $5624 = self.code;
                var $5625 = self.err;
                var $5626 = Parser$Reply$error$($5623, $5624, $5625);
                var $5622 = $5626;
                break;
            case 'Parser.Reply.value':
                var $5627 = self.idx;
                var $5628 = self.code;
                var self = Kind$Parser$term$($5627, $5628);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $5630 = self.idx;
                        var $5631 = self.code;
                        var $5632 = self.err;
                        var $5633 = Parser$Reply$error$($5630, $5631, $5632);
                        var $5629 = $5633;
                        break;
                    case 'Parser.Reply.value':
                        var $5634 = self.idx;
                        var $5635 = self.code;
                        var $5636 = self.val;
                        var self = Kind$Parser$stop$(_init$1, $5634, $5635);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $5638 = self.idx;
                                var $5639 = self.code;
                                var $5640 = self.err;
                                var $5641 = Parser$Reply$error$($5638, $5639, $5640);
                                var $5637 = $5641;
                                break;
                            case 'Parser.Reply.value':
                                var $5642 = self.idx;
                                var $5643 = self.code;
                                var _term$14 = Kind$Term$ref$("List.cons");
                                var _term$15 = Kind$Term$app$(_term$14, Kind$Term$hol$(Bits$e));
                                var _term$16 = Kind$Term$app$(_term$15, _head$2);
                                var _term$17 = Kind$Term$app$(_term$16, $5636);
                                var self = Kind$Parser$stop$(_init$1, $5642, $5643);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $5645 = self.idx;
                                        var $5646 = self.code;
                                        var $5647 = self.err;
                                        var $5648 = Parser$Reply$error$($5645, $5646, $5647);
                                        var $5644 = $5648;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $5649 = self.idx;
                                        var $5650 = self.code;
                                        var $5651 = self.val;
                                        var $5652 = Parser$Reply$value$($5649, $5650, Kind$Term$ori$($5651, _term$17));
                                        var $5644 = $5652;
                                        break;
                                };
                                var $5637 = $5644;
                                break;
                        };
                        var $5629 = $5637;
                        break;
                };
                var $5622 = $5629;
                break;
        };
        return $5622;
    };
    const Kind$Parser$cons = x0 => x1 => x2 => x3 => Kind$Parser$cons$(x0, x1, x2, x3);

    function Kind$Parser$concat$(_init$1, _lst0$2, _idx$3, _code$4) {
        var self = Kind$Parser$text$("++", _idx$3, _code$4);
        switch (self._) {
            case 'Parser.Reply.error':
                var $5654 = self.idx;
                var $5655 = self.code;
                var $5656 = self.err;
                var $5657 = Parser$Reply$error$($5654, $5655, $5656);
                var $5653 = $5657;
                break;
            case 'Parser.Reply.value':
                var $5658 = self.idx;
                var $5659 = self.code;
                var self = Kind$Parser$term$($5658, $5659);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $5661 = self.idx;
                        var $5662 = self.code;
                        var $5663 = self.err;
                        var $5664 = Parser$Reply$error$($5661, $5662, $5663);
                        var $5660 = $5664;
                        break;
                    case 'Parser.Reply.value':
                        var $5665 = self.idx;
                        var $5666 = self.code;
                        var $5667 = self.val;
                        var self = Kind$Parser$stop$(_init$1, $5665, $5666);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $5669 = self.idx;
                                var $5670 = self.code;
                                var $5671 = self.err;
                                var $5672 = Parser$Reply$error$($5669, $5670, $5671);
                                var $5668 = $5672;
                                break;
                            case 'Parser.Reply.value':
                                var $5673 = self.idx;
                                var $5674 = self.code;
                                var _term$14 = Kind$Term$ref$("List.concat");
                                var _term$15 = Kind$Term$app$(_term$14, Kind$Term$hol$(Bits$e));
                                var _term$16 = Kind$Term$app$(_term$15, _lst0$2);
                                var _term$17 = Kind$Term$app$(_term$16, $5667);
                                var self = Kind$Parser$stop$(_init$1, $5673, $5674);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $5676 = self.idx;
                                        var $5677 = self.code;
                                        var $5678 = self.err;
                                        var $5679 = Parser$Reply$error$($5676, $5677, $5678);
                                        var $5675 = $5679;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $5680 = self.idx;
                                        var $5681 = self.code;
                                        var $5682 = self.val;
                                        var $5683 = Parser$Reply$value$($5680, $5681, Kind$Term$ori$($5682, _term$17));
                                        var $5675 = $5683;
                                        break;
                                };
                                var $5668 = $5675;
                                break;
                        };
                        var $5660 = $5668;
                        break;
                };
                var $5653 = $5660;
                break;
        };
        return $5653;
    };
    const Kind$Parser$concat = x0 => x1 => x2 => x3 => Kind$Parser$concat$(x0, x1, x2, x3);

    function Kind$Parser$string_concat$(_init$1, _str0$2, _idx$3, _code$4) {
        var self = Kind$Parser$text$("|", _idx$3, _code$4);
        switch (self._) {
            case 'Parser.Reply.error':
                var $5685 = self.idx;
                var $5686 = self.code;
                var $5687 = self.err;
                var $5688 = Parser$Reply$error$($5685, $5686, $5687);
                var $5684 = $5688;
                break;
            case 'Parser.Reply.value':
                var $5689 = self.idx;
                var $5690 = self.code;
                var self = Kind$Parser$term$($5689, $5690);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $5692 = self.idx;
                        var $5693 = self.code;
                        var $5694 = self.err;
                        var $5695 = Parser$Reply$error$($5692, $5693, $5694);
                        var $5691 = $5695;
                        break;
                    case 'Parser.Reply.value':
                        var $5696 = self.idx;
                        var $5697 = self.code;
                        var $5698 = self.val;
                        var self = Kind$Parser$stop$(_init$1, $5696, $5697);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $5700 = self.idx;
                                var $5701 = self.code;
                                var $5702 = self.err;
                                var $5703 = Parser$Reply$error$($5700, $5701, $5702);
                                var $5699 = $5703;
                                break;
                            case 'Parser.Reply.value':
                                var $5704 = self.idx;
                                var $5705 = self.code;
                                var _term$14 = Kind$Term$ref$("String.concat");
                                var _term$15 = Kind$Term$app$(_term$14, _str0$2);
                                var _term$16 = Kind$Term$app$(_term$15, $5698);
                                var self = Kind$Parser$stop$(_init$1, $5704, $5705);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $5707 = self.idx;
                                        var $5708 = self.code;
                                        var $5709 = self.err;
                                        var $5710 = Parser$Reply$error$($5707, $5708, $5709);
                                        var $5706 = $5710;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $5711 = self.idx;
                                        var $5712 = self.code;
                                        var $5713 = self.val;
                                        var $5714 = Parser$Reply$value$($5711, $5712, Kind$Term$ori$($5713, _term$16));
                                        var $5706 = $5714;
                                        break;
                                };
                                var $5699 = $5706;
                                break;
                        };
                        var $5691 = $5699;
                        break;
                };
                var $5684 = $5691;
                break;
        };
        return $5684;
    };
    const Kind$Parser$string_concat = x0 => x1 => x2 => x3 => Kind$Parser$string_concat$(x0, x1, x2, x3);

    function Kind$Parser$sigma$(_init$1, _val0$2, _idx$3, _code$4) {
        var self = Kind$Parser$text$("~", _idx$3, _code$4);
        switch (self._) {
            case 'Parser.Reply.error':
                var $5716 = self.idx;
                var $5717 = self.code;
                var $5718 = self.err;
                var $5719 = Parser$Reply$error$($5716, $5717, $5718);
                var $5715 = $5719;
                break;
            case 'Parser.Reply.value':
                var $5720 = self.idx;
                var $5721 = self.code;
                var self = Kind$Parser$term$($5720, $5721);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $5723 = self.idx;
                        var $5724 = self.code;
                        var $5725 = self.err;
                        var $5726 = Parser$Reply$error$($5723, $5724, $5725);
                        var $5722 = $5726;
                        break;
                    case 'Parser.Reply.value':
                        var $5727 = self.idx;
                        var $5728 = self.code;
                        var $5729 = self.val;
                        var self = Kind$Parser$stop$(_init$1, $5727, $5728);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $5731 = self.idx;
                                var $5732 = self.code;
                                var $5733 = self.err;
                                var $5734 = Parser$Reply$error$($5731, $5732, $5733);
                                var $5730 = $5734;
                                break;
                            case 'Parser.Reply.value':
                                var $5735 = self.idx;
                                var $5736 = self.code;
                                var $5737 = self.val;
                                var _term$14 = Kind$Term$ref$("Sigma.new");
                                var _term$15 = Kind$Term$app$(_term$14, Kind$Term$hol$(Bits$e));
                                var _term$16 = Kind$Term$app$(_term$15, Kind$Term$hol$(Bits$e));
                                var _term$17 = Kind$Term$app$(_term$16, _val0$2);
                                var _term$18 = Kind$Term$app$(_term$17, $5729);
                                var $5738 = Parser$Reply$value$($5735, $5736, Kind$Term$ori$($5737, _term$18));
                                var $5730 = $5738;
                                break;
                        };
                        var $5722 = $5730;
                        break;
                };
                var $5715 = $5722;
                break;
        };
        return $5715;
    };
    const Kind$Parser$sigma = x0 => x1 => x2 => x3 => Kind$Parser$sigma$(x0, x1, x2, x3);

    function Kind$Parser$equality$(_init$1, _val0$2, _idx$3, _code$4) {
        var self = Kind$Parser$text$("==", _idx$3, _code$4);
        switch (self._) {
            case 'Parser.Reply.error':
                var $5740 = self.idx;
                var $5741 = self.code;
                var $5742 = self.err;
                var $5743 = Parser$Reply$error$($5740, $5741, $5742);
                var $5739 = $5743;
                break;
            case 'Parser.Reply.value':
                var $5744 = self.idx;
                var $5745 = self.code;
                var self = Kind$Parser$term$($5744, $5745);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $5747 = self.idx;
                        var $5748 = self.code;
                        var $5749 = self.err;
                        var $5750 = Parser$Reply$error$($5747, $5748, $5749);
                        var $5746 = $5750;
                        break;
                    case 'Parser.Reply.value':
                        var $5751 = self.idx;
                        var $5752 = self.code;
                        var $5753 = self.val;
                        var self = Kind$Parser$stop$(_init$1, $5751, $5752);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $5755 = self.idx;
                                var $5756 = self.code;
                                var $5757 = self.err;
                                var $5758 = Parser$Reply$error$($5755, $5756, $5757);
                                var $5754 = $5758;
                                break;
                            case 'Parser.Reply.value':
                                var $5759 = self.idx;
                                var $5760 = self.code;
                                var $5761 = self.val;
                                var _term$14 = Kind$Term$ref$("Equal");
                                var _term$15 = Kind$Term$app$(_term$14, Kind$Term$hol$(Bits$e));
                                var _term$16 = Kind$Term$app$(_term$15, _val0$2);
                                var _term$17 = Kind$Term$app$(_term$16, $5753);
                                var $5762 = Parser$Reply$value$($5759, $5760, Kind$Term$ori$($5761, _term$17));
                                var $5754 = $5762;
                                break;
                        };
                        var $5746 = $5754;
                        break;
                };
                var $5739 = $5746;
                break;
        };
        return $5739;
    };
    const Kind$Parser$equality = x0 => x1 => x2 => x3 => Kind$Parser$equality$(x0, x1, x2, x3);

    function Kind$Parser$inequality$(_init$1, _val0$2, _idx$3, _code$4) {
        var self = Kind$Parser$text$("!=", _idx$3, _code$4);
        switch (self._) {
            case 'Parser.Reply.error':
                var $5764 = self.idx;
                var $5765 = self.code;
                var $5766 = self.err;
                var $5767 = Parser$Reply$error$($5764, $5765, $5766);
                var $5763 = $5767;
                break;
            case 'Parser.Reply.value':
                var $5768 = self.idx;
                var $5769 = self.code;
                var self = Kind$Parser$term$($5768, $5769);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $5771 = self.idx;
                        var $5772 = self.code;
                        var $5773 = self.err;
                        var $5774 = Parser$Reply$error$($5771, $5772, $5773);
                        var $5770 = $5774;
                        break;
                    case 'Parser.Reply.value':
                        var $5775 = self.idx;
                        var $5776 = self.code;
                        var $5777 = self.val;
                        var self = Kind$Parser$stop$(_init$1, $5775, $5776);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $5779 = self.idx;
                                var $5780 = self.code;
                                var $5781 = self.err;
                                var $5782 = Parser$Reply$error$($5779, $5780, $5781);
                                var $5778 = $5782;
                                break;
                            case 'Parser.Reply.value':
                                var $5783 = self.idx;
                                var $5784 = self.code;
                                var $5785 = self.val;
                                var _term$14 = Kind$Term$ref$("Equal");
                                var _term$15 = Kind$Term$app$(_term$14, Kind$Term$hol$(Bits$e));
                                var _term$16 = Kind$Term$app$(_term$15, _val0$2);
                                var _term$17 = Kind$Term$app$(_term$16, $5777);
                                var _term$18 = Kind$Term$app$(Kind$Term$ref$("Not"), _term$17);
                                var $5786 = Parser$Reply$value$($5783, $5784, Kind$Term$ori$($5785, _term$18));
                                var $5778 = $5786;
                                break;
                        };
                        var $5770 = $5778;
                        break;
                };
                var $5763 = $5770;
                break;
        };
        return $5763;
    };
    const Kind$Parser$inequality = x0 => x1 => x2 => x3 => Kind$Parser$inequality$(x0, x1, x2, x3);

    function Kind$Parser$rewrite$(_init$1, _subt$2, _idx$3, _code$4) {
        var self = Kind$Parser$text$("::", _idx$3, _code$4);
        switch (self._) {
            case 'Parser.Reply.error':
                var $5788 = self.idx;
                var $5789 = self.code;
                var $5790 = self.err;
                var $5791 = Parser$Reply$error$($5788, $5789, $5790);
                var $5787 = $5791;
                break;
            case 'Parser.Reply.value':
                var $5792 = self.idx;
                var $5793 = self.code;
                var self = Kind$Parser$text$("rewrite", $5792, $5793);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $5795 = self.idx;
                        var $5796 = self.code;
                        var $5797 = self.err;
                        var $5798 = Parser$Reply$error$($5795, $5796, $5797);
                        var $5794 = $5798;
                        break;
                    case 'Parser.Reply.value':
                        var $5799 = self.idx;
                        var $5800 = self.code;
                        var self = Kind$Parser$name1$($5799, $5800);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $5802 = self.idx;
                                var $5803 = self.code;
                                var $5804 = self.err;
                                var $5805 = Parser$Reply$error$($5802, $5803, $5804);
                                var $5801 = $5805;
                                break;
                            case 'Parser.Reply.value':
                                var $5806 = self.idx;
                                var $5807 = self.code;
                                var $5808 = self.val;
                                var self = Kind$Parser$text$("in", $5806, $5807);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $5810 = self.idx;
                                        var $5811 = self.code;
                                        var $5812 = self.err;
                                        var $5813 = Parser$Reply$error$($5810, $5811, $5812);
                                        var $5809 = $5813;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $5814 = self.idx;
                                        var $5815 = self.code;
                                        var self = Kind$Parser$term$($5814, $5815);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $5817 = self.idx;
                                                var $5818 = self.code;
                                                var $5819 = self.err;
                                                var $5820 = Parser$Reply$error$($5817, $5818, $5819);
                                                var $5816 = $5820;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $5821 = self.idx;
                                                var $5822 = self.code;
                                                var $5823 = self.val;
                                                var self = Kind$Parser$text$("with", $5821, $5822);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $5825 = self.idx;
                                                        var $5826 = self.code;
                                                        var $5827 = self.err;
                                                        var $5828 = Parser$Reply$error$($5825, $5826, $5827);
                                                        var $5824 = $5828;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $5829 = self.idx;
                                                        var $5830 = self.code;
                                                        var self = Kind$Parser$term$($5829, $5830);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $5832 = self.idx;
                                                                var $5833 = self.code;
                                                                var $5834 = self.err;
                                                                var $5835 = Parser$Reply$error$($5832, $5833, $5834);
                                                                var $5831 = $5835;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $5836 = self.idx;
                                                                var $5837 = self.code;
                                                                var $5838 = self.val;
                                                                var self = Kind$Parser$stop$(_init$1, $5836, $5837);
                                                                switch (self._) {
                                                                    case 'Parser.Reply.error':
                                                                        var $5840 = self.idx;
                                                                        var $5841 = self.code;
                                                                        var $5842 = self.err;
                                                                        var $5843 = Parser$Reply$error$($5840, $5841, $5842);
                                                                        var $5839 = $5843;
                                                                        break;
                                                                    case 'Parser.Reply.value':
                                                                        var $5844 = self.idx;
                                                                        var $5845 = self.code;
                                                                        var $5846 = self.val;
                                                                        var _term$29 = Kind$Term$ref$("Equal.rewrite");
                                                                        var _term$30 = Kind$Term$app$(_term$29, Kind$Term$hol$(Bits$e));
                                                                        var _term$31 = Kind$Term$app$(_term$30, Kind$Term$hol$(Bits$e));
                                                                        var _term$32 = Kind$Term$app$(_term$31, Kind$Term$hol$(Bits$e));
                                                                        var _term$33 = Kind$Term$app$(_term$32, $5838);
                                                                        var _term$34 = Kind$Term$app$(_term$33, Kind$Term$lam$($5808, (_x$34 => {
                                                                            var $5848 = $5823;
                                                                            return $5848;
                                                                        })));
                                                                        var _term$35 = Kind$Term$app$(_term$34, _subt$2);
                                                                        var $5847 = Parser$Reply$value$($5844, $5845, Kind$Term$ori$($5846, _term$35));
                                                                        var $5839 = $5847;
                                                                        break;
                                                                };
                                                                var $5831 = $5839;
                                                                break;
                                                        };
                                                        var $5824 = $5831;
                                                        break;
                                                };
                                                var $5816 = $5824;
                                                break;
                                        };
                                        var $5809 = $5816;
                                        break;
                                };
                                var $5801 = $5809;
                                break;
                        };
                        var $5794 = $5801;
                        break;
                };
                var $5787 = $5794;
                break;
        };
        return $5787;
    };
    const Kind$Parser$rewrite = x0 => x1 => x2 => x3 => Kind$Parser$rewrite$(x0, x1, x2, x3);

    function Kind$Parser$annotation$(_init$1, _term$2, _idx$3, _code$4) {
        var self = Kind$Parser$text$("::", _idx$3, _code$4);
        switch (self._) {
            case 'Parser.Reply.error':
                var $5850 = self.idx;
                var $5851 = self.code;
                var $5852 = self.err;
                var $5853 = Parser$Reply$error$($5850, $5851, $5852);
                var $5849 = $5853;
                break;
            case 'Parser.Reply.value':
                var $5854 = self.idx;
                var $5855 = self.code;
                var self = Kind$Parser$term$($5854, $5855);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $5857 = self.idx;
                        var $5858 = self.code;
                        var $5859 = self.err;
                        var $5860 = Parser$Reply$error$($5857, $5858, $5859);
                        var $5856 = $5860;
                        break;
                    case 'Parser.Reply.value':
                        var $5861 = self.idx;
                        var $5862 = self.code;
                        var $5863 = self.val;
                        var self = Kind$Parser$stop$(_init$1, $5861, $5862);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $5865 = self.idx;
                                var $5866 = self.code;
                                var $5867 = self.err;
                                var $5868 = Parser$Reply$error$($5865, $5866, $5867);
                                var $5864 = $5868;
                                break;
                            case 'Parser.Reply.value':
                                var $5869 = self.idx;
                                var $5870 = self.code;
                                var $5871 = self.val;
                                var $5872 = Parser$Reply$value$($5869, $5870, Kind$Term$ori$($5871, Kind$Term$ann$(Bool$false, _term$2, $5863)));
                                var $5864 = $5872;
                                break;
                        };
                        var $5856 = $5864;
                        break;
                };
                var $5849 = $5856;
                break;
        };
        return $5849;
    };
    const Kind$Parser$annotation = x0 => x1 => x2 => x3 => Kind$Parser$annotation$(x0, x1, x2, x3);

    function Kind$Parser$application$hole$(_init$1, _term$2, _idx$3, _code$4) {
        var self = Kind$Parser$text$("!", _idx$3, _code$4);
        switch (self._) {
            case 'Parser.Reply.error':
                var $5874 = self.idx;
                var $5875 = self.code;
                var $5876 = self.err;
                var $5877 = Parser$Reply$error$($5874, $5875, $5876);
                var $5873 = $5877;
                break;
            case 'Parser.Reply.value':
                var $5878 = self.idx;
                var $5879 = self.code;
                var self = Kind$Parser$stop$(_init$1, $5878, $5879);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $5881 = self.idx;
                        var $5882 = self.code;
                        var $5883 = self.err;
                        var $5884 = Parser$Reply$error$($5881, $5882, $5883);
                        var $5880 = $5884;
                        break;
                    case 'Parser.Reply.value':
                        var $5885 = self.idx;
                        var $5886 = self.code;
                        var $5887 = self.val;
                        var $5888 = Parser$Reply$value$($5885, $5886, Kind$Term$ori$($5887, Kind$Term$app$(_term$2, Kind$Term$hol$(Bits$e))));
                        var $5880 = $5888;
                        break;
                };
                var $5873 = $5880;
                break;
        };
        return $5873;
    };
    const Kind$Parser$application$hole = x0 => x1 => x2 => x3 => Kind$Parser$application$hole$(x0, x1, x2, x3);

    function Kind$Parser$suffix$(_init$1, _term$2, _idx$3, _code$4) {
        var Kind$Parser$suffix$ = (_init$1, _term$2, _idx$3, _code$4) => ({
            ctr: 'TCO',
            arg: [_init$1, _term$2, _idx$3, _code$4]
        });
        var Kind$Parser$suffix = _init$1 => _term$2 => _idx$3 => _code$4 => Kind$Parser$suffix$(_init$1, _term$2, _idx$3, _code$4);
        var arg = [_init$1, _term$2, _idx$3, _code$4];
        while (true) {
            let [_init$1, _term$2, _idx$3, _code$4] = arg;
            var R = (() => {
                var _suffix_parser$5 = Parser$first_of$(List$cons$(Kind$Parser$application(_init$1)(_term$2), List$cons$(Kind$Parser$application$erased(_init$1)(_term$2), List$cons$(Kind$Parser$list_set(_init$1)(_term$2), List$cons$(Kind$Parser$list_get(_init$1)(_term$2), List$cons$(Kind$Parser$map_set(_init$1)(_term$2), List$cons$(Kind$Parser$map_get(_init$1)(_term$2), List$cons$(Kind$Parser$arrow(_init$1)(_term$2), List$cons$(Kind$Parser$add(_init$1)(_term$2), List$cons$(Kind$Parser$sub(_init$1)(_term$2), List$cons$(Kind$Parser$mul(_init$1)(_term$2), List$cons$(Kind$Parser$div(_init$1)(_term$2), List$cons$(Kind$Parser$mod(_init$1)(_term$2), List$cons$(Kind$Parser$ltn(_init$1)(_term$2), List$cons$(Kind$Parser$lte(_init$1)(_term$2), List$cons$(Kind$Parser$eql(_init$1)(_term$2), List$cons$(Kind$Parser$gte(_init$1)(_term$2), List$cons$(Kind$Parser$gtn(_init$1)(_term$2), List$cons$(Kind$Parser$and(_init$1)(_term$2), List$cons$(Kind$Parser$or(_init$1)(_term$2), List$cons$(Kind$Parser$default(_init$1)(_term$2), List$cons$(Kind$Parser$cons(_init$1)(_term$2), List$cons$(Kind$Parser$concat(_init$1)(_term$2), List$cons$(Kind$Parser$string_concat(_init$1)(_term$2), List$cons$(Kind$Parser$sigma(_init$1)(_term$2), List$cons$(Kind$Parser$equality(_init$1)(_term$2), List$cons$(Kind$Parser$inequality(_init$1)(_term$2), List$cons$(Kind$Parser$rewrite(_init$1)(_term$2), List$cons$(Kind$Parser$annotation(_init$1)(_term$2), List$cons$(Kind$Parser$application$hole(_init$1)(_term$2), List$nil))))))))))))))))))))))))))))));
                var self = _suffix_parser$5(_idx$3)(_code$4);
                switch (self._) {
                    case 'Parser.Reply.value':
                        var $5890 = self.idx;
                        var $5891 = self.code;
                        var $5892 = self.val;
                        var $5893 = Kind$Parser$suffix$(_init$1, $5892, $5890, $5891);
                        var $5889 = $5893;
                        break;
                    case 'Parser.Reply.error':
                        var $5894 = Parser$Reply$value$(_idx$3, _code$4, _term$2);
                        var $5889 = $5894;
                        break;
                };
                return $5889;
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Kind$Parser$suffix = x0 => x1 => x2 => x3 => Kind$Parser$suffix$(x0, x1, x2, x3);

    function Kind$Parser$term$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $5896 = self.idx;
                var $5897 = self.code;
                var $5898 = self.err;
                var $5899 = Parser$Reply$error$($5896, $5897, $5898);
                var $5895 = $5899;
                break;
            case 'Parser.Reply.value':
                var $5900 = self.idx;
                var $5901 = self.code;
                var $5902 = self.val;
                var self = Parser$first_of$(List$cons$(Kind$Parser$forall, List$cons$(Kind$Parser$lambda, List$cons$(Kind$Parser$lambda$erased, List$cons$(Kind$Parser$lambda$nameless, List$cons$(Kind$Parser$parenthesis, List$cons$(Kind$Parser$letforrange$u32, List$cons$(Kind$Parser$letforrange$u32$with, List$cons$(Kind$Parser$letforrange$nat, List$cons$(Kind$Parser$letforrange$nat$with, List$cons$(Kind$Parser$letforin, List$cons$(Kind$Parser$letforin$with, List$cons$(Kind$Parser$letwhile, List$cons$(Kind$Parser$letwhile$with, List$cons$(Kind$Parser$let, List$cons$(Kind$Parser$let$omit, List$cons$(Kind$Parser$getwhile, List$cons$(Kind$Parser$getwhile$with, List$cons$(Kind$Parser$get, List$cons$(Kind$Parser$get$omit, List$cons$(Kind$Parser$def, List$cons$(Kind$Parser$goal_rewrite, List$cons$(Kind$Parser$if, List$cons$(Kind$Parser$char, List$cons$(Kind$Parser$string(34), List$cons$(Kind$Parser$string(96), List$cons$(Kind$Parser$pair, List$cons$(Kind$Parser$sigma$type, List$cons$(Kind$Parser$some, List$cons$(Kind$Parser$not, List$cons$(Kind$Parser$left, List$cons$(Kind$Parser$right, List$cons$(Kind$Parser$apply, List$cons$(Kind$Parser$chain, List$cons$(Kind$Parser$mirror, List$cons$(Kind$Parser$list, List$cons$(Kind$Parser$map, List$cons$(Kind$Parser$log, List$cons$(Kind$Parser$do, List$cons$(Kind$Parser$case, List$cons$(Kind$Parser$open, List$cons$(Kind$Parser$without, List$cons$(Kind$Parser$switch, List$cons$(Kind$Parser$goal, List$cons$(Kind$Parser$hole, List$cons$(Kind$Parser$float$64, List$cons$(Kind$Parser$float$32, List$cons$(Kind$Parser$machine_integer$signed$(256n), List$cons$(Kind$Parser$machine_integer$signed$(128n), List$cons$(Kind$Parser$machine_integer$signed$(64n), List$cons$(Kind$Parser$machine_integer$signed$(32n), List$cons$(Kind$Parser$machine_integer$signed$(16n), List$cons$(Kind$Parser$machine_integer$signed$(8n), List$cons$(Kind$Parser$int, List$cons$(Kind$Parser$machine_integer$unsigned$(256n), List$cons$(Kind$Parser$machine_integer$unsigned$(128n), List$cons$(Kind$Parser$machine_integer$unsigned$(64n), List$cons$(Kind$Parser$machine_integer$unsigned$(32n), List$cons$(Kind$Parser$machine_integer$unsigned$(16n), List$cons$(Kind$Parser$machine_integer$unsigned$(8n), List$cons$(Kind$Parser$u64, List$cons$(Kind$Parser$u32, List$cons$(Kind$Parser$u16, List$cons$(Kind$Parser$u8, List$cons$(Kind$Parser$nat, List$cons$(Kind$Parser$reference, List$nil))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))($5900)($5901);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $5904 = self.idx;
                        var $5905 = self.code;
                        var $5906 = self.err;
                        var $5907 = Parser$Reply$error$($5904, $5905, $5906);
                        var $5903 = $5907;
                        break;
                    case 'Parser.Reply.value':
                        var $5908 = self.idx;
                        var $5909 = self.code;
                        var $5910 = self.val;
                        var $5911 = Kind$Parser$suffix$($5902, $5910, $5908, $5909);
                        var $5903 = $5911;
                        break;
                };
                var $5895 = $5903;
                break;
        };
        return $5895;
    };
    const Kind$Parser$term = x0 => x1 => Kind$Parser$term$(x0, x1);

    function Kind$Parser$name_term$(_sep$1, _idx$2, _code$3) {
        var self = Kind$Parser$name$(_idx$2, _code$3);
        switch (self._) {
            case 'Parser.Reply.error':
                var $5913 = self.idx;
                var $5914 = self.code;
                var $5915 = self.err;
                var $5916 = Parser$Reply$error$($5913, $5914, $5915);
                var $5912 = $5916;
                break;
            case 'Parser.Reply.value':
                var $5917 = self.idx;
                var $5918 = self.code;
                var $5919 = self.val;
                var self = Kind$Parser$text$(_sep$1, $5917, $5918);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $5921 = self.idx;
                        var $5922 = self.code;
                        var $5923 = self.err;
                        var $5924 = Parser$Reply$error$($5921, $5922, $5923);
                        var $5920 = $5924;
                        break;
                    case 'Parser.Reply.value':
                        var $5925 = self.idx;
                        var $5926 = self.code;
                        var self = Kind$Parser$term$($5925, $5926);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $5928 = self.idx;
                                var $5929 = self.code;
                                var $5930 = self.err;
                                var $5931 = Parser$Reply$error$($5928, $5929, $5930);
                                var $5927 = $5931;
                                break;
                            case 'Parser.Reply.value':
                                var $5932 = self.idx;
                                var $5933 = self.code;
                                var $5934 = self.val;
                                var $5935 = Parser$Reply$value$($5932, $5933, Pair$new$($5919, $5934));
                                var $5927 = $5935;
                                break;
                        };
                        var $5920 = $5927;
                        break;
                };
                var $5912 = $5920;
                break;
        };
        return $5912;
    };
    const Kind$Parser$name_term = x0 => x1 => x2 => Kind$Parser$name_term$(x0, x1, x2);

    function Kind$Binder$new$(_eras$1, _name$2, _term$3) {
        var $5936 = ({
            _: 'Kind.Binder.new',
            'eras': _eras$1,
            'name': _name$2,
            'term': _term$3
        });
        return $5936;
    };
    const Kind$Binder$new = x0 => x1 => x2 => Kind$Binder$new$(x0, x1, x2);

    function Kind$Parser$binder$homo$(_sep$1, _eras$2, _idx$3, _code$4) {
        var self = Kind$Parser$text$((() => {
            var self = _eras$2;
            if (self) {
                var $5938 = "<";
                return $5938;
            } else {
                var $5939 = "(";
                return $5939;
            };
        })(), _idx$3, _code$4);
        switch (self._) {
            case 'Parser.Reply.error':
                var $5940 = self.idx;
                var $5941 = self.code;
                var $5942 = self.err;
                var $5943 = Parser$Reply$error$($5940, $5941, $5942);
                var $5937 = $5943;
                break;
            case 'Parser.Reply.value':
                var $5944 = self.idx;
                var $5945 = self.code;
                var self = Parser$until1$(Kind$Parser$text((() => {
                    var self = _eras$2;
                    if (self) {
                        var $5947 = ">";
                        return $5947;
                    } else {
                        var $5948 = ")";
                        return $5948;
                    };
                })()), Kind$Parser$item(Kind$Parser$name_term(_sep$1)), $5944, $5945);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $5949 = self.idx;
                        var $5950 = self.code;
                        var $5951 = self.err;
                        var $5952 = Parser$Reply$error$($5949, $5950, $5951);
                        var $5946 = $5952;
                        break;
                    case 'Parser.Reply.value':
                        var $5953 = self.idx;
                        var $5954 = self.code;
                        var $5955 = self.val;
                        var $5956 = Parser$Reply$value$($5953, $5954, List$mapped$($5955, (_pair$11 => {
                            var self = _pair$11;
                            switch (self._) {
                                case 'Pair.new':
                                    var $5958 = self.fst;
                                    var $5959 = self.snd;
                                    var $5960 = Kind$Binder$new$(_eras$2, $5958, $5959);
                                    var $5957 = $5960;
                                    break;
                            };
                            return $5957;
                        })));
                        var $5946 = $5956;
                        break;
                };
                var $5937 = $5946;
                break;
        };
        return $5937;
    };
    const Kind$Parser$binder$homo = x0 => x1 => x2 => x3 => Kind$Parser$binder$homo$(x0, x1, x2, x3);

    function List$concat$(_as$2, _bs$3) {
        var self = _as$2;
        switch (self._) {
            case 'List.cons':
                var $5962 = self.head;
                var $5963 = self.tail;
                var $5964 = List$cons$($5962, List$concat$($5963, _bs$3));
                var $5961 = $5964;
                break;
            case 'List.nil':
                var $5965 = _bs$3;
                var $5961 = $5965;
                break;
        };
        return $5961;
    };
    const List$concat = x0 => x1 => List$concat$(x0, x1);

    function List$flatten$(_xs$2) {
        var self = _xs$2;
        switch (self._) {
            case 'List.cons':
                var $5967 = self.head;
                var $5968 = self.tail;
                var $5969 = List$concat$($5967, List$flatten$($5968));
                var $5966 = $5969;
                break;
            case 'List.nil':
                var $5970 = List$nil;
                var $5966 = $5970;
                break;
        };
        return $5966;
    };
    const List$flatten = x0 => List$flatten$(x0);

    function Kind$Parser$binder$(_sep$1, _idx$2, _code$3) {
        var self = Parser$many1$(Parser$first_of$(List$cons$(Kind$Parser$binder$homo(_sep$1)(Bool$true), List$cons$(Kind$Parser$binder$homo(_sep$1)(Bool$false), List$nil))), _idx$2, _code$3);
        switch (self._) {
            case 'Parser.Reply.error':
                var $5972 = self.idx;
                var $5973 = self.code;
                var $5974 = self.err;
                var $5975 = Parser$Reply$error$($5972, $5973, $5974);
                var $5971 = $5975;
                break;
            case 'Parser.Reply.value':
                var $5976 = self.idx;
                var $5977 = self.code;
                var $5978 = self.val;
                var $5979 = Parser$Reply$value$($5976, $5977, List$flatten$($5978));
                var $5971 = $5979;
                break;
        };
        return $5971;
    };
    const Kind$Parser$binder = x0 => x1 => x2 => Kind$Parser$binder$(x0, x1, x2);
    const List$length = a0 => (list_length(a0));

    function Kind$Parser$make_forall$(_binds$1, _body$2) {
        var self = _binds$1;
        switch (self._) {
            case 'List.cons':
                var $5981 = self.head;
                var $5982 = self.tail;
                var self = $5981;
                switch (self._) {
                    case 'Kind.Binder.new':
                        var $5984 = self.eras;
                        var $5985 = self.name;
                        var $5986 = self.term;
                        var $5987 = Kind$Term$all$($5984, "", $5985, $5986, (_s$8 => _x$9 => {
                            var $5988 = Kind$Parser$make_forall$($5982, _body$2);
                            return $5988;
                        }));
                        var $5983 = $5987;
                        break;
                };
                var $5980 = $5983;
                break;
            case 'List.nil':
                var $5989 = _body$2;
                var $5980 = $5989;
                break;
        };
        return $5980;
    };
    const Kind$Parser$make_forall = x0 => x1 => Kind$Parser$make_forall$(x0, x1);

    function List$at_last$(_index$2, _list$3) {
        var $5990 = List$at$(_index$2, List$reverse$(_list$3));
        return $5990;
    };
    const List$at_last = x0 => x1 => List$at_last$(x0, x1);

    function Kind$Term$var$(_name$1, _indx$2) {
        var $5991 = ({
            _: 'Kind.Term.var',
            'name': _name$1,
            'indx': _indx$2
        });
        return $5991;
    };
    const Kind$Term$var = x0 => x1 => Kind$Term$var$(x0, x1);

    function Kind$Context$get_name_skips$(_name$1) {
        var self = _name$1;
        if (self.length === 0) {
            var $5993 = Pair$new$("", 0n);
            var $5992 = $5993;
        } else {
            var $5994 = self.charCodeAt(0);
            var $5995 = self.slice(1);
            var _name_skips$4 = Kind$Context$get_name_skips$($5995);
            var self = _name_skips$4;
            switch (self._) {
                case 'Pair.new':
                    var $5997 = self.fst;
                    var $5998 = self.snd;
                    var self = ($5994 === 94);
                    if (self) {
                        var $6000 = Pair$new$($5997, Nat$succ$($5998));
                        var $5999 = $6000;
                    } else {
                        var $6001 = Pair$new$(String$cons$($5994, $5997), $5998);
                        var $5999 = $6001;
                    };
                    var $5996 = $5999;
                    break;
            };
            var $5992 = $5996;
        };
        return $5992;
    };
    const Kind$Context$get_name_skips = x0 => Kind$Context$get_name_skips$(x0);

    function Kind$Name$eql$(_a$1, _b$2) {
        var $6002 = (_a$1 === _b$2);
        return $6002;
    };
    const Kind$Name$eql = x0 => x1 => Kind$Name$eql$(x0, x1);

    function Kind$Context$find$go$(_name$1, _skip$2, _ctx$3) {
        var Kind$Context$find$go$ = (_name$1, _skip$2, _ctx$3) => ({
            ctr: 'TCO',
            arg: [_name$1, _skip$2, _ctx$3]
        });
        var Kind$Context$find$go = _name$1 => _skip$2 => _ctx$3 => Kind$Context$find$go$(_name$1, _skip$2, _ctx$3);
        var arg = [_name$1, _skip$2, _ctx$3];
        while (true) {
            let [_name$1, _skip$2, _ctx$3] = arg;
            var R = (() => {
                var self = _ctx$3;
                switch (self._) {
                    case 'List.cons':
                        var $6003 = self.head;
                        var $6004 = self.tail;
                        var self = $6003;
                        switch (self._) {
                            case 'Pair.new':
                                var $6006 = self.fst;
                                var $6007 = self.snd;
                                var self = Kind$Name$eql$(_name$1, $6006);
                                if (self) {
                                    var self = _skip$2;
                                    if (self === 0n) {
                                        var $6010 = Maybe$some$($6007);
                                        var $6009 = $6010;
                                    } else {
                                        var $6011 = (self - 1n);
                                        var $6012 = Kind$Context$find$go$(_name$1, $6011, $6004);
                                        var $6009 = $6012;
                                    };
                                    var $6008 = $6009;
                                } else {
                                    var $6013 = Kind$Context$find$go$(_name$1, _skip$2, $6004);
                                    var $6008 = $6013;
                                };
                                var $6005 = $6008;
                                break;
                        };
                        return $6005;
                    case 'List.nil':
                        var $6014 = Maybe$none;
                        return $6014;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Kind$Context$find$go = x0 => x1 => x2 => Kind$Context$find$go$(x0, x1, x2);

    function Kind$Context$find$(_name$1, _ctx$2) {
        var self = Kind$Context$get_name_skips$(_name$1);
        switch (self._) {
            case 'Pair.new':
                var $6016 = self.fst;
                var $6017 = self.snd;
                var $6018 = Kind$Context$find$go$($6016, $6017, _ctx$2);
                var $6015 = $6018;
                break;
        };
        return $6015;
    };
    const Kind$Context$find = x0 => x1 => Kind$Context$find$(x0, x1);

    function Kind$Path$o$(_path$1, _x$2) {
        var $6019 = _path$1((_x$2 + '0'));
        return $6019;
    };
    const Kind$Path$o = x0 => x1 => Kind$Path$o$(x0, x1);

    function Kind$Path$i$(_path$1, _x$2) {
        var $6020 = _path$1((_x$2 + '1'));
        return $6020;
    };
    const Kind$Path$i = x0 => x1 => Kind$Path$i$(x0, x1);

    function Kind$Path$to_bits$(_path$1) {
        var $6021 = _path$1(Bits$e);
        return $6021;
    };
    const Kind$Path$to_bits = x0 => Kind$Path$to_bits$(x0);

    function Kind$Term$bind$(_vars$1, _path$2, _term$3) {
        var self = _term$3;
        switch (self._) {
            case 'Kind.Term.var':
                var $6023 = self.name;
                var $6024 = self.indx;
                var self = List$at_last$($6024, _vars$1);
                switch (self._) {
                    case 'Maybe.some':
                        var $6026 = self.value;
                        var $6027 = Pair$snd$($6026);
                        var $6025 = $6027;
                        break;
                    case 'Maybe.none':
                        var $6028 = Kind$Term$var$($6023, $6024);
                        var $6025 = $6028;
                        break;
                };
                var $6022 = $6025;
                break;
            case 'Kind.Term.ref':
                var $6029 = self.name;
                var self = Kind$Context$find$($6029, _vars$1);
                switch (self._) {
                    case 'Maybe.some':
                        var $6031 = self.value;
                        var $6032 = $6031;
                        var $6030 = $6032;
                        break;
                    case 'Maybe.none':
                        var $6033 = Kind$Term$ref$($6029);
                        var $6030 = $6033;
                        break;
                };
                var $6022 = $6030;
                break;
            case 'Kind.Term.all':
                var $6034 = self.eras;
                var $6035 = self.self;
                var $6036 = self.name;
                var $6037 = self.xtyp;
                var $6038 = self.body;
                var _vlen$9 = (list_length(_vars$1));
                var $6039 = Kind$Term$all$($6034, $6035, $6036, Kind$Term$bind$(_vars$1, Kind$Path$o(_path$2), $6037), (_s$10 => _x$11 => {
                    var $6040 = Kind$Term$bind$(List$cons$(Pair$new$($6036, _x$11), List$cons$(Pair$new$($6035, _s$10), _vars$1)), Kind$Path$i(_path$2), $6038(Kind$Term$var$($6035, _vlen$9))(Kind$Term$var$($6036, Nat$succ$(_vlen$9))));
                    return $6040;
                }));
                var $6022 = $6039;
                break;
            case 'Kind.Term.lam':
                var $6041 = self.name;
                var $6042 = self.body;
                var _vlen$6 = (list_length(_vars$1));
                var $6043 = Kind$Term$lam$($6041, (_x$7 => {
                    var $6044 = Kind$Term$bind$(List$cons$(Pair$new$($6041, _x$7), _vars$1), Kind$Path$o(_path$2), $6042(Kind$Term$var$($6041, _vlen$6)));
                    return $6044;
                }));
                var $6022 = $6043;
                break;
            case 'Kind.Term.app':
                var $6045 = self.func;
                var $6046 = self.argm;
                var $6047 = Kind$Term$app$(Kind$Term$bind$(_vars$1, Kind$Path$o(_path$2), $6045), Kind$Term$bind$(_vars$1, Kind$Path$i(_path$2), $6046));
                var $6022 = $6047;
                break;
            case 'Kind.Term.let':
                var $6048 = self.name;
                var $6049 = self.expr;
                var $6050 = self.body;
                var _vlen$7 = (list_length(_vars$1));
                var $6051 = Kind$Term$let$($6048, Kind$Term$bind$(_vars$1, Kind$Path$o(_path$2), $6049), (_x$8 => {
                    var $6052 = Kind$Term$bind$(List$cons$(Pair$new$($6048, _x$8), _vars$1), Kind$Path$i(_path$2), $6050(Kind$Term$var$($6048, _vlen$7)));
                    return $6052;
                }));
                var $6022 = $6051;
                break;
            case 'Kind.Term.def':
                var $6053 = self.name;
                var $6054 = self.expr;
                var $6055 = self.body;
                var _vlen$7 = (list_length(_vars$1));
                var $6056 = Kind$Term$def$($6053, Kind$Term$bind$(_vars$1, Kind$Path$o(_path$2), $6054), (_x$8 => {
                    var $6057 = Kind$Term$bind$(List$cons$(Pair$new$($6053, _x$8), _vars$1), Kind$Path$i(_path$2), $6055(Kind$Term$var$($6053, _vlen$7)));
                    return $6057;
                }));
                var $6022 = $6056;
                break;
            case 'Kind.Term.ann':
                var $6058 = self.done;
                var $6059 = self.term;
                var $6060 = self.type;
                var $6061 = Kind$Term$ann$($6058, Kind$Term$bind$(_vars$1, Kind$Path$o(_path$2), $6059), Kind$Term$bind$(_vars$1, Kind$Path$i(_path$2), $6060));
                var $6022 = $6061;
                break;
            case 'Kind.Term.gol':
                var $6062 = self.name;
                var $6063 = self.dref;
                var $6064 = self.verb;
                var $6065 = Kind$Term$gol$($6062, $6063, $6064);
                var $6022 = $6065;
                break;
            case 'Kind.Term.nat':
                var $6066 = self.natx;
                var $6067 = Kind$Term$nat$($6066);
                var $6022 = $6067;
                break;
            case 'Kind.Term.chr':
                var $6068 = self.chrx;
                var $6069 = Kind$Term$chr$($6068);
                var $6022 = $6069;
                break;
            case 'Kind.Term.str':
                var $6070 = self.strx;
                var $6071 = Kind$Term$str$($6070);
                var $6022 = $6071;
                break;
            case 'Kind.Term.cse':
                var $6072 = self.expr;
                var $6073 = self.name;
                var $6074 = self.with;
                var $6075 = self.cses;
                var $6076 = self.moti;
                var _expr$10 = Kind$Term$bind$(_vars$1, Kind$Path$o(_path$2), $6072);
                var _name$11 = $6073;
                var _wyth$12 = List$mapped$($6074, (_with_var$12 => {
                    var self = _with_var$12;
                    switch (self._) {
                        case 'Kind.Ann.new':
                            var $6079 = self.name;
                            var $6080 = self.term;
                            var $6081 = self.type;
                            var _with_var_term$16 = Kind$Term$bind$(_vars$1, _path$2, $6080);
                            var self = $6081;
                            switch (self._) {
                                case 'Maybe.some':
                                    var $6083 = self.value;
                                    var $6084 = Maybe$some$(Kind$Term$bind$(_vars$1, _path$2, $6083));
                                    var _with_var_type$17 = $6084;
                                    break;
                                case 'Maybe.none':
                                    var $6085 = Maybe$none;
                                    var _with_var_type$17 = $6085;
                                    break;
                            };
                            var $6082 = Kind$Ann$new$($6079, _with_var_term$16, _with_var_type$17);
                            var $6078 = $6082;
                            break;
                    };
                    return $6078;
                }));
                var _cses$13 = $6075;
                var _moti$14 = $6076;
                var $6077 = Kind$Term$cse$(Kind$Path$to_bits$(_path$2), _expr$10, _name$11, _wyth$12, _cses$13, _moti$14);
                var $6022 = $6077;
                break;
            case 'Kind.Term.ori':
                var $6086 = self.orig;
                var $6087 = self.expr;
                var $6088 = Kind$Term$ori$($6086, Kind$Term$bind$(_vars$1, _path$2, $6087));
                var $6022 = $6088;
                break;
            case 'Kind.Term.typ':
                var $6089 = Kind$Term$typ;
                var $6022 = $6089;
                break;
            case 'Kind.Term.hol':
                var $6090 = Kind$Term$hol$(Kind$Path$to_bits$(_path$2));
                var $6022 = $6090;
                break;
        };
        return $6022;
    };
    const Kind$Term$bind = x0 => x1 => x2 => Kind$Term$bind$(x0, x1, x2);

    function Trampoline$call$(_t$2) {
        var Trampoline$call$ = (_t$2) => ({
            ctr: 'TCO',
            arg: [_t$2]
        });
        var Trampoline$call = _t$2 => Trampoline$call$(_t$2);
        var arg = [_t$2];
        while (true) {
            let [_t$2] = arg;
            var R = (() => {
                var self = _t$2;
                switch (self._) {
                    case 'Trampoline.done':
                        var $6091 = self.value;
                        var $6092 = $6091;
                        return $6092;
                    case 'Trampoline.wrap':
                        var $6093 = self.value;
                        var $6094 = Trampoline$call$($6093(Unit$new));
                        return $6094;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Trampoline$call = x0 => Trampoline$call$(x0);

    function Trampoline$(_A$1) {
        var $6095 = null;
        return $6095;
    };
    const Trampoline = x0 => Trampoline$(x0);

    function Trampoline$wrap$(_value$2) {
        var $6096 = ({
            _: 'Trampoline.wrap',
            'value': _value$2
        });
        return $6096;
    };
    const Trampoline$wrap = x0 => Trampoline$wrap$(x0);

    function BitsMap$set_if_empty$cps$go$(_bits$2, _val$3, _map$4, _cont$5) {
        var BitsMap$set_if_empty$cps$go$ = (_bits$2, _val$3, _map$4, _cont$5) => ({
            ctr: 'TCO',
            arg: [_bits$2, _val$3, _map$4, _cont$5]
        });
        var BitsMap$set_if_empty$cps$go = _bits$2 => _val$3 => _map$4 => _cont$5 => BitsMap$set_if_empty$cps$go$(_bits$2, _val$3, _map$4, _cont$5);
        var arg = [_bits$2, _val$3, _map$4, _cont$5];
        while (true) {
            let [_bits$2, _val$3, _map$4, _cont$5] = arg;
            var R = (() => {
                var self = _bits$2;
                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                    case 'o':
                        var $6097 = self.slice(0, -1);
                        var self = _map$4;
                        switch (self._) {
                            case 'BitsMap.tie':
                                var $6099 = self.val;
                                var $6100 = self.lft;
                                var $6101 = self.rgt;
                                var $6102 = BitsMap$set_if_empty$cps$go$($6097, _val$3, $6100, (_lft$10 => {
                                    var $6103 = Trampoline$wrap$((_$11 => {
                                        var $6104 = _cont$5(BitsMap$tie$($6099, _lft$10, $6101));
                                        return $6104;
                                    }));
                                    return $6103;
                                }));
                                var $6098 = $6102;
                                break;
                            case 'BitsMap.new':
                                var $6105 = BitsMap$set_if_empty$cps$go$($6097, _val$3, BitsMap$new, (_lft$7 => {
                                    var $6106 = Trampoline$wrap$((_$8 => {
                                        var $6107 = _cont$5(BitsMap$tie$(Maybe$none, _lft$7, BitsMap$new));
                                        return $6107;
                                    }));
                                    return $6106;
                                }));
                                var $6098 = $6105;
                                break;
                        };
                        return $6098;
                    case 'i':
                        var $6108 = self.slice(0, -1);
                        var self = _map$4;
                        switch (self._) {
                            case 'BitsMap.tie':
                                var $6110 = self.val;
                                var $6111 = self.lft;
                                var $6112 = self.rgt;
                                var $6113 = BitsMap$set_if_empty$cps$go$($6108, _val$3, $6112, (_rgt$10 => {
                                    var $6114 = Trampoline$wrap$((_$11 => {
                                        var $6115 = _cont$5(BitsMap$tie$($6110, $6111, _rgt$10));
                                        return $6115;
                                    }));
                                    return $6114;
                                }));
                                var $6109 = $6113;
                                break;
                            case 'BitsMap.new':
                                var $6116 = BitsMap$set_if_empty$cps$go$($6108, _val$3, BitsMap$new, (_rgt$7 => {
                                    var $6117 = Trampoline$wrap$((_$8 => {
                                        var $6118 = _cont$5(BitsMap$tie$(Maybe$none, BitsMap$new, _rgt$7));
                                        return $6118;
                                    }));
                                    return $6117;
                                }));
                                var $6109 = $6116;
                                break;
                        };
                        return $6109;
                    case 'e':
                        var self = _map$4;
                        switch (self._) {
                            case 'BitsMap.tie':
                                var $6120 = self.val;
                                var $6121 = self.lft;
                                var $6122 = self.rgt;
                                var $6123 = _cont$5(BitsMap$tie$((() => {
                                    var self = $6120;
                                    switch (self._) {
                                        case 'Maybe.some':
                                            var $6124 = self.value;
                                            var $6125 = Maybe$some$($6124);
                                            return $6125;
                                        case 'Maybe.none':
                                            var $6126 = Maybe$some$(_val$3);
                                            return $6126;
                                    };
                                })(), $6121, $6122));
                                var $6119 = $6123;
                                break;
                            case 'BitsMap.new':
                                var $6127 = _cont$5(BitsMap$tie$(Maybe$some$(_val$3), BitsMap$new, BitsMap$new));
                                var $6119 = $6127;
                                break;
                        };
                        return $6119;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const BitsMap$set_if_empty$cps$go = x0 => x1 => x2 => x3 => BitsMap$set_if_empty$cps$go$(x0, x1, x2, x3);

    function Trampoline$done$(_value$2) {
        var $6128 = ({
            _: 'Trampoline.done',
            'value': _value$2
        });
        return $6128;
    };
    const Trampoline$done = x0 => Trampoline$done$(x0);

    function BitsMap$set_if_empty$cps$(_bits$2, _val$3, _map$4) {
        var $6129 = Trampoline$call$(BitsMap$set_if_empty$cps$go$(_bits$2, _val$3, _map$4, Trampoline$done));
        return $6129;
    };
    const BitsMap$set_if_empty$cps = x0 => x1 => x2 => BitsMap$set_if_empty$cps$(x0, x1, x2);

    function BitsMap$set_if_empty$(_bits$2, _val$3, _map$4) {
        var $6130 = BitsMap$set_if_empty$cps$(_bits$2, _val$3, _map$4);
        return $6130;
    };
    const BitsMap$set_if_empty = x0 => x1 => x2 => BitsMap$set_if_empty$(x0, x1, x2);

    function Kind$Map$set_if_empty$(_name$2, _val$3, _map$4) {
        var $6131 = BitsMap$set_if_empty$((kind_name_to_bits(_name$2)), _val$3, _map$4);
        return $6131;
    };
    const Kind$Map$set_if_empty = x0 => x1 => x2 => Kind$Map$set_if_empty$(x0, x1, x2);
    const Kind$Status$init = ({
        _: 'Kind.Status.init'
    });

    function Kind$Map$def$(_file$1, _code$2, _orig$3, _name$4, _term$5, _type$6, _isct$7, _arit$8, _done$9, _defs$10) {
        var _defn$11 = Kind$Def$new(_file$1)(_code$2)(_orig$3)(_name$4)(_term$5)(_type$6)(_isct$7)(_arit$8);
        var self = _done$9;
        if (self) {
            var $6133 = Kind$Map$set$(_name$4, _defn$11(Kind$Status$done$(Bool$false)), _defs$10);
            var $6132 = $6133;
        } else {
            var $6134 = Kind$Map$set_if_empty$(_name$4, _defn$11(Kind$Status$init), _defs$10);
            var $6132 = $6134;
        };
        return $6132;
    };
    const Kind$Map$def = x0 => x1 => x2 => x3 => x4 => x5 => x6 => x7 => x8 => x9 => Kind$Map$def$(x0, x1, x2, x3, x4, x5, x6, x7, x8, x9);

    function Kind$Parser$file$def$(_file$1, _code$2, _defs$3, _idx$4, _code$5) {
        var self = Kind$Parser$init$(_idx$4, _code$5);
        switch (self._) {
            case 'Parser.Reply.error':
                var $6136 = self.idx;
                var $6137 = self.code;
                var $6138 = self.err;
                var $6139 = Parser$Reply$error$($6136, $6137, $6138);
                var $6135 = $6139;
                break;
            case 'Parser.Reply.value':
                var $6140 = self.idx;
                var $6141 = self.code;
                var $6142 = self.val;
                var self = Kind$Parser$name1$($6140, $6141);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $6144 = self.idx;
                        var $6145 = self.code;
                        var $6146 = self.err;
                        var $6147 = Parser$Reply$error$($6144, $6145, $6146);
                        var $6143 = $6147;
                        break;
                    case 'Parser.Reply.value':
                        var $6148 = self.idx;
                        var $6149 = self.code;
                        var $6150 = self.val;
                        var self = Parser$many$(Kind$Parser$binder(":"))($6148)($6149);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $6152 = self.idx;
                                var $6153 = self.code;
                                var $6154 = self.err;
                                var $6155 = Parser$Reply$error$($6152, $6153, $6154);
                                var $6151 = $6155;
                                break;
                            case 'Parser.Reply.value':
                                var $6156 = self.idx;
                                var $6157 = self.code;
                                var $6158 = self.val;
                                var _args$15 = List$flatten$($6158);
                                var self = Kind$Parser$text$(":", $6156, $6157);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $6160 = self.idx;
                                        var $6161 = self.code;
                                        var $6162 = self.err;
                                        var $6163 = Parser$Reply$error$($6160, $6161, $6162);
                                        var $6159 = $6163;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $6164 = self.idx;
                                        var $6165 = self.code;
                                        var self = Kind$Parser$term$($6164, $6165);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $6167 = self.idx;
                                                var $6168 = self.code;
                                                var $6169 = self.err;
                                                var $6170 = Parser$Reply$error$($6167, $6168, $6169);
                                                var $6166 = $6170;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $6171 = self.idx;
                                                var $6172 = self.code;
                                                var $6173 = self.val;
                                                var self = Kind$Parser$term$($6171, $6172);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $6175 = self.idx;
                                                        var $6176 = self.code;
                                                        var $6177 = self.err;
                                                        var $6178 = Parser$Reply$error$($6175, $6176, $6177);
                                                        var $6174 = $6178;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $6179 = self.idx;
                                                        var $6180 = self.code;
                                                        var $6181 = self.val;
                                                        var self = Kind$Parser$stop$($6142, $6179, $6180);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $6183 = self.idx;
                                                                var $6184 = self.code;
                                                                var $6185 = self.err;
                                                                var $6186 = Parser$Reply$error$($6183, $6184, $6185);
                                                                var $6182 = $6186;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $6187 = self.idx;
                                                                var $6188 = self.code;
                                                                var $6189 = self.val;
                                                                var _arit$28 = (list_length(_args$15));
                                                                var _type$29 = Kind$Parser$make_forall$(_args$15, $6173);
                                                                var _term$30 = Kind$Parser$make_lambda$(List$mapped$(_args$15, (_x$30 => {
                                                                    var self = _x$30;
                                                                    switch (self._) {
                                                                        case 'Kind.Binder.new':
                                                                            var $6192 = self.name;
                                                                            var $6193 = $6192;
                                                                            var $6191 = $6193;
                                                                            break;
                                                                    };
                                                                    return $6191;
                                                                })), $6181);
                                                                var _type$31 = Kind$Term$bind$(List$nil, (_x$31 => {
                                                                    var $6194 = (_x$31 + '1');
                                                                    return $6194;
                                                                }), _type$29);
                                                                var _term$32 = Kind$Term$bind$(List$nil, (_x$32 => {
                                                                    var $6195 = (_x$32 + '0');
                                                                    return $6195;
                                                                }), _term$30);
                                                                var _defs$33 = Kind$Map$def$(_file$1, _code$2, $6189, $6150, _term$32, _type$31, Bool$false, _arit$28, Bool$false, _defs$3);
                                                                var $6190 = Parser$Reply$value$($6187, $6188, _defs$33);
                                                                var $6182 = $6190;
                                                                break;
                                                        };
                                                        var $6174 = $6182;
                                                        break;
                                                };
                                                var $6166 = $6174;
                                                break;
                                        };
                                        var $6159 = $6166;
                                        break;
                                };
                                var $6151 = $6159;
                                break;
                        };
                        var $6143 = $6151;
                        break;
                };
                var $6135 = $6143;
                break;
        };
        return $6135;
    };
    const Kind$Parser$file$def = x0 => x1 => x2 => x3 => x4 => Kind$Parser$file$def$(x0, x1, x2, x3, x4);

    function Kind$Constructor$new$(_name$1, _args$2, _inds$3) {
        var $6196 = ({
            _: 'Kind.Constructor.new',
            'name': _name$1,
            'args': _args$2,
            'inds': _inds$3
        });
        return $6196;
    };
    const Kind$Constructor$new = x0 => x1 => x2 => Kind$Constructor$new$(x0, x1, x2);

    function Kind$Parser$constructor$(_namespace$1, _idx$2, _code$3) {
        var self = Kind$Parser$name1$(_idx$2, _code$3);
        switch (self._) {
            case 'Parser.Reply.error':
                var $6198 = self.idx;
                var $6199 = self.code;
                var $6200 = self.err;
                var $6201 = Parser$Reply$error$($6198, $6199, $6200);
                var $6197 = $6201;
                break;
            case 'Parser.Reply.value':
                var $6202 = self.idx;
                var $6203 = self.code;
                var $6204 = self.val;
                var self = Parser$maybe$(Kind$Parser$binder(":"), $6202, $6203);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $6206 = self.idx;
                        var $6207 = self.code;
                        var $6208 = self.err;
                        var $6209 = Parser$Reply$error$($6206, $6207, $6208);
                        var $6205 = $6209;
                        break;
                    case 'Parser.Reply.value':
                        var $6210 = self.idx;
                        var $6211 = self.code;
                        var $6212 = self.val;
                        var self = Parser$maybe$((_idx$10 => _code$11 => {
                            var self = Kind$Parser$text$("~", _idx$10, _code$11);
                            switch (self._) {
                                case 'Parser.Reply.error':
                                    var $6215 = self.idx;
                                    var $6216 = self.code;
                                    var $6217 = self.err;
                                    var $6218 = Parser$Reply$error$($6215, $6216, $6217);
                                    var $6214 = $6218;
                                    break;
                                case 'Parser.Reply.value':
                                    var $6219 = self.idx;
                                    var $6220 = self.code;
                                    var $6221 = Kind$Parser$binder$("=", $6219, $6220);
                                    var $6214 = $6221;
                                    break;
                            };
                            return $6214;
                        }), $6210, $6211);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $6222 = self.idx;
                                var $6223 = self.code;
                                var $6224 = self.err;
                                var $6225 = Parser$Reply$error$($6222, $6223, $6224);
                                var $6213 = $6225;
                                break;
                            case 'Parser.Reply.value':
                                var $6226 = self.idx;
                                var $6227 = self.code;
                                var $6228 = self.val;
                                var _args$13 = Maybe$default$($6212, List$nil);
                                var _inds$14 = Maybe$default$($6228, List$nil);
                                var $6229 = Parser$Reply$value$($6226, $6227, Kind$Constructor$new$($6204, _args$13, _inds$14));
                                var $6213 = $6229;
                                break;
                        };
                        var $6205 = $6213;
                        break;
                };
                var $6197 = $6205;
                break;
        };
        return $6197;
    };
    const Kind$Parser$constructor = x0 => x1 => x2 => Kind$Parser$constructor$(x0, x1, x2);

    function Kind$Datatype$new$(_name$1, _pars$2, _inds$3, _ctrs$4) {
        var $6230 = ({
            _: 'Kind.Datatype.new',
            'name': _name$1,
            'pars': _pars$2,
            'inds': _inds$3,
            'ctrs': _ctrs$4
        });
        return $6230;
    };
    const Kind$Datatype$new = x0 => x1 => x2 => x3 => Kind$Datatype$new$(x0, x1, x2, x3);

    function Kind$Parser$datatype$(_idx$1, _code$2) {
        var self = Kind$Parser$text$("type ", _idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $6232 = self.idx;
                var $6233 = self.code;
                var $6234 = self.err;
                var $6235 = Parser$Reply$error$($6232, $6233, $6234);
                var $6231 = $6235;
                break;
            case 'Parser.Reply.value':
                var $6236 = self.idx;
                var $6237 = self.code;
                var self = Kind$Parser$name1$($6236, $6237);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $6239 = self.idx;
                        var $6240 = self.code;
                        var $6241 = self.err;
                        var $6242 = Parser$Reply$error$($6239, $6240, $6241);
                        var $6238 = $6242;
                        break;
                    case 'Parser.Reply.value':
                        var $6243 = self.idx;
                        var $6244 = self.code;
                        var $6245 = self.val;
                        var self = Parser$maybe$(Kind$Parser$binder(":"), $6243, $6244);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $6247 = self.idx;
                                var $6248 = self.code;
                                var $6249 = self.err;
                                var $6250 = Parser$Reply$error$($6247, $6248, $6249);
                                var $6246 = $6250;
                                break;
                            case 'Parser.Reply.value':
                                var $6251 = self.idx;
                                var $6252 = self.code;
                                var $6253 = self.val;
                                var self = Parser$maybe$((_idx$12 => _code$13 => {
                                    var self = Kind$Parser$text$("~", _idx$12, _code$13);
                                    switch (self._) {
                                        case 'Parser.Reply.error':
                                            var $6256 = self.idx;
                                            var $6257 = self.code;
                                            var $6258 = self.err;
                                            var $6259 = Parser$Reply$error$($6256, $6257, $6258);
                                            var $6255 = $6259;
                                            break;
                                        case 'Parser.Reply.value':
                                            var $6260 = self.idx;
                                            var $6261 = self.code;
                                            var $6262 = Kind$Parser$binder$(":", $6260, $6261);
                                            var $6255 = $6262;
                                            break;
                                    };
                                    return $6255;
                                }), $6251, $6252);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $6263 = self.idx;
                                        var $6264 = self.code;
                                        var $6265 = self.err;
                                        var $6266 = Parser$Reply$error$($6263, $6264, $6265);
                                        var $6254 = $6266;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $6267 = self.idx;
                                        var $6268 = self.code;
                                        var $6269 = self.val;
                                        var _pars$15 = Maybe$default$($6253, List$nil);
                                        var _inds$16 = Maybe$default$($6269, List$nil);
                                        var self = Kind$Parser$text$("{", $6267, $6268);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $6271 = self.idx;
                                                var $6272 = self.code;
                                                var $6273 = self.err;
                                                var $6274 = Parser$Reply$error$($6271, $6272, $6273);
                                                var $6270 = $6274;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $6275 = self.idx;
                                                var $6276 = self.code;
                                                var self = Parser$until$(Kind$Parser$text("}"), Kind$Parser$item(Kind$Parser$constructor($6245)))($6275)($6276);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $6278 = self.idx;
                                                        var $6279 = self.code;
                                                        var $6280 = self.err;
                                                        var $6281 = Parser$Reply$error$($6278, $6279, $6280);
                                                        var $6277 = $6281;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $6282 = self.idx;
                                                        var $6283 = self.code;
                                                        var $6284 = self.val;
                                                        var $6285 = Parser$Reply$value$($6282, $6283, Kind$Datatype$new$($6245, _pars$15, _inds$16, $6284));
                                                        var $6277 = $6285;
                                                        break;
                                                };
                                                var $6270 = $6277;
                                                break;
                                        };
                                        var $6254 = $6270;
                                        break;
                                };
                                var $6246 = $6254;
                                break;
                        };
                        var $6238 = $6246;
                        break;
                };
                var $6231 = $6238;
                break;
        };
        return $6231;
    };
    const Kind$Parser$datatype = x0 => x1 => Kind$Parser$datatype$(x0, x1);

    function Kind$Datatype$build_term$motive$go$(_type$1, _name$2, _inds$3) {
        var self = _inds$3;
        switch (self._) {
            case 'List.cons':
                var $6287 = self.head;
                var $6288 = self.tail;
                var self = $6287;
                switch (self._) {
                    case 'Kind.Binder.new':
                        var $6290 = self.eras;
                        var $6291 = self.name;
                        var $6292 = self.term;
                        var $6293 = Kind$Term$all$($6290, "", $6291, $6292, (_s$9 => _x$10 => {
                            var $6294 = Kind$Datatype$build_term$motive$go$(_type$1, _name$2, $6288);
                            return $6294;
                        }));
                        var $6289 = $6293;
                        break;
                };
                var $6286 = $6289;
                break;
            case 'List.nil':
                var self = _type$1;
                switch (self._) {
                    case 'Kind.Datatype.new':
                        var $6296 = self.pars;
                        var $6297 = self.inds;
                        var _slf$8 = Kind$Term$ref$(_name$2);
                        var _slf$9 = (() => {
                            var $6300 = _slf$8;
                            var $6301 = $6296;
                            let _slf$10 = $6300;
                            let _v$9;
                            while ($6301._ === 'List.cons') {
                                _v$9 = $6301.head;
                                var $6300 = Kind$Term$app$(_slf$10, Kind$Term$ref$((() => {
                                    var self = _v$9;
                                    switch (self._) {
                                        case 'Kind.Binder.new':
                                            var $6302 = self.name;
                                            var $6303 = $6302;
                                            return $6303;
                                    };
                                })()));
                                _slf$10 = $6300;
                                $6301 = $6301.tail;
                            }
                            return _slf$10;
                        })();
                        var _slf$10 = (() => {
                            var $6305 = _slf$9;
                            var $6306 = $6297;
                            let _slf$11 = $6305;
                            let _v$10;
                            while ($6306._ === 'List.cons') {
                                _v$10 = $6306.head;
                                var $6305 = Kind$Term$app$(_slf$11, Kind$Term$ref$((() => {
                                    var self = _v$10;
                                    switch (self._) {
                                        case 'Kind.Binder.new':
                                            var $6307 = self.name;
                                            var $6308 = $6307;
                                            return $6308;
                                    };
                                })()));
                                _slf$11 = $6305;
                                $6306 = $6306.tail;
                            }
                            return _slf$11;
                        })();
                        var $6298 = Kind$Term$all$(Bool$false, "", "", _slf$10, (_s$11 => _x$12 => {
                            var $6309 = Kind$Term$typ;
                            return $6309;
                        }));
                        var $6295 = $6298;
                        break;
                };
                var $6286 = $6295;
                break;
        };
        return $6286;
    };
    const Kind$Datatype$build_term$motive$go = x0 => x1 => x2 => Kind$Datatype$build_term$motive$go$(x0, x1, x2);

    function Kind$Datatype$build_term$motive$(_type$1) {
        var self = _type$1;
        switch (self._) {
            case 'Kind.Datatype.new':
                var $6311 = self.name;
                var $6312 = self.inds;
                var $6313 = Kind$Datatype$build_term$motive$go$(_type$1, $6311, $6312);
                var $6310 = $6313;
                break;
        };
        return $6310;
    };
    const Kind$Datatype$build_term$motive = x0 => Kind$Datatype$build_term$motive$(x0);

    function Kind$Datatype$build_term$constructor$go$(_type$1, _ctor$2, _args$3) {
        var self = _args$3;
        switch (self._) {
            case 'List.cons':
                var $6315 = self.head;
                var $6316 = self.tail;
                var self = $6315;
                switch (self._) {
                    case 'Kind.Binder.new':
                        var $6318 = self.eras;
                        var $6319 = self.name;
                        var $6320 = self.term;
                        var _eras$9 = $6318;
                        var _name$10 = $6319;
                        var _xtyp$11 = $6320;
                        var _body$12 = Kind$Datatype$build_term$constructor$go$(_type$1, _ctor$2, $6316);
                        var $6321 = Kind$Term$all$(_eras$9, "", _name$10, _xtyp$11, (_s$13 => _x$14 => {
                            var $6322 = _body$12;
                            return $6322;
                        }));
                        var $6317 = $6321;
                        break;
                };
                var $6314 = $6317;
                break;
            case 'List.nil':
                var self = _type$1;
                switch (self._) {
                    case 'Kind.Datatype.new':
                        var $6324 = self.name;
                        var $6325 = self.pars;
                        var self = _ctor$2;
                        switch (self._) {
                            case 'Kind.Constructor.new':
                                var $6327 = self.name;
                                var $6328 = self.args;
                                var $6329 = self.inds;
                                var _ret$11 = Kind$Term$ref$(Kind$Name$read$("P"));
                                var _ret$12 = (() => {
                                    var $6332 = _ret$11;
                                    var $6333 = $6329;
                                    let _ret$13 = $6332;
                                    let _v$12;
                                    while ($6333._ === 'List.cons') {
                                        _v$12 = $6333.head;
                                        var $6332 = Kind$Term$app$(_ret$13, (() => {
                                            var self = _v$12;
                                            switch (self._) {
                                                case 'Kind.Binder.new':
                                                    var $6334 = self.term;
                                                    var $6335 = $6334;
                                                    return $6335;
                                            };
                                        })());
                                        _ret$13 = $6332;
                                        $6333 = $6333.tail;
                                    }
                                    return _ret$13;
                                })();
                                var _ctr$13 = String$flatten$(List$cons$($6324, List$cons$(Kind$Name$read$("."), List$cons$($6327, List$nil))));
                                var _slf$14 = Kind$Term$ref$(_ctr$13);
                                var _slf$15 = (() => {
                                    var $6337 = _slf$14;
                                    var $6338 = $6325;
                                    let _slf$16 = $6337;
                                    let _v$15;
                                    while ($6338._ === 'List.cons') {
                                        _v$15 = $6338.head;
                                        var $6337 = Kind$Term$app$(_slf$16, Kind$Term$ref$((() => {
                                            var self = _v$15;
                                            switch (self._) {
                                                case 'Kind.Binder.new':
                                                    var $6339 = self.name;
                                                    var $6340 = $6339;
                                                    return $6340;
                                            };
                                        })()));
                                        _slf$16 = $6337;
                                        $6338 = $6338.tail;
                                    }
                                    return _slf$16;
                                })();
                                var _slf$16 = (() => {
                                    var $6342 = _slf$15;
                                    var $6343 = $6328;
                                    let _slf$17 = $6342;
                                    let _v$16;
                                    while ($6343._ === 'List.cons') {
                                        _v$16 = $6343.head;
                                        var $6342 = Kind$Term$app$(_slf$17, Kind$Term$ref$((() => {
                                            var self = _v$16;
                                            switch (self._) {
                                                case 'Kind.Binder.new':
                                                    var $6344 = self.name;
                                                    var $6345 = $6344;
                                                    return $6345;
                                            };
                                        })()));
                                        _slf$17 = $6342;
                                        $6343 = $6343.tail;
                                    }
                                    return _slf$17;
                                })();
                                var $6330 = Kind$Term$app$(_ret$12, _slf$16);
                                var $6326 = $6330;
                                break;
                        };
                        var $6323 = $6326;
                        break;
                };
                var $6314 = $6323;
                break;
        };
        return $6314;
    };
    const Kind$Datatype$build_term$constructor$go = x0 => x1 => x2 => Kind$Datatype$build_term$constructor$go$(x0, x1, x2);

    function Kind$Datatype$build_term$constructor$(_type$1, _ctor$2) {
        var self = _ctor$2;
        switch (self._) {
            case 'Kind.Constructor.new':
                var $6347 = self.args;
                var $6348 = Kind$Datatype$build_term$constructor$go$(_type$1, _ctor$2, $6347);
                var $6346 = $6348;
                break;
        };
        return $6346;
    };
    const Kind$Datatype$build_term$constructor = x0 => x1 => Kind$Datatype$build_term$constructor$(x0, x1);

    function Kind$Datatype$build_term$constructors$go$(_type$1, _name$2, _ctrs$3) {
        var self = _ctrs$3;
        switch (self._) {
            case 'List.cons':
                var $6350 = self.head;
                var $6351 = self.tail;
                var self = $6350;
                switch (self._) {
                    case 'Kind.Constructor.new':
                        var $6353 = self.name;
                        var $6354 = Kind$Term$all$(Bool$false, "", $6353, Kind$Datatype$build_term$constructor$(_type$1, $6350), (_s$9 => _x$10 => {
                            var $6355 = Kind$Datatype$build_term$constructors$go$(_type$1, _name$2, $6351);
                            return $6355;
                        }));
                        var $6352 = $6354;
                        break;
                };
                var $6349 = $6352;
                break;
            case 'List.nil':
                var self = _type$1;
                switch (self._) {
                    case 'Kind.Datatype.new':
                        var $6357 = self.inds;
                        var _ret$8 = Kind$Term$ref$(Kind$Name$read$("P"));
                        var _ret$9 = (() => {
                            var $6360 = _ret$8;
                            var $6361 = $6357;
                            let _ret$10 = $6360;
                            let _v$9;
                            while ($6361._ === 'List.cons') {
                                _v$9 = $6361.head;
                                var $6360 = Kind$Term$app$(_ret$10, Kind$Term$ref$((() => {
                                    var self = _v$9;
                                    switch (self._) {
                                        case 'Kind.Binder.new':
                                            var $6362 = self.name;
                                            var $6363 = $6362;
                                            return $6363;
                                    };
                                })()));
                                _ret$10 = $6360;
                                $6361 = $6361.tail;
                            }
                            return _ret$10;
                        })();
                        var $6358 = Kind$Term$app$(_ret$9, Kind$Term$ref$((_name$2 + ".Self")));
                        var $6356 = $6358;
                        break;
                };
                var $6349 = $6356;
                break;
        };
        return $6349;
    };
    const Kind$Datatype$build_term$constructors$go = x0 => x1 => x2 => Kind$Datatype$build_term$constructors$go$(x0, x1, x2);

    function Kind$Datatype$build_term$constructors$(_type$1) {
        var self = _type$1;
        switch (self._) {
            case 'Kind.Datatype.new':
                var $6365 = self.name;
                var $6366 = self.ctrs;
                var $6367 = Kind$Datatype$build_term$constructors$go$(_type$1, $6365, $6366);
                var $6364 = $6367;
                break;
        };
        return $6364;
    };
    const Kind$Datatype$build_term$constructors = x0 => Kind$Datatype$build_term$constructors$(x0);

    function Kind$Datatype$build_term$go$(_type$1, _name$2, _pars$3, _inds$4) {
        var self = _pars$3;
        switch (self._) {
            case 'List.cons':
                var $6369 = self.head;
                var $6370 = self.tail;
                var self = $6369;
                switch (self._) {
                    case 'Kind.Binder.new':
                        var $6372 = self.name;
                        var $6373 = Kind$Term$lam$($6372, (_x$10 => {
                            var $6374 = Kind$Datatype$build_term$go$(_type$1, _name$2, $6370, _inds$4);
                            return $6374;
                        }));
                        var $6371 = $6373;
                        break;
                };
                var $6368 = $6371;
                break;
            case 'List.nil':
                var self = _inds$4;
                switch (self._) {
                    case 'List.cons':
                        var $6376 = self.head;
                        var $6377 = self.tail;
                        var self = $6376;
                        switch (self._) {
                            case 'Kind.Binder.new':
                                var $6379 = self.name;
                                var $6380 = Kind$Term$lam$($6379, (_x$10 => {
                                    var $6381 = Kind$Datatype$build_term$go$(_type$1, _name$2, _pars$3, $6377);
                                    return $6381;
                                }));
                                var $6378 = $6380;
                                break;
                        };
                        var $6375 = $6378;
                        break;
                    case 'List.nil':
                        var $6382 = Kind$Term$all$(Bool$true, (_name$2 + ".Self"), Kind$Name$read$("P"), Kind$Datatype$build_term$motive$(_type$1), (_s$5 => _x$6 => {
                            var $6383 = Kind$Datatype$build_term$constructors$(_type$1);
                            return $6383;
                        }));
                        var $6375 = $6382;
                        break;
                };
                var $6368 = $6375;
                break;
        };
        return $6368;
    };
    const Kind$Datatype$build_term$go = x0 => x1 => x2 => x3 => Kind$Datatype$build_term$go$(x0, x1, x2, x3);

    function Kind$Datatype$build_term$(_type$1) {
        var self = _type$1;
        switch (self._) {
            case 'Kind.Datatype.new':
                var $6385 = self.name;
                var $6386 = self.pars;
                var $6387 = self.inds;
                var $6388 = Kind$Datatype$build_term$go$(_type$1, $6385, $6386, $6387);
                var $6384 = $6388;
                break;
        };
        return $6384;
    };
    const Kind$Datatype$build_term = x0 => Kind$Datatype$build_term$(x0);

    function Kind$Datatype$build_type$go$(_type$1, _name$2, _pars$3, _inds$4) {
        var self = _pars$3;
        switch (self._) {
            case 'List.cons':
                var $6390 = self.head;
                var $6391 = self.tail;
                var self = $6390;
                switch (self._) {
                    case 'Kind.Binder.new':
                        var $6393 = self.name;
                        var $6394 = self.term;
                        var $6395 = Kind$Term$all$(Bool$false, "", $6393, $6394, (_s$10 => _x$11 => {
                            var $6396 = Kind$Datatype$build_type$go$(_type$1, _name$2, $6391, _inds$4);
                            return $6396;
                        }));
                        var $6392 = $6395;
                        break;
                };
                var $6389 = $6392;
                break;
            case 'List.nil':
                var self = _inds$4;
                switch (self._) {
                    case 'List.cons':
                        var $6398 = self.head;
                        var $6399 = self.tail;
                        var self = $6398;
                        switch (self._) {
                            case 'Kind.Binder.new':
                                var $6401 = self.name;
                                var $6402 = self.term;
                                var $6403 = Kind$Term$all$(Bool$false, "", $6401, $6402, (_s$10 => _x$11 => {
                                    var $6404 = Kind$Datatype$build_type$go$(_type$1, _name$2, _pars$3, $6399);
                                    return $6404;
                                }));
                                var $6400 = $6403;
                                break;
                        };
                        var $6397 = $6400;
                        break;
                    case 'List.nil':
                        var $6405 = Kind$Term$typ;
                        var $6397 = $6405;
                        break;
                };
                var $6389 = $6397;
                break;
        };
        return $6389;
    };
    const Kind$Datatype$build_type$go = x0 => x1 => x2 => x3 => Kind$Datatype$build_type$go$(x0, x1, x2, x3);

    function Kind$Datatype$build_type$(_type$1) {
        var self = _type$1;
        switch (self._) {
            case 'Kind.Datatype.new':
                var $6407 = self.name;
                var $6408 = self.pars;
                var $6409 = self.inds;
                var $6410 = Kind$Datatype$build_type$go$(_type$1, $6407, $6408, $6409);
                var $6406 = $6410;
                break;
        };
        return $6406;
    };
    const Kind$Datatype$build_type = x0 => Kind$Datatype$build_type$(x0);

    function Kind$Constructor$build_term$opt$go$(_type$1, _ctor$2, _ctrs$3) {
        var self = _ctrs$3;
        switch (self._) {
            case 'List.cons':
                var $6412 = self.head;
                var $6413 = self.tail;
                var self = $6412;
                switch (self._) {
                    case 'Kind.Constructor.new':
                        var $6415 = self.name;
                        var $6416 = Kind$Term$lam$($6415, (_x$9 => {
                            var $6417 = Kind$Constructor$build_term$opt$go$(_type$1, _ctor$2, $6413);
                            return $6417;
                        }));
                        var $6414 = $6416;
                        break;
                };
                var $6411 = $6414;
                break;
            case 'List.nil':
                var self = _ctor$2;
                switch (self._) {
                    case 'Kind.Constructor.new':
                        var $6419 = self.name;
                        var $6420 = self.args;
                        var _ret$7 = Kind$Term$ref$($6419);
                        var _ret$8 = (() => {
                            var $6423 = _ret$7;
                            var $6424 = $6420;
                            let _ret$9 = $6423;
                            let _arg$8;
                            while ($6424._ === 'List.cons') {
                                _arg$8 = $6424.head;
                                var $6423 = Kind$Term$app$(_ret$9, Kind$Term$ref$((() => {
                                    var self = _arg$8;
                                    switch (self._) {
                                        case 'Kind.Binder.new':
                                            var $6425 = self.name;
                                            var $6426 = $6425;
                                            return $6426;
                                    };
                                })()));
                                _ret$9 = $6423;
                                $6424 = $6424.tail;
                            }
                            return _ret$9;
                        })();
                        var $6421 = _ret$8;
                        var $6418 = $6421;
                        break;
                };
                var $6411 = $6418;
                break;
        };
        return $6411;
    };
    const Kind$Constructor$build_term$opt$go = x0 => x1 => x2 => Kind$Constructor$build_term$opt$go$(x0, x1, x2);

    function Kind$Constructor$build_term$opt$(_type$1, _ctor$2) {
        var self = _type$1;
        switch (self._) {
            case 'Kind.Datatype.new':
                var $6428 = self.ctrs;
                var $6429 = Kind$Constructor$build_term$opt$go$(_type$1, _ctor$2, $6428);
                var $6427 = $6429;
                break;
        };
        return $6427;
    };
    const Kind$Constructor$build_term$opt = x0 => x1 => Kind$Constructor$build_term$opt$(x0, x1);

    function Kind$Constructor$build_term$go$(_type$1, _ctor$2, _name$3, _pars$4, _args$5) {
        var self = _pars$4;
        switch (self._) {
            case 'List.cons':
                var $6431 = self.head;
                var $6432 = self.tail;
                var self = $6431;
                switch (self._) {
                    case 'Kind.Binder.new':
                        var $6434 = self.name;
                        var $6435 = Kind$Term$lam$($6434, (_x$11 => {
                            var $6436 = Kind$Constructor$build_term$go$(_type$1, _ctor$2, _name$3, $6432, _args$5);
                            return $6436;
                        }));
                        var $6433 = $6435;
                        break;
                };
                var $6430 = $6433;
                break;
            case 'List.nil':
                var self = _args$5;
                switch (self._) {
                    case 'List.cons':
                        var $6438 = self.head;
                        var $6439 = self.tail;
                        var self = $6438;
                        switch (self._) {
                            case 'Kind.Binder.new':
                                var $6441 = self.name;
                                var $6442 = Kind$Term$lam$($6441, (_x$11 => {
                                    var $6443 = Kind$Constructor$build_term$go$(_type$1, _ctor$2, _name$3, _pars$4, $6439);
                                    return $6443;
                                }));
                                var $6440 = $6442;
                                break;
                        };
                        var $6437 = $6440;
                        break;
                    case 'List.nil':
                        var $6444 = Kind$Term$lam$(Kind$Name$read$("P"), (_x$6 => {
                            var $6445 = Kind$Constructor$build_term$opt$(_type$1, _ctor$2);
                            return $6445;
                        }));
                        var $6437 = $6444;
                        break;
                };
                var $6430 = $6437;
                break;
        };
        return $6430;
    };
    const Kind$Constructor$build_term$go = x0 => x1 => x2 => x3 => x4 => Kind$Constructor$build_term$go$(x0, x1, x2, x3, x4);

    function Kind$Constructor$build_term$(_type$1, _ctor$2) {
        var self = _type$1;
        switch (self._) {
            case 'Kind.Datatype.new':
                var $6447 = self.name;
                var $6448 = self.pars;
                var self = _ctor$2;
                switch (self._) {
                    case 'Kind.Constructor.new':
                        var $6450 = self.args;
                        var $6451 = Kind$Constructor$build_term$go$(_type$1, _ctor$2, $6447, $6448, $6450);
                        var $6449 = $6451;
                        break;
                };
                var $6446 = $6449;
                break;
        };
        return $6446;
    };
    const Kind$Constructor$build_term = x0 => x1 => Kind$Constructor$build_term$(x0, x1);

    function Kind$Constructor$build_type$go$(_type$1, _ctor$2, _name$3, _pars$4, _args$5) {
        var self = _pars$4;
        switch (self._) {
            case 'List.cons':
                var $6453 = self.head;
                var $6454 = self.tail;
                var self = $6453;
                switch (self._) {
                    case 'Kind.Binder.new':
                        var $6456 = self.eras;
                        var $6457 = self.name;
                        var $6458 = self.term;
                        var $6459 = Kind$Term$all$($6456, "", $6457, $6458, (_s$11 => _x$12 => {
                            var $6460 = Kind$Constructor$build_type$go$(_type$1, _ctor$2, _name$3, $6454, _args$5);
                            return $6460;
                        }));
                        var $6455 = $6459;
                        break;
                };
                var $6452 = $6455;
                break;
            case 'List.nil':
                var self = _args$5;
                switch (self._) {
                    case 'List.cons':
                        var $6462 = self.head;
                        var $6463 = self.tail;
                        var self = $6462;
                        switch (self._) {
                            case 'Kind.Binder.new':
                                var $6465 = self.eras;
                                var $6466 = self.name;
                                var $6467 = self.term;
                                var $6468 = Kind$Term$all$($6465, "", $6466, $6467, (_s$11 => _x$12 => {
                                    var $6469 = Kind$Constructor$build_type$go$(_type$1, _ctor$2, _name$3, _pars$4, $6463);
                                    return $6469;
                                }));
                                var $6464 = $6468;
                                break;
                        };
                        var $6461 = $6464;
                        break;
                    case 'List.nil':
                        var self = _type$1;
                        switch (self._) {
                            case 'Kind.Datatype.new':
                                var $6471 = self.pars;
                                var self = _ctor$2;
                                switch (self._) {
                                    case 'Kind.Constructor.new':
                                        var $6473 = self.inds;
                                        var _type$13 = Kind$Term$ref$(_name$3);
                                        var _type$14 = (() => {
                                            var $6476 = _type$13;
                                            var $6477 = $6471;
                                            let _type$15 = $6476;
                                            let _v$14;
                                            while ($6477._ === 'List.cons') {
                                                _v$14 = $6477.head;
                                                var $6476 = Kind$Term$app$(_type$15, Kind$Term$ref$((() => {
                                                    var self = _v$14;
                                                    switch (self._) {
                                                        case 'Kind.Binder.new':
                                                            var $6478 = self.name;
                                                            var $6479 = $6478;
                                                            return $6479;
                                                    };
                                                })()));
                                                _type$15 = $6476;
                                                $6477 = $6477.tail;
                                            }
                                            return _type$15;
                                        })();
                                        var _type$15 = (() => {
                                            var $6481 = _type$14;
                                            var $6482 = $6473;
                                            let _type$16 = $6481;
                                            let _v$15;
                                            while ($6482._ === 'List.cons') {
                                                _v$15 = $6482.head;
                                                var $6481 = Kind$Term$app$(_type$16, (() => {
                                                    var self = _v$15;
                                                    switch (self._) {
                                                        case 'Kind.Binder.new':
                                                            var $6483 = self.term;
                                                            var $6484 = $6483;
                                                            return $6484;
                                                    };
                                                })());
                                                _type$16 = $6481;
                                                $6482 = $6482.tail;
                                            }
                                            return _type$16;
                                        })();
                                        var $6474 = _type$15;
                                        var $6472 = $6474;
                                        break;
                                };
                                var $6470 = $6472;
                                break;
                        };
                        var $6461 = $6470;
                        break;
                };
                var $6452 = $6461;
                break;
        };
        return $6452;
    };
    const Kind$Constructor$build_type$go = x0 => x1 => x2 => x3 => x4 => Kind$Constructor$build_type$go$(x0, x1, x2, x3, x4);

    function Kind$Constructor$build_type$(_type$1, _ctor$2) {
        var self = _type$1;
        switch (self._) {
            case 'Kind.Datatype.new':
                var $6486 = self.name;
                var $6487 = self.pars;
                var self = _ctor$2;
                switch (self._) {
                    case 'Kind.Constructor.new':
                        var $6489 = self.args;
                        var $6490 = Kind$Constructor$build_type$go$(_type$1, _ctor$2, $6486, $6487, $6489);
                        var $6488 = $6490;
                        break;
                };
                var $6485 = $6488;
                break;
        };
        return $6485;
    };
    const Kind$Constructor$build_type = x0 => x1 => Kind$Constructor$build_type$(x0, x1);

    function Kind$Parser$file$adt$(_file$1, _code$2, _defs$3, _idx$4, _code$5) {
        var self = Kind$Parser$init$(_idx$4, _code$5);
        switch (self._) {
            case 'Parser.Reply.error':
                var $6492 = self.idx;
                var $6493 = self.code;
                var $6494 = self.err;
                var $6495 = Parser$Reply$error$($6492, $6493, $6494);
                var $6491 = $6495;
                break;
            case 'Parser.Reply.value':
                var $6496 = self.idx;
                var $6497 = self.code;
                var $6498 = self.val;
                var self = Kind$Parser$datatype$($6496, $6497);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $6500 = self.idx;
                        var $6501 = self.code;
                        var $6502 = self.err;
                        var $6503 = Parser$Reply$error$($6500, $6501, $6502);
                        var $6499 = $6503;
                        break;
                    case 'Parser.Reply.value':
                        var $6504 = self.idx;
                        var $6505 = self.code;
                        var $6506 = self.val;
                        var self = Kind$Parser$stop$($6498, $6504, $6505);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $6508 = self.idx;
                                var $6509 = self.code;
                                var $6510 = self.err;
                                var $6511 = Parser$Reply$error$($6508, $6509, $6510);
                                var $6507 = $6511;
                                break;
                            case 'Parser.Reply.value':
                                var $6512 = self.idx;
                                var $6513 = self.code;
                                var $6514 = self.val;
                                var self = $6506;
                                switch (self._) {
                                    case 'Kind.Datatype.new':
                                        var $6516 = self.name;
                                        var $6517 = self.pars;
                                        var $6518 = self.inds;
                                        var $6519 = self.ctrs;
                                        var _term$19 = Kind$Datatype$build_term$($6506);
                                        var _term$20 = Kind$Term$bind$(List$nil, (_x$20 => {
                                            var $6521 = (_x$20 + '1');
                                            return $6521;
                                        }), _term$19);
                                        var _type$21 = Kind$Datatype$build_type$($6506);
                                        var _type$22 = Kind$Term$bind$(List$nil, (_x$22 => {
                                            var $6522 = (_x$22 + '0');
                                            return $6522;
                                        }), _type$21);
                                        var _arit$23 = ((list_length($6517)) + (list_length($6518)));
                                        var _defs$24 = Kind$Map$def$(_file$1, _code$2, $6514, $6516, _term$20, _type$22, Bool$false, _arit$23, Bool$false, _defs$3);
                                        var _defs$25 = List$fold$($6519, _defs$24, (_ctr$25 => _defs$26 => {
                                            var _typ_name$27 = $6516;
                                            var _ctr_arit$28 = (_arit$23 + (list_length((() => {
                                                var self = _ctr$25;
                                                switch (self._) {
                                                    case 'Kind.Constructor.new':
                                                        var $6524 = self.args;
                                                        var $6525 = $6524;
                                                        return $6525;
                                                };
                                            })())));
                                            var _ctr_name$29 = String$flatten$(List$cons$(_typ_name$27, List$cons$(Kind$Name$read$("."), List$cons$((() => {
                                                var self = _ctr$25;
                                                switch (self._) {
                                                    case 'Kind.Constructor.new':
                                                        var $6526 = self.name;
                                                        var $6527 = $6526;
                                                        return $6527;
                                                };
                                            })(), List$nil))));
                                            var _ctr_term$30 = Kind$Constructor$build_term$($6506, _ctr$25);
                                            var _ctr_term$31 = Kind$Term$bind$(List$nil, (_x$31 => {
                                                var $6528 = (_x$31 + '1');
                                                return $6528;
                                            }), _ctr_term$30);
                                            var _ctr_type$32 = Kind$Constructor$build_type$($6506, _ctr$25);
                                            var _ctr_type$33 = Kind$Term$bind$(List$nil, (_x$33 => {
                                                var $6529 = (_x$33 + '0');
                                                return $6529;
                                            }), _ctr_type$32);
                                            var $6523 = Kind$Map$def$(_file$1, _code$2, $6514, _ctr_name$29, _ctr_term$31, _ctr_type$33, Bool$true, _ctr_arit$28, Bool$false, _defs$26);
                                            return $6523;
                                        }));
                                        var $6520 = (_idx$26 => _code$27 => {
                                            var $6530 = Parser$Reply$value$(_idx$26, _code$27, _defs$25);
                                            return $6530;
                                        });
                                        var $6515 = $6520;
                                        break;
                                };
                                var $6515 = $6515($6512)($6513);
                                var $6507 = $6515;
                                break;
                        };
                        var $6499 = $6507;
                        break;
                };
                var $6491 = $6499;
                break;
        };
        return $6491;
    };
    const Kind$Parser$file$adt = x0 => x1 => x2 => x3 => x4 => Kind$Parser$file$adt$(x0, x1, x2, x3, x4);

    function Kind$Parser$file$end$(_file$1, _code$2, _defs$3, _idx$4, _code$5) {
        var self = Kind$Parser$spaces(_idx$4)(_code$5);
        switch (self._) {
            case 'Parser.Reply.error':
                var $6532 = self.idx;
                var $6533 = self.code;
                var $6534 = self.err;
                var $6535 = Parser$Reply$error$($6532, $6533, $6534);
                var $6531 = $6535;
                break;
            case 'Parser.Reply.value':
                var $6536 = self.idx;
                var $6537 = self.code;
                var self = Parser$eof$($6536, $6537);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $6539 = self.idx;
                        var $6540 = self.code;
                        var $6541 = self.err;
                        var $6542 = Parser$Reply$error$($6539, $6540, $6541);
                        var $6538 = $6542;
                        break;
                    case 'Parser.Reply.value':
                        var $6543 = self.idx;
                        var $6544 = self.code;
                        var $6545 = Parser$Reply$value$($6543, $6544, _defs$3);
                        var $6538 = $6545;
                        break;
                };
                var $6531 = $6538;
                break;
        };
        return $6531;
    };
    const Kind$Parser$file$end = x0 => x1 => x2 => x3 => x4 => Kind$Parser$file$end$(x0, x1, x2, x3, x4);

    function Kind$Parser$file$(_file$1, _code$2, _defs$3, _idx$4, _code$5) {
        var self = Parser$is_eof$(_idx$4, _code$5);
        switch (self._) {
            case 'Parser.Reply.error':
                var $6547 = self.idx;
                var $6548 = self.code;
                var $6549 = self.err;
                var $6550 = Parser$Reply$error$($6547, $6548, $6549);
                var $6546 = $6550;
                break;
            case 'Parser.Reply.value':
                var $6551 = self.idx;
                var $6552 = self.code;
                var $6553 = self.val;
                var self = $6553;
                if (self) {
                    var $6555 = (_idx$9 => _code$10 => {
                        var $6556 = Parser$Reply$value$(_idx$9, _code$10, _defs$3);
                        return $6556;
                    });
                    var $6554 = $6555;
                } else {
                    var $6557 = (_idx$9 => _code$10 => {
                        var self = Parser$first_of$(List$cons$(Kind$Parser$file$def(_file$1)(_code$2)(_defs$3), List$cons$(Kind$Parser$file$adt(_file$1)(_code$2)(_defs$3), List$cons$(Kind$Parser$file$end(_file$1)(_code$2)(_defs$3), List$nil))))(_idx$9)(_code$10);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $6559 = self.idx;
                                var $6560 = self.code;
                                var $6561 = self.err;
                                var $6562 = Parser$Reply$error$($6559, $6560, $6561);
                                var $6558 = $6562;
                                break;
                            case 'Parser.Reply.value':
                                var $6563 = self.idx;
                                var $6564 = self.code;
                                var $6565 = self.val;
                                var $6566 = Kind$Parser$file$(_file$1, _code$2, $6565, $6563, $6564);
                                var $6558 = $6566;
                                break;
                        };
                        return $6558;
                    });
                    var $6554 = $6557;
                };
                var $6554 = $6554($6551)($6552);
                var $6546 = $6554;
                break;
        };
        return $6546;
    };
    const Kind$Parser$file = x0 => x1 => x2 => x3 => x4 => Kind$Parser$file$(x0, x1, x2, x3, x4);

    function String$join$go$(_sep$1, _list$2, _fst$3) {
        var self = _list$2;
        switch (self._) {
            case 'List.cons':
                var $6568 = self.head;
                var $6569 = self.tail;
                var $6570 = String$flatten$(List$cons$((() => {
                    var self = _fst$3;
                    if (self) {
                        var $6571 = "";
                        return $6571;
                    } else {
                        var $6572 = _sep$1;
                        return $6572;
                    };
                })(), List$cons$($6568, List$cons$(String$join$go$(_sep$1, $6569, Bool$false), List$nil))));
                var $6567 = $6570;
                break;
            case 'List.nil':
                var $6573 = "";
                var $6567 = $6573;
                break;
        };
        return $6567;
    };
    const String$join$go = x0 => x1 => x2 => String$join$go$(x0, x1, x2);

    function String$join$(_sep$1, _list$2) {
        var $6574 = String$join$go$(_sep$1, _list$2, Bool$true);
        return $6574;
    };
    const String$join = x0 => x1 => String$join$(x0, x1);

    function Kind$Code$highlight$end$(_col$1, _row$2, _res$3) {
        var $6575 = String$join$("\u{a}", _res$3);
        return $6575;
    };
    const Kind$Code$highlight$end = x0 => x1 => x2 => Kind$Code$highlight$end$(x0, x1, x2);

    function Maybe$extract$(_m$2, _a$4, _f$5) {
        var self = _m$2;
        switch (self._) {
            case 'Maybe.some':
                var $6577 = self.value;
                var $6578 = _f$5($6577);
                var $6576 = $6578;
                break;
            case 'Maybe.none':
                var $6579 = _a$4;
                var $6576 = $6579;
                break;
        };
        return $6576;
    };
    const Maybe$extract = x0 => x1 => x2 => Maybe$extract$(x0, x1, x2);

    function Nat$is_zero$(_n$1) {
        var self = _n$1;
        if (self === 0n) {
            var $6581 = Bool$true;
            var $6580 = $6581;
        } else {
            var $6582 = (self - 1n);
            var $6583 = Bool$false;
            var $6580 = $6583;
        };
        return $6580;
    };
    const Nat$is_zero = x0 => Nat$is_zero$(x0);

    function Nat$double$(_n$1) {
        var self = _n$1;
        if (self === 0n) {
            var $6585 = Nat$zero;
            var $6584 = $6585;
        } else {
            var $6586 = (self - 1n);
            var $6587 = Nat$succ$(Nat$succ$(Nat$double$($6586)));
            var $6584 = $6587;
        };
        return $6584;
    };
    const Nat$double = x0 => Nat$double$(x0);

    function String$pad_right$(_size$1, _chr$2, _str$3) {
        var self = _size$1;
        if (self === 0n) {
            var $6589 = _str$3;
            var $6588 = $6589;
        } else {
            var $6590 = (self - 1n);
            var self = _str$3;
            if (self.length === 0) {
                var $6592 = String$cons$(_chr$2, String$pad_right$($6590, _chr$2, ""));
                var $6591 = $6592;
            } else {
                var $6593 = self.charCodeAt(0);
                var $6594 = self.slice(1);
                var $6595 = String$cons$($6593, String$pad_right$($6590, _chr$2, $6594));
                var $6591 = $6595;
            };
            var $6588 = $6591;
        };
        return $6588;
    };
    const String$pad_right = x0 => x1 => x2 => String$pad_right$(x0, x1, x2);

    function String$pad_left$(_size$1, _chr$2, _str$3) {
        var $6596 = String$reverse$(String$pad_right$(_size$1, _chr$2, String$reverse$(_str$3)));
        return $6596;
    };
    const String$pad_left = x0 => x1 => x2 => String$pad_left$(x0, x1, x2);

    function Kind$Code$color$(_col$1, _str$2) {
        var $6597 = String$cons$(27, String$cons$(91, (_col$1 + String$cons$(109, (_str$2 + String$cons$(27, String$cons$(91, String$cons$(48, String$cons$(109, String$nil)))))))));
        return $6597;
    };
    const Kind$Code$color = x0 => x1 => Kind$Code$color$(x0, x1);

    function List$take$(_n$2, _xs$3) {
        var self = _xs$3;
        switch (self._) {
            case 'List.cons':
                var $6599 = self.head;
                var $6600 = self.tail;
                var self = _n$2;
                if (self === 0n) {
                    var $6602 = List$nil;
                    var $6601 = $6602;
                } else {
                    var $6603 = (self - 1n);
                    var $6604 = List$cons$($6599, List$take$($6603, $6600));
                    var $6601 = $6604;
                };
                var $6598 = $6601;
                break;
            case 'List.nil':
                var $6605 = List$nil;
                var $6598 = $6605;
                break;
        };
        return $6598;
    };
    const List$take = x0 => x1 => List$take$(x0, x1);

    function Kind$Code$highlight$go$(_code$1, _ix0$2, _ix1$3, _col$4, _row$5, _lft$6, _lin$7, _res$8) {
        var Kind$Code$highlight$go$ = (_code$1, _ix0$2, _ix1$3, _col$4, _row$5, _lft$6, _lin$7, _res$8) => ({
            ctr: 'TCO',
            arg: [_code$1, _ix0$2, _ix1$3, _col$4, _row$5, _lft$6, _lin$7, _res$8]
        });
        var Kind$Code$highlight$go = _code$1 => _ix0$2 => _ix1$3 => _col$4 => _row$5 => _lft$6 => _lin$7 => _res$8 => Kind$Code$highlight$go$(_code$1, _ix0$2, _ix1$3, _col$4, _row$5, _lft$6, _lin$7, _res$8);
        var arg = [_code$1, _ix0$2, _ix1$3, _col$4, _row$5, _lft$6, _lin$7, _res$8];
        while (true) {
            let [_code$1, _ix0$2, _ix1$3, _col$4, _row$5, _lft$6, _lin$7, _res$8] = arg;
            var R = (() => {
                var _spa$9 = 3n;
                var self = _code$1;
                if (self.length === 0) {
                    var $6607 = Kind$Code$highlight$end$(_col$4, _row$5, List$reverse$(_res$8));
                    var $6606 = $6607;
                } else {
                    var $6608 = self.charCodeAt(0);
                    var $6609 = self.slice(1);
                    var self = ($6608 === 10);
                    if (self) {
                        var _stp$12 = Maybe$extract$(_lft$6, Bool$false, Nat$is_zero);
                        var self = _stp$12;
                        if (self) {
                            var $6612 = Kind$Code$highlight$end$(_col$4, _row$5, List$reverse$(_res$8));
                            var $6611 = $6612;
                        } else {
                            var _siz$13 = Nat$succ$(Nat$double$(_spa$9));
                            var self = _ix1$3;
                            if (self === 0n) {
                                var self = _lft$6;
                                switch (self._) {
                                    case 'Maybe.some':
                                        var $6615 = self.value;
                                        var $6616 = Maybe$some$(Nat$pred$($6615));
                                        var $6614 = $6616;
                                        break;
                                    case 'Maybe.none':
                                        var $6617 = Maybe$some$(_spa$9);
                                        var $6614 = $6617;
                                        break;
                                };
                                var _lft$14 = $6614;
                            } else {
                                var $6618 = (self - 1n);
                                var $6619 = _lft$6;
                                var _lft$14 = $6619;
                            };
                            var _ix0$15 = Nat$pred$(_ix0$2);
                            var _ix1$16 = Nat$pred$(_ix1$3);
                            var _col$17 = 0n;
                            var _row$18 = Nat$succ$(_row$5);
                            var _res$19 = List$cons$(String$reverse$(_lin$7), _res$8);
                            var _lin$20 = String$reverse$(String$flatten$(List$cons$(String$pad_left$(4n, 32, Nat$show$(_row$18)), List$cons$(" | ", List$nil))));
                            var $6613 = Kind$Code$highlight$go$($6609, _ix0$15, _ix1$16, _col$17, _row$18, _lft$14, _lin$20, _res$19);
                            var $6611 = $6613;
                        };
                        var $6610 = $6611;
                    } else {
                        var _chr$12 = String$cons$($6608, String$nil);
                        var self = (Nat$is_zero$(_ix0$2) && (!Nat$is_zero$(_ix1$3)));
                        if (self) {
                            var $6621 = String$reverse$(Kind$Code$color$("31", Kind$Code$color$("4", _chr$12)));
                            var _chr$13 = $6621;
                        } else {
                            var $6622 = _chr$12;
                            var _chr$13 = $6622;
                        };
                        var self = (_ix0$2 === 1n);
                        if (self) {
                            var $6623 = List$take$(_spa$9, _res$8);
                            var _res$14 = $6623;
                        } else {
                            var $6624 = _res$8;
                            var _res$14 = $6624;
                        };
                        var _ix0$15 = Nat$pred$(_ix0$2);
                        var _ix1$16 = Nat$pred$(_ix1$3);
                        var _col$17 = Nat$succ$(_col$4);
                        var _lin$18 = String$flatten$(List$cons$(_chr$13, List$cons$(_lin$7, List$nil)));
                        var $6620 = Kind$Code$highlight$go$($6609, _ix0$15, _ix1$16, _col$17, _row$5, _lft$6, _lin$18, _res$14);
                        var $6610 = $6620;
                    };
                    var $6606 = $6610;
                };
                return $6606;
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Kind$Code$highlight$go = x0 => x1 => x2 => x3 => x4 => x5 => x6 => x7 => Kind$Code$highlight$go$(x0, x1, x2, x3, x4, x5, x6, x7);

    function Kind$Code$highlight$(_code$1, _idx0$2, _idx1$3) {
        var $6625 = Kind$Code$highlight$go$(_code$1, _idx0$2, _idx1$3, 0n, 1n, Maybe$none, String$reverse$("   1 | "), List$nil);
        return $6625;
    };
    const Kind$Code$highlight = x0 => x1 => x2 => Kind$Code$highlight$(x0, x1, x2);

    function Kind$Defs$read$(_file$1, _code$2, _defs$3) {
        var self = Kind$Parser$file$(_file$1, _code$2, _defs$3, 0n, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $6627 = self.idx;
                var $6628 = self.err;
                var _err$7 = $6628;
                var _hig$8 = Kind$Code$highlight$(_code$2, $6627, Nat$succ$($6627));
                var _str$9 = String$flatten$(List$cons$(_err$7, List$cons$("\u{a}", List$cons$(_hig$8, List$nil))));
                var $6629 = Either$left$(_str$9);
                var $6626 = $6629;
                break;
            case 'Parser.Reply.value':
                var $6630 = self.val;
                var $6631 = Either$right$($6630);
                var $6626 = $6631;
                break;
        };
        return $6626;
    };
    const Kind$Defs$read = x0 => x1 => x2 => Kind$Defs$read$(x0, x1, x2);

    function Kind$Synth$load$go$(_name$1, _files$2, _defs$3) {
        var self = _files$2;
        switch (self._) {
            case 'List.cons':
                var $6633 = self.head;
                var $6634 = self.tail;
                var $6635 = IO$monad$((_m$bind$6 => _m$pure$7 => {
                    var $6636 = _m$bind$6;
                    return $6636;
                }))(IO$get_file$($6633))((_code$6 => {
                    var _read$7 = Kind$Defs$read$($6633, _code$6, _defs$3);
                    var self = _read$7;
                    switch (self._) {
                        case 'Either.right':
                            var $6638 = self.value;
                            var _defs$9 = $6638;
                            var self = Kind$Map$get$(_name$1, _defs$9);
                            switch (self._) {
                                case 'Maybe.none':
                                    var $6640 = Kind$Synth$load$go$(_name$1, $6634, _defs$9);
                                    var $6639 = $6640;
                                    break;
                                case 'Maybe.some':
                                    var $6641 = IO$monad$((_m$bind$11 => _m$pure$12 => {
                                        var $6642 = _m$pure$12;
                                        return $6642;
                                    }))(Maybe$some$(_defs$9));
                                    var $6639 = $6641;
                                    break;
                            };
                            var $6637 = $6639;
                            break;
                        case 'Either.left':
                            var $6643 = Kind$Synth$load$go$(_name$1, $6634, _defs$3);
                            var $6637 = $6643;
                            break;
                    };
                    return $6637;
                }));
                var $6632 = $6635;
                break;
            case 'List.nil':
                var $6644 = IO$monad$((_m$bind$4 => _m$pure$5 => {
                    var $6645 = _m$pure$5;
                    return $6645;
                }))(Maybe$none);
                var $6632 = $6644;
                break;
        };
        return $6632;
    };
    const Kind$Synth$load$go = x0 => x1 => x2 => Kind$Synth$load$go$(x0, x1, x2);

    function Kind$Synth$files_of$make$(_names$1, _last$2) {
        var self = _names$1;
        switch (self._) {
            case 'List.cons':
                var $6647 = self.head;
                var $6648 = self.tail;
                var _head$5 = (_last$2 + ($6647 + ".kind"));
                var _tail$6 = Kind$Synth$files_of$make$($6648, (_last$2 + ($6647 + "/")));
                var $6649 = List$cons$(_head$5, _tail$6);
                var $6646 = $6649;
                break;
            case 'List.nil':
                var $6650 = List$nil;
                var $6646 = $6650;
                break;
        };
        return $6646;
    };
    const Kind$Synth$files_of$make = x0 => x1 => Kind$Synth$files_of$make$(x0, x1);

    function String$length$go$(_xs$1, _n$2) {
        var String$length$go$ = (_xs$1, _n$2) => ({
            ctr: 'TCO',
            arg: [_xs$1, _n$2]
        });
        var String$length$go = _xs$1 => _n$2 => String$length$go$(_xs$1, _n$2);
        var arg = [_xs$1, _n$2];
        while (true) {
            let [_xs$1, _n$2] = arg;
            var R = (() => {
                var self = _xs$1;
                if (self.length === 0) {
                    var $6651 = _n$2;
                    return $6651;
                } else {
                    var $6652 = self.charCodeAt(0);
                    var $6653 = self.slice(1);
                    var $6654 = String$length$go$($6653, Nat$succ$(_n$2));
                    return $6654;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const String$length$go = x0 => x1 => String$length$go$(x0, x1);

    function String$length$(_xs$1) {
        var $6655 = String$length$go$(_xs$1, 0n);
        return $6655;
    };
    const String$length = x0 => String$length$(x0);

    function String$split$go$(_xs$1, _match$2, _last$3) {
        var self = _xs$1;
        if (self.length === 0) {
            var $6657 = List$cons$(_last$3, List$nil);
            var $6656 = $6657;
        } else {
            var $6658 = self.charCodeAt(0);
            var $6659 = self.slice(1);
            var self = String$starts_with$(_xs$1, _match$2);
            if (self) {
                var _rest$6 = String$drop$(String$length$(_match$2), _xs$1);
                var $6661 = List$cons$(_last$3, String$split$go$(_rest$6, _match$2, ""));
                var $6660 = $6661;
            } else {
                var _next$6 = String$cons$($6658, String$nil);
                var $6662 = String$split$go$($6659, _match$2, (_last$3 + _next$6));
                var $6660 = $6662;
            };
            var $6656 = $6660;
        };
        return $6656;
    };
    const String$split$go = x0 => x1 => x2 => String$split$go$(x0, x1, x2);

    function String$split$(_xs$1, _match$2) {
        var $6663 = String$split$go$(_xs$1, _match$2, "");
        return $6663;
    };
    const String$split = x0 => x1 => String$split$(x0, x1);

    function Kind$Synth$files_of$(_name$1) {
        var $6664 = List$reverse$(Kind$Synth$files_of$make$(String$split$(_name$1, "."), ""));
        return $6664;
    };
    const Kind$Synth$files_of = x0 => Kind$Synth$files_of$(x0);

    function Kind$Synth$load$(_name$1, _defs$2) {
        var $6665 = IO$monad$((_m$bind$3 => _m$pure$4 => {
            var $6666 = _m$bind$3;
            return $6666;
        }))(Kind$Synth$load$cached$(List$cons$(_name$1, List$nil), _defs$2))((_cached_defs$3 => {
            var self = _cached_defs$3;
            switch (self._) {
                case 'Maybe.some':
                    var $6668 = self.value;
                    var $6669 = IO$monad$((_m$bind$5 => _m$pure$6 => {
                        var $6670 = _m$pure$6;
                        return $6670;
                    }))(Maybe$some$($6668));
                    var $6667 = $6669;
                    break;
                case 'Maybe.none':
                    var $6671 = Kind$Synth$load$go$(_name$1, Kind$Synth$files_of$(_name$1), _defs$2);
                    var $6667 = $6671;
                    break;
            };
            return $6667;
        }));
        return $6665;
    };
    const Kind$Synth$load = x0 => x1 => Kind$Synth$load$(x0, x1);
    const Kind$Status$wait = ({
        _: 'Kind.Status.wait'
    });

    function Kind$Check$(_V$1) {
        var $6672 = null;
        return $6672;
    };
    const Kind$Check = x0 => Kind$Check$(x0);

    function Kind$Check$result$(_value$2, _errors$3) {
        var $6673 = ({
            _: 'Kind.Check.result',
            'value': _value$2,
            'errors': _errors$3
        });
        return $6673;
    };
    const Kind$Check$result = x0 => x1 => Kind$Check$result$(x0, x1);

    function Kind$Error$undefined_reference$(_origin$1, _name$2) {
        var $6674 = ({
            _: 'Kind.Error.undefined_reference',
            'origin': _origin$1,
            'name': _name$2
        });
        return $6674;
    };
    const Kind$Error$undefined_reference = x0 => x1 => Kind$Error$undefined_reference$(x0, x1);

    function Kind$Error$waiting$(_name$1) {
        var $6675 = ({
            _: 'Kind.Error.waiting',
            'name': _name$1
        });
        return $6675;
    };
    const Kind$Error$waiting = x0 => Kind$Error$waiting$(x0);

    function Kind$Error$indirect$(_name$1) {
        var $6676 = ({
            _: 'Kind.Error.indirect',
            'name': _name$1
        });
        return $6676;
    };
    const Kind$Error$indirect = x0 => Kind$Error$indirect$(x0);

    function Maybe$mapped$(_m$2, _f$4) {
        var self = _m$2;
        switch (self._) {
            case 'Maybe.some':
                var $6678 = self.value;
                var $6679 = Maybe$some$(_f$4($6678));
                var $6677 = $6679;
                break;
            case 'Maybe.none':
                var $6680 = Maybe$none;
                var $6677 = $6680;
                break;
        };
        return $6677;
    };
    const Maybe$mapped = x0 => x1 => Maybe$mapped$(x0, x1);

    function Kind$MPath$o$(_path$1) {
        var $6681 = Maybe$mapped$(_path$1, Kind$Path$o);
        return $6681;
    };
    const Kind$MPath$o = x0 => Kind$MPath$o$(x0);

    function Kind$MPath$i$(_path$1) {
        var $6682 = Maybe$mapped$(_path$1, Kind$Path$i);
        return $6682;
    };
    const Kind$MPath$i = x0 => Kind$MPath$i$(x0);

    function Kind$Error$patch$(_path$1, _term$2) {
        var $6683 = ({
            _: 'Kind.Error.patch',
            'path': _path$1,
            'term': _term$2
        });
        return $6683;
    };
    const Kind$Error$patch = x0 => x1 => Kind$Error$patch$(x0, x1);

    function Kind$MPath$to_bits$(_path$1) {
        var self = _path$1;
        switch (self._) {
            case 'Maybe.some':
                var $6685 = self.value;
                var $6686 = $6685(Bits$e);
                var $6684 = $6686;
                break;
            case 'Maybe.none':
                var $6687 = Bits$e;
                var $6684 = $6687;
                break;
        };
        return $6684;
    };
    const Kind$MPath$to_bits = x0 => Kind$MPath$to_bits$(x0);

    function Kind$Error$type_mismatch$(_origin$1, _expected$2, _detected$3, _context$4) {
        var $6688 = ({
            _: 'Kind.Error.type_mismatch',
            'origin': _origin$1,
            'expected': _expected$2,
            'detected': _detected$3,
            'context': _context$4
        });
        return $6688;
    };
    const Kind$Error$type_mismatch = x0 => x1 => x2 => x3 => Kind$Error$type_mismatch$(x0, x1, x2, x3);

    function Kind$Error$show_goal$(_name$1, _dref$2, _verb$3, _goal$4, _context$5) {
        var $6689 = ({
            _: 'Kind.Error.show_goal',
            'name': _name$1,
            'dref': _dref$2,
            'verb': _verb$3,
            'goal': _goal$4,
            'context': _context$5
        });
        return $6689;
    };
    const Kind$Error$show_goal = x0 => x1 => x2 => x3 => x4 => Kind$Error$show_goal$(x0, x1, x2, x3, x4);

    function Kind$Term$check$infer_with_types$(_vars$1, _defs$2, _ctx$3, _path$4, _orig$5) {
        var self = _vars$1;
        switch (self._) {
            case 'List.cons':
                var $6691 = self.head;
                var $6692 = self.tail;
                var self = $6691;
                switch (self._) {
                    case 'Kind.Ann.new':
                        var $6694 = self.name;
                        var $6695 = self.term;
                        var $6696 = self.type;
                        var self = $6696;
                        switch (self._) {
                            case 'Maybe.some':
                                var $6698 = self.value;
                                var $6699 = Kind$Check$result$(Maybe$some$(Maybe$some$($6698)), List$nil);
                                var self = $6699;
                                break;
                            case 'Maybe.none':
                                var self = Kind$Term$check$($6695, Maybe$none, _defs$2, _ctx$3, _path$4, _orig$5);
                                switch (self._) {
                                    case 'Kind.Check.result':
                                        var $6701 = self.value;
                                        var $6702 = self.errors;
                                        var self = $6701;
                                        switch (self._) {
                                            case 'Maybe.some':
                                                var $6704 = self.value;
                                                var self = Kind$Check$result$(Maybe$some$(Maybe$some$($6704)), List$nil);
                                                switch (self._) {
                                                    case 'Kind.Check.result':
                                                        var $6706 = self.value;
                                                        var $6707 = self.errors;
                                                        var $6708 = Kind$Check$result$($6706, List$concat$($6702, $6707));
                                                        var $6705 = $6708;
                                                        break;
                                                };
                                                var $6703 = $6705;
                                                break;
                                            case 'Maybe.none':
                                                var $6709 = Kind$Check$result$(Maybe$none, $6702);
                                                var $6703 = $6709;
                                                break;
                                        };
                                        var $6700 = $6703;
                                        break;
                                };
                                var self = $6700;
                                break;
                        };
                        switch (self._) {
                            case 'Kind.Check.result':
                                var $6710 = self.value;
                                var $6711 = self.errors;
                                var self = $6710;
                                switch (self._) {
                                    case 'Maybe.some':
                                        var $6713 = self.value;
                                        var self = Kind$Term$check$infer_with_types$($6692, _defs$2, _ctx$3, _path$4, _orig$5);
                                        switch (self._) {
                                            case 'Kind.Check.result':
                                                var $6715 = self.value;
                                                var $6716 = self.errors;
                                                var self = $6715;
                                                switch (self._) {
                                                    case 'Maybe.some':
                                                        var $6718 = self.value;
                                                        var self = Kind$Check$result$(Maybe$some$(List$cons$(Kind$Ann$new$($6694, $6695, $6713), $6718)), List$nil);
                                                        switch (self._) {
                                                            case 'Kind.Check.result':
                                                                var $6720 = self.value;
                                                                var $6721 = self.errors;
                                                                var $6722 = Kind$Check$result$($6720, List$concat$($6716, $6721));
                                                                var $6719 = $6722;
                                                                break;
                                                        };
                                                        var $6717 = $6719;
                                                        break;
                                                    case 'Maybe.none':
                                                        var $6723 = Kind$Check$result$(Maybe$none, $6716);
                                                        var $6717 = $6723;
                                                        break;
                                                };
                                                var self = $6717;
                                                break;
                                        };
                                        switch (self._) {
                                            case 'Kind.Check.result':
                                                var $6724 = self.value;
                                                var $6725 = self.errors;
                                                var $6726 = Kind$Check$result$($6724, List$concat$($6711, $6725));
                                                var $6714 = $6726;
                                                break;
                                        };
                                        var $6712 = $6714;
                                        break;
                                    case 'Maybe.none':
                                        var $6727 = Kind$Check$result$(Maybe$none, $6711);
                                        var $6712 = $6727;
                                        break;
                                };
                                var $6697 = $6712;
                                break;
                        };
                        var $6693 = $6697;
                        break;
                };
                var $6690 = $6693;
                break;
            case 'List.nil':
                var $6728 = Kind$Check$result$(Maybe$some$(List$nil), List$nil);
                var $6690 = $6728;
                break;
        };
        return $6690;
    };
    const Kind$Term$check$infer_with_types = x0 => x1 => x2 => x3 => x4 => Kind$Term$check$infer_with_types$(x0, x1, x2, x3, x4);

    function Kind$Term$normalize$(_term$1, _defs$2) {
        var self = Kind$Term$reduce$(_term$1, _defs$2);
        switch (self._) {
            case 'Kind.Term.var':
                var $6730 = self.name;
                var $6731 = self.indx;
                var $6732 = Kind$Term$var$($6730, $6731);
                var $6729 = $6732;
                break;
            case 'Kind.Term.ref':
                var $6733 = self.name;
                var $6734 = Kind$Term$ref$($6733);
                var $6729 = $6734;
                break;
            case 'Kind.Term.all':
                var $6735 = self.eras;
                var $6736 = self.self;
                var $6737 = self.name;
                var $6738 = self.xtyp;
                var $6739 = self.body;
                var $6740 = Kind$Term$all$($6735, $6736, $6737, Kind$Term$normalize$($6738, _defs$2), (_s$8 => _x$9 => {
                    var $6741 = Kind$Term$normalize$($6739(_s$8)(_x$9), _defs$2);
                    return $6741;
                }));
                var $6729 = $6740;
                break;
            case 'Kind.Term.lam':
                var $6742 = self.name;
                var $6743 = self.body;
                var $6744 = Kind$Term$lam$($6742, (_x$5 => {
                    var $6745 = Kind$Term$normalize$($6743(_x$5), _defs$2);
                    return $6745;
                }));
                var $6729 = $6744;
                break;
            case 'Kind.Term.app':
                var $6746 = self.func;
                var $6747 = self.argm;
                var $6748 = Kind$Term$app$(Kind$Term$normalize$($6746, _defs$2), Kind$Term$normalize$($6747, _defs$2));
                var $6729 = $6748;
                break;
            case 'Kind.Term.let':
                var $6749 = self.name;
                var $6750 = self.expr;
                var $6751 = self.body;
                var $6752 = Kind$Term$let$($6749, Kind$Term$normalize$($6750, _defs$2), (_x$6 => {
                    var $6753 = Kind$Term$normalize$($6751(_x$6), _defs$2);
                    return $6753;
                }));
                var $6729 = $6752;
                break;
            case 'Kind.Term.def':
                var $6754 = self.name;
                var $6755 = self.expr;
                var $6756 = self.body;
                var $6757 = Kind$Term$def$($6754, Kind$Term$normalize$($6755, _defs$2), (_x$6 => {
                    var $6758 = Kind$Term$normalize$($6756(_x$6), _defs$2);
                    return $6758;
                }));
                var $6729 = $6757;
                break;
            case 'Kind.Term.ann':
                var $6759 = self.done;
                var $6760 = self.term;
                var $6761 = self.type;
                var $6762 = Kind$Term$ann$($6759, Kind$Term$normalize$($6760, _defs$2), Kind$Term$normalize$($6761, _defs$2));
                var $6729 = $6762;
                break;
            case 'Kind.Term.gol':
                var $6763 = self.name;
                var $6764 = self.dref;
                var $6765 = self.verb;
                var $6766 = Kind$Term$gol$($6763, $6764, $6765);
                var $6729 = $6766;
                break;
            case 'Kind.Term.hol':
                var $6767 = self.path;
                var $6768 = Kind$Term$hol$($6767);
                var $6729 = $6768;
                break;
            case 'Kind.Term.nat':
                var $6769 = self.natx;
                var $6770 = Kind$Term$nat$($6769);
                var $6729 = $6770;
                break;
            case 'Kind.Term.chr':
                var $6771 = self.chrx;
                var $6772 = Kind$Term$chr$($6771);
                var $6729 = $6772;
                break;
            case 'Kind.Term.str':
                var $6773 = self.strx;
                var $6774 = Kind$Term$str$($6773);
                var $6729 = $6774;
                break;
            case 'Kind.Term.ori':
                var $6775 = self.expr;
                var $6776 = Kind$Term$normalize$($6775, _defs$2);
                var $6729 = $6776;
                break;
            case 'Kind.Term.typ':
                var $6777 = Kind$Term$typ;
                var $6729 = $6777;
                break;
            case 'Kind.Term.cse':
                var $6778 = _term$1;
                var $6729 = $6778;
                break;
        };
        return $6729;
    };
    const Kind$Term$normalize = x0 => x1 => Kind$Term$normalize$(x0, x1);

    function Kind$Term$desugar_cse$motive$go$(_wyth$1, _moti$2, _name$3, _expr$4, _etyp$5, _rtyp$6, _defs$7, _size$8) {
        var self = _wyth$1;
        switch (self._) {
            case 'List.cons':
                var $6780 = self.head;
                var $6781 = self.tail;
                var self = $6780;
                switch (self._) {
                    case 'Kind.Ann.new':
                        var $6783 = self.name;
                        var $6784 = self.type;
                        var $6785 = Kind$Term$all$(Bool$false, "", $6783, Maybe$default$($6784, Kind$Term$hol$(Bits$e)), (_s$14 => _x$15 => {
                            var $6786 = Kind$Term$desugar_cse$motive$($6781, _moti$2, _name$3, _expr$4, _etyp$5, _rtyp$6, _defs$7, Nat$succ$(Nat$succ$(_size$8)));
                            return $6786;
                        }));
                        var $6782 = $6785;
                        break;
                };
                var $6779 = $6782;
                break;
            case 'List.nil':
                var self = _moti$2;
                switch (self._) {
                    case 'Maybe.some':
                        var $6788 = self.value;
                        var $6789 = $6788;
                        var $6787 = $6789;
                        break;
                    case 'Maybe.none':
                        var self = _rtyp$6;
                        switch (self._) {
                            case 'Maybe.some':
                                var $6791 = self.value;
                                var $6792 = Kind$Term$normalize$($6791, Kind$Map$new);
                                var $6790 = $6792;
                                break;
                            case 'Maybe.none':
                                var $6793 = Kind$Term$hol$(Bits$e);
                                var $6790 = $6793;
                                break;
                        };
                        var $6787 = $6790;
                        break;
                };
                var $6779 = $6787;
                break;
        };
        return $6779;
    };
    const Kind$Term$desugar_cse$motive$go = x0 => x1 => x2 => x3 => x4 => x5 => x6 => x7 => Kind$Term$desugar_cse$motive$go$(x0, x1, x2, x3, x4, x5, x6, x7);

    function List$tail$(_xs$2) {
        var self = _xs$2;
        switch (self._) {
            case 'List.cons':
                var $6795 = self.tail;
                var $6796 = $6795;
                var $6794 = $6796;
                break;
            case 'List.nil':
                var $6797 = List$nil;
                var $6794 = $6797;
                break;
        };
        return $6794;
    };
    const List$tail = x0 => List$tail$(x0);

    function Kind$Term$SmartMotive$vals$cont$(_expr$1, _term$2, _args$3, _defs$4) {
        var Kind$Term$SmartMotive$vals$cont$ = (_expr$1, _term$2, _args$3, _defs$4) => ({
            ctr: 'TCO',
            arg: [_expr$1, _term$2, _args$3, _defs$4]
        });
        var Kind$Term$SmartMotive$vals$cont = _expr$1 => _term$2 => _args$3 => _defs$4 => Kind$Term$SmartMotive$vals$cont$(_expr$1, _term$2, _args$3, _defs$4);
        var arg = [_expr$1, _term$2, _args$3, _defs$4];
        while (true) {
            let [_expr$1, _term$2, _args$3, _defs$4] = arg;
            var R = (() => {
                var self = Kind$Term$reduce$(_term$2, _defs$4);
                switch (self._) {
                    case 'Kind.Term.app':
                        var $6798 = self.func;
                        var $6799 = self.argm;
                        var $6800 = Kind$Term$SmartMotive$vals$cont$(_expr$1, $6798, List$cons$($6799, _args$3), _defs$4);
                        return $6800;
                    case 'Kind.Term.var':
                    case 'Kind.Term.ref':
                    case 'Kind.Term.typ':
                    case 'Kind.Term.all':
                    case 'Kind.Term.lam':
                    case 'Kind.Term.let':
                    case 'Kind.Term.def':
                    case 'Kind.Term.ann':
                    case 'Kind.Term.gol':
                    case 'Kind.Term.hol':
                    case 'Kind.Term.nat':
                    case 'Kind.Term.chr':
                    case 'Kind.Term.str':
                    case 'Kind.Term.cse':
                    case 'Kind.Term.ori':
                        var $6801 = List$cons$(_expr$1, List$tail$(List$reverse$(_args$3)));
                        return $6801;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Kind$Term$SmartMotive$vals$cont = x0 => x1 => x2 => x3 => Kind$Term$SmartMotive$vals$cont$(x0, x1, x2, x3);

    function Kind$Term$SmartMotive$vals$(_expr$1, _type$2, _defs$3) {
        var Kind$Term$SmartMotive$vals$ = (_expr$1, _type$2, _defs$3) => ({
            ctr: 'TCO',
            arg: [_expr$1, _type$2, _defs$3]
        });
        var Kind$Term$SmartMotive$vals = _expr$1 => _type$2 => _defs$3 => Kind$Term$SmartMotive$vals$(_expr$1, _type$2, _defs$3);
        var arg = [_expr$1, _type$2, _defs$3];
        while (true) {
            let [_expr$1, _type$2, _defs$3] = arg;
            var R = (() => {
                var self = Kind$Term$reduce$(_type$2, _defs$3);
                switch (self._) {
                    case 'Kind.Term.all':
                        var $6802 = self.body;
                        var $6803 = Kind$Term$SmartMotive$vals$(_expr$1, $6802(Kind$Term$typ)(Kind$Term$typ), _defs$3);
                        return $6803;
                    case 'Kind.Term.var':
                    case 'Kind.Term.ref':
                    case 'Kind.Term.typ':
                    case 'Kind.Term.lam':
                    case 'Kind.Term.app':
                    case 'Kind.Term.let':
                    case 'Kind.Term.def':
                    case 'Kind.Term.ann':
                    case 'Kind.Term.gol':
                    case 'Kind.Term.hol':
                    case 'Kind.Term.nat':
                    case 'Kind.Term.chr':
                    case 'Kind.Term.str':
                    case 'Kind.Term.cse':
                    case 'Kind.Term.ori':
                        var $6804 = Kind$Term$SmartMotive$vals$cont$(_expr$1, _type$2, List$nil, _defs$3);
                        return $6804;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Kind$Term$SmartMotive$vals = x0 => x1 => x2 => Kind$Term$SmartMotive$vals$(x0, x1, x2);

    function Kind$Term$SmartMotive$nams$cont$(_name$1, _term$2, _binds$3, _defs$4) {
        var Kind$Term$SmartMotive$nams$cont$ = (_name$1, _term$2, _binds$3, _defs$4) => ({
            ctr: 'TCO',
            arg: [_name$1, _term$2, _binds$3, _defs$4]
        });
        var Kind$Term$SmartMotive$nams$cont = _name$1 => _term$2 => _binds$3 => _defs$4 => Kind$Term$SmartMotive$nams$cont$(_name$1, _term$2, _binds$3, _defs$4);
        var arg = [_name$1, _term$2, _binds$3, _defs$4];
        while (true) {
            let [_name$1, _term$2, _binds$3, _defs$4] = arg;
            var R = (() => {
                var self = Kind$Term$reduce$(_term$2, _defs$4);
                switch (self._) {
                    case 'Kind.Term.all':
                        var $6805 = self.self;
                        var $6806 = self.name;
                        var $6807 = self.body;
                        var $6808 = Kind$Term$SmartMotive$nams$cont$(_name$1, $6807(Kind$Term$ref$($6805))(Kind$Term$ref$($6806)), List$cons$(String$flatten$(List$cons$(_name$1, List$cons$(".", List$cons$($6806, List$nil)))), _binds$3), _defs$4);
                        return $6808;
                    case 'Kind.Term.var':
                    case 'Kind.Term.ref':
                    case 'Kind.Term.typ':
                    case 'Kind.Term.lam':
                    case 'Kind.Term.app':
                    case 'Kind.Term.let':
                    case 'Kind.Term.def':
                    case 'Kind.Term.ann':
                    case 'Kind.Term.gol':
                    case 'Kind.Term.hol':
                    case 'Kind.Term.nat':
                    case 'Kind.Term.chr':
                    case 'Kind.Term.str':
                    case 'Kind.Term.cse':
                    case 'Kind.Term.ori':
                        var $6809 = List$cons$(_name$1, List$tail$(_binds$3));
                        return $6809;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Kind$Term$SmartMotive$nams$cont = x0 => x1 => x2 => x3 => Kind$Term$SmartMotive$nams$cont$(x0, x1, x2, x3);

    function Kind$Term$SmartMotive$nams$(_name$1, _type$2, _defs$3) {
        var self = Kind$Term$reduce$(_type$2, _defs$3);
        switch (self._) {
            case 'Kind.Term.all':
                var $6811 = self.xtyp;
                var $6812 = Kind$Term$SmartMotive$nams$cont$(_name$1, $6811, List$nil, _defs$3);
                var $6810 = $6812;
                break;
            case 'Kind.Term.var':
            case 'Kind.Term.ref':
            case 'Kind.Term.typ':
            case 'Kind.Term.lam':
            case 'Kind.Term.app':
            case 'Kind.Term.let':
            case 'Kind.Term.def':
            case 'Kind.Term.ann':
            case 'Kind.Term.gol':
            case 'Kind.Term.hol':
            case 'Kind.Term.nat':
            case 'Kind.Term.chr':
            case 'Kind.Term.str':
            case 'Kind.Term.cse':
            case 'Kind.Term.ori':
                var $6813 = List$nil;
                var $6810 = $6813;
                break;
        };
        return $6810;
    };
    const Kind$Term$SmartMotive$nams = x0 => x1 => x2 => Kind$Term$SmartMotive$nams$(x0, x1, x2);

    function List$zip$(_as$3, _bs$4) {
        var self = _as$3;
        switch (self._) {
            case 'List.cons':
                var $6815 = self.head;
                var $6816 = self.tail;
                var self = _bs$4;
                switch (self._) {
                    case 'List.cons':
                        var $6818 = self.head;
                        var $6819 = self.tail;
                        var $6820 = List$cons$(Pair$new$($6815, $6818), List$zip$($6816, $6819));
                        var $6817 = $6820;
                        break;
                    case 'List.nil':
                        var $6821 = List$nil;
                        var $6817 = $6821;
                        break;
                };
                var $6814 = $6817;
                break;
            case 'List.nil':
                var $6822 = List$nil;
                var $6814 = $6822;
                break;
        };
        return $6814;
    };
    const List$zip = x0 => x1 => List$zip$(x0, x1);
    const Nat$gte = a0 => a1 => (a0 >= a1);
    const Bits$concat = a0 => a1 => (a1 + a0);
    const Nat$sub = a0 => a1 => (a0 - a1 <= 0n ? 0n : a0 - a1);

    function Kind$Term$serialize$go$(_term$1, _depth$2, _init$3, _diff$4, _x$5) {
        var self = _term$1;
        switch (self._) {
            case 'Kind.Term.var':
                var $6824 = self.indx;
                var self = ($6824 >= _init$3);
                if (self) {
                    var _name$8 = a1 => (a1 + (nat_to_bits(Nat$pred$((_depth$2 - $6824 <= 0n ? 0n : _depth$2 - $6824)))));
                    var $6826 = (((_name$8(_x$5) + '1') + '0') + '0');
                    var $6825 = $6826;
                } else {
                    var _name$8 = a1 => (a1 + (nat_to_bits($6824)));
                    var $6827 = (((_name$8(_x$5) + '0') + '1') + '0');
                    var $6825 = $6827;
                };
                var $6823 = $6825;
                break;
            case 'Kind.Term.ref':
                var $6828 = self.name;
                var _name$7 = a1 => (a1 + (kind_name_to_bits($6828)));
                var $6829 = (((_name$7(_x$5) + '0') + '0') + '0');
                var $6823 = $6829;
                break;
            case 'Kind.Term.all':
                var $6830 = self.eras;
                var $6831 = self.self;
                var $6832 = self.name;
                var $6833 = self.xtyp;
                var $6834 = self.body;
                var self = $6830;
                if (self) {
                    var $6836 = Bits$i;
                    var _eras$11 = $6836;
                } else {
                    var $6837 = Bits$o;
                    var _eras$11 = $6837;
                };
                var _self$12 = a1 => (a1 + (kind_name_to_bits($6831)));
                var _xtyp$13 = Kind$Term$serialize$go($6833)(_depth$2)(_init$3)(_diff$4);
                var _body$14 = Kind$Term$serialize$go($6834(Kind$Term$var$($6831, _depth$2))(Kind$Term$var$($6832, Nat$succ$(_depth$2))))(Nat$succ$(Nat$succ$(_depth$2)))(_init$3)(_diff$4);
                var $6835 = (((_eras$11(_self$12(_xtyp$13(_body$14(_x$5)))) + '0') + '0') + '1');
                var $6823 = $6835;
                break;
            case 'Kind.Term.lam':
                var $6838 = self.name;
                var $6839 = self.body;
                var _body$8 = Kind$Term$serialize$go($6839(Kind$Term$var$($6838, _depth$2)))(Nat$succ$(_depth$2))(_init$3)(_diff$4);
                var $6840 = (((_body$8(_x$5) + '1') + '0') + '1');
                var $6823 = $6840;
                break;
            case 'Kind.Term.app':
                var $6841 = self.func;
                var $6842 = self.argm;
                var _func$8 = Kind$Term$serialize$go($6841)(_depth$2)(_init$3)(_diff$4);
                var _argm$9 = Kind$Term$serialize$go($6842)(_depth$2)(_init$3)(_diff$4);
                var $6843 = (((_func$8(_argm$9(_x$5)) + '0') + '1') + '1');
                var $6823 = $6843;
                break;
            case 'Kind.Term.let':
                var $6844 = self.name;
                var $6845 = self.expr;
                var $6846 = self.body;
                var _expr$9 = Kind$Term$serialize$go($6845)(_depth$2)(_init$3)(_diff$4);
                var _body$10 = Kind$Term$serialize$go($6846(Kind$Term$var$($6844, _depth$2)))(Nat$succ$(_depth$2))(_init$3)(_diff$4);
                var $6847 = (((_expr$9(_body$10(_x$5)) + '1') + '1') + '1');
                var $6823 = $6847;
                break;
            case 'Kind.Term.def':
                var $6848 = self.expr;
                var $6849 = self.body;
                var $6850 = Kind$Term$serialize$go$($6849($6848), _depth$2, _init$3, _diff$4, _x$5);
                var $6823 = $6850;
                break;
            case 'Kind.Term.ann':
                var $6851 = self.term;
                var $6852 = Kind$Term$serialize$go$($6851, _depth$2, _init$3, _diff$4, _x$5);
                var $6823 = $6852;
                break;
            case 'Kind.Term.gol':
                var $6853 = self.name;
                var _name$9 = a1 => (a1 + (kind_name_to_bits($6853)));
                var $6854 = (((_name$9(_x$5) + '0') + '0') + '0');
                var $6823 = $6854;
                break;
            case 'Kind.Term.nat':
                var $6855 = self.natx;
                var $6856 = Kind$Term$serialize$go$(Kind$Term$unroll_nat$($6855), _depth$2, _init$3, _diff$4, _x$5);
                var $6823 = $6856;
                break;
            case 'Kind.Term.chr':
                var $6857 = self.chrx;
                var $6858 = Kind$Term$serialize$go$(Kind$Term$unroll_chr$($6857), _depth$2, _init$3, _diff$4, _x$5);
                var $6823 = $6858;
                break;
            case 'Kind.Term.str':
                var $6859 = self.strx;
                var $6860 = Kind$Term$serialize$go$(Kind$Term$unroll_str$($6859), _depth$2, _init$3, _diff$4, _x$5);
                var $6823 = $6860;
                break;
            case 'Kind.Term.ori':
                var $6861 = self.expr;
                var $6862 = Kind$Term$serialize$go$($6861, _depth$2, _init$3, _diff$4, _x$5);
                var $6823 = $6862;
                break;
            case 'Kind.Term.typ':
                var $6863 = (((_x$5 + '1') + '1') + '0');
                var $6823 = $6863;
                break;
            case 'Kind.Term.hol':
                var $6864 = _x$5;
                var $6823 = $6864;
                break;
            case 'Kind.Term.cse':
                var $6865 = _diff$4(_x$5);
                var $6823 = $6865;
                break;
        };
        return $6823;
    };
    const Kind$Term$serialize$go = x0 => x1 => x2 => x3 => x4 => Kind$Term$serialize$go$(x0, x1, x2, x3, x4);

    function Kind$Term$serialize$(_term$1, _depth$2, _side$3) {
        var self = _side$3;
        if (self) {
            var $6867 = Bits$o;
            var _diff$4 = $6867;
        } else {
            var $6868 = Bits$i;
            var _diff$4 = $6868;
        };
        var $6866 = Kind$Term$serialize$go$(_term$1, _depth$2, _depth$2, _diff$4, Bits$e);
        return $6866;
    };
    const Kind$Term$serialize = x0 => x1 => x2 => Kind$Term$serialize$(x0, x1, x2);
    const Bits$eql = a0 => a1 => (a1 === a0);

    function Kind$Term$identical$(_a$1, _b$2, _lv$3) {
        var _ah$4 = Kind$Term$serialize$(_a$1, _lv$3, Bool$false);
        var _bh$5 = Kind$Term$serialize$(_b$2, _lv$3, Bool$true);
        var $6869 = (_bh$5 === _ah$4);
        return $6869;
    };
    const Kind$Term$identical = x0 => x1 => x2 => Kind$Term$identical$(x0, x1, x2);

    function Kind$Term$SmartMotive$replace$(_term$1, _from$2, _to$3, _lv$4) {
        var self = Kind$Term$identical$(_term$1, _from$2, _lv$4);
        if (self) {
            var $6871 = _to$3;
            var $6870 = $6871;
        } else {
            var self = _term$1;
            switch (self._) {
                case 'Kind.Term.var':
                    var $6873 = self.name;
                    var $6874 = self.indx;
                    var $6875 = Kind$Term$var$($6873, $6874);
                    var $6872 = $6875;
                    break;
                case 'Kind.Term.ref':
                    var $6876 = self.name;
                    var $6877 = Kind$Term$ref$($6876);
                    var $6872 = $6877;
                    break;
                case 'Kind.Term.all':
                    var $6878 = self.eras;
                    var $6879 = self.self;
                    var $6880 = self.name;
                    var $6881 = self.xtyp;
                    var $6882 = self.body;
                    var _xtyp$10 = Kind$Term$SmartMotive$replace$($6881, _from$2, _to$3, _lv$4);
                    var _body$11 = $6882(Kind$Term$ref$($6879))(Kind$Term$ref$($6880));
                    var _body$12 = Kind$Term$SmartMotive$replace$(_body$11, _from$2, _to$3, Nat$succ$(Nat$succ$(_lv$4)));
                    var $6883 = Kind$Term$all$($6878, $6879, $6880, _xtyp$10, (_s$13 => _x$14 => {
                        var $6884 = _body$12;
                        return $6884;
                    }));
                    var $6872 = $6883;
                    break;
                case 'Kind.Term.lam':
                    var $6885 = self.name;
                    var $6886 = self.body;
                    var _body$7 = $6886(Kind$Term$ref$($6885));
                    var _body$8 = Kind$Term$SmartMotive$replace$(_body$7, _from$2, _to$3, Nat$succ$(_lv$4));
                    var $6887 = Kind$Term$lam$($6885, (_x$9 => {
                        var $6888 = _body$8;
                        return $6888;
                    }));
                    var $6872 = $6887;
                    break;
                case 'Kind.Term.app':
                    var $6889 = self.func;
                    var $6890 = self.argm;
                    var _func$7 = Kind$Term$SmartMotive$replace$($6889, _from$2, _to$3, _lv$4);
                    var _argm$8 = Kind$Term$SmartMotive$replace$($6890, _from$2, _to$3, _lv$4);
                    var $6891 = Kind$Term$app$(_func$7, _argm$8);
                    var $6872 = $6891;
                    break;
                case 'Kind.Term.let':
                    var $6892 = self.name;
                    var $6893 = self.expr;
                    var $6894 = self.body;
                    var _expr$8 = Kind$Term$SmartMotive$replace$($6893, _from$2, _to$3, _lv$4);
                    var _body$9 = $6894(Kind$Term$ref$($6892));
                    var _body$10 = Kind$Term$SmartMotive$replace$(_body$9, _from$2, _to$3, Nat$succ$(_lv$4));
                    var $6895 = Kind$Term$let$($6892, _expr$8, (_x$11 => {
                        var $6896 = _body$10;
                        return $6896;
                    }));
                    var $6872 = $6895;
                    break;
                case 'Kind.Term.def':
                    var $6897 = self.name;
                    var $6898 = self.expr;
                    var $6899 = self.body;
                    var _expr$8 = Kind$Term$SmartMotive$replace$($6898, _from$2, _to$3, _lv$4);
                    var _body$9 = $6899(Kind$Term$ref$($6897));
                    var _body$10 = Kind$Term$SmartMotive$replace$(_body$9, _from$2, _to$3, Nat$succ$(_lv$4));
                    var $6900 = Kind$Term$def$($6897, _expr$8, (_x$11 => {
                        var $6901 = _body$10;
                        return $6901;
                    }));
                    var $6872 = $6900;
                    break;
                case 'Kind.Term.ann':
                    var $6902 = self.done;
                    var $6903 = self.term;
                    var $6904 = self.type;
                    var _term$8 = Kind$Term$SmartMotive$replace$($6903, _from$2, _to$3, _lv$4);
                    var _type$9 = Kind$Term$SmartMotive$replace$($6904, _from$2, _to$3, _lv$4);
                    var $6905 = Kind$Term$ann$($6902, _term$8, _type$9);
                    var $6872 = $6905;
                    break;
                case 'Kind.Term.ori':
                    var $6906 = self.expr;
                    var $6907 = Kind$Term$SmartMotive$replace$($6906, _from$2, _to$3, _lv$4);
                    var $6872 = $6907;
                    break;
                case 'Kind.Term.typ':
                    var $6908 = Kind$Term$typ;
                    var $6872 = $6908;
                    break;
                case 'Kind.Term.gol':
                case 'Kind.Term.hol':
                case 'Kind.Term.nat':
                case 'Kind.Term.chr':
                case 'Kind.Term.str':
                case 'Kind.Term.cse':
                    var $6909 = _term$1;
                    var $6872 = $6909;
                    break;
            };
            var $6870 = $6872;
        };
        return $6870;
    };
    const Kind$Term$SmartMotive$replace = x0 => x1 => x2 => x3 => Kind$Term$SmartMotive$replace$(x0, x1, x2, x3);

    function Kind$Term$SmartMotive$make$(_name$1, _expr$2, _type$3, _moti$4, _size$5, _defs$6) {
        var _vals$7 = Kind$Term$SmartMotive$vals$(_expr$2, _type$3, _defs$6);
        var _nams$8 = Kind$Term$SmartMotive$nams$(_name$1, _type$3, _defs$6);
        var _subs$9 = List$zip$(_nams$8, _vals$7);
        var $6910 = List$fold$(_subs$9, _moti$4, (_sub$10 => _moti$11 => {
            var self = _sub$10;
            switch (self._) {
                case 'Pair.new':
                    var $6912 = self.fst;
                    var $6913 = self.snd;
                    var $6914 = Kind$Term$SmartMotive$replace$(_moti$11, $6913, Kind$Term$ref$($6912), _size$5);
                    var $6911 = $6914;
                    break;
            };
            return $6911;
        }));
        return $6910;
    };
    const Kind$Term$SmartMotive$make = x0 => x1 => x2 => x3 => x4 => x5 => Kind$Term$SmartMotive$make$(x0, x1, x2, x3, x4, x5);

    function Kind$Term$desugar_cse$motive$(_wyth$1, _moti$2, _name$3, _expr$4, _etyp$5, _rtyp$6, _defs$7, _size$8) {
        var _done$9 = Kind$Term$desugar_cse$motive$go$(_wyth$1, _moti$2, _name$3, _expr$4, _etyp$5, _rtyp$6, _defs$7, _size$8);
        var self = _moti$2;
        switch (self._) {
            case 'Maybe.none':
                var $6916 = Kind$Term$SmartMotive$make$(_name$3, _expr$4, _etyp$5, _done$9, _size$8, _defs$7);
                var $6915 = $6916;
                break;
            case 'Maybe.some':
                var $6917 = _done$9;
                var $6915 = $6917;
                break;
        };
        return $6915;
    };
    const Kind$Term$desugar_cse$motive = x0 => x1 => x2 => x3 => x4 => x5 => x6 => x7 => Kind$Term$desugar_cse$motive$(x0, x1, x2, x3, x4, x5, x6, x7);

    function Kind$Term$desugar_cse$argument$(_name$1, _wyth$2, _type$3, _body$4, _defs$5) {
        var self = Kind$Term$reduce$(_type$3, _defs$5);
        switch (self._) {
            case 'Kind.Term.all':
                var $6919 = self.self;
                var $6920 = self.name;
                var $6921 = self.body;
                var $6922 = Kind$Term$lam$((() => {
                    var self = String$is_empty$($6920);
                    if (self) {
                        var $6923 = _name$1;
                        return $6923;
                    } else {
                        var $6924 = String$flatten$(List$cons$(_name$1, List$cons$(".", List$cons$($6920, List$nil))));
                        return $6924;
                    };
                })(), (_x$11 => {
                    var $6925 = Kind$Term$desugar_cse$argument$(_name$1, _wyth$2, $6921(Kind$Term$var$($6919, 0n))(Kind$Term$var$($6920, 0n)), _body$4, _defs$5);
                    return $6925;
                }));
                var $6918 = $6922;
                break;
            case 'Kind.Term.var':
            case 'Kind.Term.lam':
            case 'Kind.Term.app':
            case 'Kind.Term.ori':
                var self = _wyth$2;
                switch (self._) {
                    case 'List.cons':
                        var $6927 = self.head;
                        var $6928 = self.tail;
                        var self = $6927;
                        switch (self._) {
                            case 'Kind.Ann.new':
                                var $6930 = self.name;
                                var $6931 = Kind$Term$lam$($6930, (_x$13 => {
                                    var $6932 = Kind$Term$desugar_cse$argument$(_name$1, $6928, _type$3, _body$4, _defs$5);
                                    return $6932;
                                }));
                                var $6929 = $6931;
                                break;
                        };
                        var $6926 = $6929;
                        break;
                    case 'List.nil':
                        var $6933 = _body$4;
                        var $6926 = $6933;
                        break;
                };
                var $6918 = $6926;
                break;
            case 'Kind.Term.ref':
            case 'Kind.Term.hol':
            case 'Kind.Term.nat':
            case 'Kind.Term.chr':
            case 'Kind.Term.str':
                var self = _wyth$2;
                switch (self._) {
                    case 'List.cons':
                        var $6935 = self.head;
                        var $6936 = self.tail;
                        var self = $6935;
                        switch (self._) {
                            case 'Kind.Ann.new':
                                var $6938 = self.name;
                                var $6939 = Kind$Term$lam$($6938, (_x$12 => {
                                    var $6940 = Kind$Term$desugar_cse$argument$(_name$1, $6936, _type$3, _body$4, _defs$5);
                                    return $6940;
                                }));
                                var $6937 = $6939;
                                break;
                        };
                        var $6934 = $6937;
                        break;
                    case 'List.nil':
                        var $6941 = _body$4;
                        var $6934 = $6941;
                        break;
                };
                var $6918 = $6934;
                break;
            case 'Kind.Term.typ':
                var self = _wyth$2;
                switch (self._) {
                    case 'List.cons':
                        var $6943 = self.head;
                        var $6944 = self.tail;
                        var self = $6943;
                        switch (self._) {
                            case 'Kind.Ann.new':
                                var $6946 = self.name;
                                var $6947 = Kind$Term$lam$($6946, (_x$11 => {
                                    var $6948 = Kind$Term$desugar_cse$argument$(_name$1, $6944, _type$3, _body$4, _defs$5);
                                    return $6948;
                                }));
                                var $6945 = $6947;
                                break;
                        };
                        var $6942 = $6945;
                        break;
                    case 'List.nil':
                        var $6949 = _body$4;
                        var $6942 = $6949;
                        break;
                };
                var $6918 = $6942;
                break;
            case 'Kind.Term.let':
            case 'Kind.Term.def':
            case 'Kind.Term.ann':
            case 'Kind.Term.gol':
                var self = _wyth$2;
                switch (self._) {
                    case 'List.cons':
                        var $6951 = self.head;
                        var $6952 = self.tail;
                        var self = $6951;
                        switch (self._) {
                            case 'Kind.Ann.new':
                                var $6954 = self.name;
                                var $6955 = Kind$Term$lam$($6954, (_x$14 => {
                                    var $6956 = Kind$Term$desugar_cse$argument$(_name$1, $6952, _type$3, _body$4, _defs$5);
                                    return $6956;
                                }));
                                var $6953 = $6955;
                                break;
                        };
                        var $6950 = $6953;
                        break;
                    case 'List.nil':
                        var $6957 = _body$4;
                        var $6950 = $6957;
                        break;
                };
                var $6918 = $6950;
                break;
            case 'Kind.Term.cse':
                var self = _wyth$2;
                switch (self._) {
                    case 'List.cons':
                        var $6959 = self.head;
                        var $6960 = self.tail;
                        var self = $6959;
                        switch (self._) {
                            case 'Kind.Ann.new':
                                var $6962 = self.name;
                                var $6963 = Kind$Term$lam$($6962, (_x$17 => {
                                    var $6964 = Kind$Term$desugar_cse$argument$(_name$1, $6960, _type$3, _body$4, _defs$5);
                                    return $6964;
                                }));
                                var $6961 = $6963;
                                break;
                        };
                        var $6958 = $6961;
                        break;
                    case 'List.nil':
                        var $6965 = _body$4;
                        var $6958 = $6965;
                        break;
                };
                var $6918 = $6958;
                break;
        };
        return $6918;
    };
    const Kind$Term$desugar_cse$argument = x0 => x1 => x2 => x3 => x4 => Kind$Term$desugar_cse$argument$(x0, x1, x2, x3, x4);

    function Maybe$or$(_a$2, _b$3) {
        var self = _a$2;
        switch (self._) {
            case 'Maybe.some':
                var $6967 = self.value;
                var $6968 = Maybe$some$($6967);
                var $6966 = $6968;
                break;
            case 'Maybe.none':
                var $6969 = _b$3;
                var $6966 = $6969;
                break;
        };
        return $6966;
    };
    const Maybe$or = x0 => x1 => Maybe$or$(x0, x1);

    function Kind$Term$desugar_cse$cases$(_expr$1, _name$2, _wyth$3, _cses$4, _type$5, _defs$6, _ctxt$7) {
        var Kind$Term$desugar_cse$cases$ = (_expr$1, _name$2, _wyth$3, _cses$4, _type$5, _defs$6, _ctxt$7) => ({
            ctr: 'TCO',
            arg: [_expr$1, _name$2, _wyth$3, _cses$4, _type$5, _defs$6, _ctxt$7]
        });
        var Kind$Term$desugar_cse$cases = _expr$1 => _name$2 => _wyth$3 => _cses$4 => _type$5 => _defs$6 => _ctxt$7 => Kind$Term$desugar_cse$cases$(_expr$1, _name$2, _wyth$3, _cses$4, _type$5, _defs$6, _ctxt$7);
        var arg = [_expr$1, _name$2, _wyth$3, _cses$4, _type$5, _defs$6, _ctxt$7];
        while (true) {
            let [_expr$1, _name$2, _wyth$3, _cses$4, _type$5, _defs$6, _ctxt$7] = arg;
            var R = (() => {
                var self = Kind$Term$reduce$(_type$5, _defs$6);
                switch (self._) {
                    case 'Kind.Term.all':
                        var $6970 = self.self;
                        var $6971 = self.name;
                        var $6972 = self.xtyp;
                        var $6973 = self.body;
                        var _argm$13 = Maybe$or$(Kind$Map$get$($6971, _cses$4), Kind$Map$get$("_", _cses$4));
                        var _argm$14 = Maybe$default$(_argm$13, Kind$Term$ref$((_name$2 + ("_" + ($6971 + "_case")))));
                        var _argm$15 = Kind$Term$desugar_cse$argument$(_name$2, _wyth$3, $6972, _argm$14, _defs$6);
                        var _expr$16 = Kind$Term$app$(_expr$1, _argm$15);
                        var _type$17 = $6973(Kind$Term$var$($6970, 0n))(Kind$Term$var$($6971, 0n));
                        var $6974 = Kind$Term$desugar_cse$cases$(_expr$16, _name$2, _wyth$3, _cses$4, _type$17, _defs$6, _ctxt$7);
                        return $6974;
                    case 'Kind.Term.var':
                    case 'Kind.Term.lam':
                    case 'Kind.Term.app':
                    case 'Kind.Term.ori':
                        var _expr$10 = (() => {
                            var $6977 = _expr$1;
                            var $6978 = _wyth$3;
                            let _expr$11 = $6977;
                            let _defn$10;
                            while ($6978._ === 'List.cons') {
                                _defn$10 = $6978.head;
                                var $6977 = Kind$Term$app$(_expr$11, (() => {
                                    var self = _defn$10;
                                    switch (self._) {
                                        case 'Kind.Ann.new':
                                            var $6979 = self.term;
                                            var $6980 = $6979;
                                            return $6980;
                                    };
                                })());
                                _expr$11 = $6977;
                                $6978 = $6978.tail;
                            }
                            return _expr$11;
                        })();
                        var $6975 = _expr$10;
                        return $6975;
                    case 'Kind.Term.ref':
                    case 'Kind.Term.hol':
                    case 'Kind.Term.nat':
                    case 'Kind.Term.chr':
                    case 'Kind.Term.str':
                        var _expr$9 = (() => {
                            var $6983 = _expr$1;
                            var $6984 = _wyth$3;
                            let _expr$10 = $6983;
                            let _defn$9;
                            while ($6984._ === 'List.cons') {
                                _defn$9 = $6984.head;
                                var $6983 = Kind$Term$app$(_expr$10, (() => {
                                    var self = _defn$9;
                                    switch (self._) {
                                        case 'Kind.Ann.new':
                                            var $6985 = self.term;
                                            var $6986 = $6985;
                                            return $6986;
                                    };
                                })());
                                _expr$10 = $6983;
                                $6984 = $6984.tail;
                            }
                            return _expr$10;
                        })();
                        var $6981 = _expr$9;
                        return $6981;
                    case 'Kind.Term.typ':
                        var _expr$8 = (() => {
                            var $6989 = _expr$1;
                            var $6990 = _wyth$3;
                            let _expr$9 = $6989;
                            let _defn$8;
                            while ($6990._ === 'List.cons') {
                                _defn$8 = $6990.head;
                                var $6989 = Kind$Term$app$(_expr$9, (() => {
                                    var self = _defn$8;
                                    switch (self._) {
                                        case 'Kind.Ann.new':
                                            var $6991 = self.term;
                                            var $6992 = $6991;
                                            return $6992;
                                    };
                                })());
                                _expr$9 = $6989;
                                $6990 = $6990.tail;
                            }
                            return _expr$9;
                        })();
                        var $6987 = _expr$8;
                        return $6987;
                    case 'Kind.Term.let':
                    case 'Kind.Term.def':
                    case 'Kind.Term.ann':
                    case 'Kind.Term.gol':
                        var _expr$11 = (() => {
                            var $6995 = _expr$1;
                            var $6996 = _wyth$3;
                            let _expr$12 = $6995;
                            let _defn$11;
                            while ($6996._ === 'List.cons') {
                                _defn$11 = $6996.head;
                                var $6995 = Kind$Term$app$(_expr$12, (() => {
                                    var self = _defn$11;
                                    switch (self._) {
                                        case 'Kind.Ann.new':
                                            var $6997 = self.term;
                                            var $6998 = $6997;
                                            return $6998;
                                    };
                                })());
                                _expr$12 = $6995;
                                $6996 = $6996.tail;
                            }
                            return _expr$12;
                        })();
                        var $6993 = _expr$11;
                        return $6993;
                    case 'Kind.Term.cse':
                        var _expr$14 = (() => {
                            var $7001 = _expr$1;
                            var $7002 = _wyth$3;
                            let _expr$15 = $7001;
                            let _defn$14;
                            while ($7002._ === 'List.cons') {
                                _defn$14 = $7002.head;
                                var $7001 = Kind$Term$app$(_expr$15, (() => {
                                    var self = _defn$14;
                                    switch (self._) {
                                        case 'Kind.Ann.new':
                                            var $7003 = self.term;
                                            var $7004 = $7003;
                                            return $7004;
                                    };
                                })());
                                _expr$15 = $7001;
                                $7002 = $7002.tail;
                            }
                            return _expr$15;
                        })();
                        var $6999 = _expr$14;
                        return $6999;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Kind$Term$desugar_cse$cases = x0 => x1 => x2 => x3 => x4 => x5 => x6 => Kind$Term$desugar_cse$cases$(x0, x1, x2, x3, x4, x5, x6);

    function Kind$Term$desugar_cse$(_expr$1, _name$2, _wyth$3, _cses$4, _moti$5, _etyp$6, _rtyp$7, _defs$8, _ctxt$9) {
        var self = Kind$Term$reduce$(_etyp$6, _defs$8);
        switch (self._) {
            case 'Kind.Term.all':
                var $7006 = self.self;
                var $7007 = self.name;
                var $7008 = self.xtyp;
                var $7009 = self.body;
                var _moti$15 = Kind$Term$desugar_cse$motive$(_wyth$3, _moti$5, _name$2, _expr$1, _etyp$6, _rtyp$7, _defs$8, (list_length(_ctxt$9)));
                var _argm$16 = Kind$Term$desugar_cse$argument$(_name$2, List$nil, $7008, _moti$15, _defs$8);
                var _expr$17 = Kind$Term$app$(_expr$1, _argm$16);
                var _type$18 = $7009(Kind$Term$var$($7006, 0n))(Kind$Term$var$($7007, 0n));
                var $7010 = Maybe$some$(Kind$Term$desugar_cse$cases$(_expr$17, _name$2, _wyth$3, _cses$4, _type$18, _defs$8, _ctxt$9));
                var $7005 = $7010;
                break;
            case 'Kind.Term.var':
            case 'Kind.Term.ref':
            case 'Kind.Term.typ':
            case 'Kind.Term.lam':
            case 'Kind.Term.app':
            case 'Kind.Term.let':
            case 'Kind.Term.def':
            case 'Kind.Term.ann':
            case 'Kind.Term.gol':
            case 'Kind.Term.hol':
            case 'Kind.Term.nat':
            case 'Kind.Term.chr':
            case 'Kind.Term.str':
            case 'Kind.Term.cse':
            case 'Kind.Term.ori':
                var $7011 = Maybe$none;
                var $7005 = $7011;
                break;
        };
        return $7005;
    };
    const Kind$Term$desugar_cse = x0 => x1 => x2 => x3 => x4 => x5 => x6 => x7 => x8 => Kind$Term$desugar_cse$(x0, x1, x2, x3, x4, x5, x6, x7, x8);

    function Kind$Error$cant_infer$(_origin$1, _term$2, _context$3) {
        var $7012 = ({
            _: 'Kind.Error.cant_infer',
            'origin': _origin$1,
            'term': _term$2,
            'context': _context$3
        });
        return $7012;
    };
    const Kind$Error$cant_infer = x0 => x1 => x2 => Kind$Error$cant_infer$(x0, x1, x2);

    function BitsSet$has$(_bits$1, _set$2) {
        var self = (bitsmap_get(_bits$1, _set$2));
        switch (self._) {
            case 'Maybe.none':
                var $7014 = Bool$false;
                var $7013 = $7014;
                break;
            case 'Maybe.some':
                var $7015 = Bool$true;
                var $7013 = $7015;
                break;
        };
        return $7013;
    };
    const BitsSet$has = x0 => x1 => BitsSet$has$(x0, x1);

    function BitsSet$mut$has$(_bits$1, _set$2) {
        var $7016 = BitsSet$has$(_bits$1, _set$2);
        return $7016;
    };
    const BitsSet$mut$has = x0 => x1 => BitsSet$mut$has$(x0, x1);

    function Kind$Term$equal$extra_holes$funari$(_term$1, _arity$2) {
        var Kind$Term$equal$extra_holes$funari$ = (_term$1, _arity$2) => ({
            ctr: 'TCO',
            arg: [_term$1, _arity$2]
        });
        var Kind$Term$equal$extra_holes$funari = _term$1 => _arity$2 => Kind$Term$equal$extra_holes$funari$(_term$1, _arity$2);
        var arg = [_term$1, _arity$2];
        while (true) {
            let [_term$1, _arity$2] = arg;
            var R = (() => {
                var self = _term$1;
                switch (self._) {
                    case 'Kind.Term.var':
                        var $7017 = self.name;
                        var $7018 = Maybe$some$(Pair$new$($7017, _arity$2));
                        return $7018;
                    case 'Kind.Term.ref':
                        var $7019 = self.name;
                        var $7020 = Maybe$some$(Pair$new$($7019, _arity$2));
                        return $7020;
                    case 'Kind.Term.app':
                        var $7021 = self.func;
                        var $7022 = Kind$Term$equal$extra_holes$funari$($7021, Nat$succ$(_arity$2));
                        return $7022;
                    case 'Kind.Term.ori':
                        var $7023 = self.expr;
                        var $7024 = Kind$Term$equal$extra_holes$funari$($7023, _arity$2);
                        return $7024;
                    case 'Kind.Term.typ':
                    case 'Kind.Term.all':
                    case 'Kind.Term.lam':
                    case 'Kind.Term.let':
                    case 'Kind.Term.def':
                    case 'Kind.Term.ann':
                    case 'Kind.Term.gol':
                    case 'Kind.Term.hol':
                    case 'Kind.Term.nat':
                    case 'Kind.Term.chr':
                    case 'Kind.Term.str':
                    case 'Kind.Term.cse':
                        var $7025 = Maybe$none;
                        return $7025;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Kind$Term$equal$extra_holes$funari = x0 => x1 => Kind$Term$equal$extra_holes$funari$(x0, x1);

    function Kind$Term$has_holes$(_term$1) {
        var self = _term$1;
        switch (self._) {
            case 'Kind.Term.all':
                var $7027 = self.xtyp;
                var $7028 = self.body;
                var $7029 = (Kind$Term$has_holes$($7027) || Kind$Term$has_holes$($7028(Kind$Term$typ)(Kind$Term$typ)));
                var $7026 = $7029;
                break;
            case 'Kind.Term.lam':
                var $7030 = self.body;
                var $7031 = Kind$Term$has_holes$($7030(Kind$Term$typ));
                var $7026 = $7031;
                break;
            case 'Kind.Term.app':
                var $7032 = self.func;
                var $7033 = self.argm;
                var $7034 = (Kind$Term$has_holes$($7032) || Kind$Term$has_holes$($7033));
                var $7026 = $7034;
                break;
            case 'Kind.Term.let':
                var $7035 = self.expr;
                var $7036 = self.body;
                var $7037 = (Kind$Term$has_holes$($7035) || Kind$Term$has_holes$($7036(Kind$Term$typ)));
                var $7026 = $7037;
                break;
            case 'Kind.Term.def':
                var $7038 = self.expr;
                var $7039 = self.body;
                var $7040 = (Kind$Term$has_holes$($7038) || Kind$Term$has_holes$($7039(Kind$Term$typ)));
                var $7026 = $7040;
                break;
            case 'Kind.Term.ann':
                var $7041 = self.term;
                var $7042 = self.type;
                var $7043 = (Kind$Term$has_holes$($7041) || Kind$Term$has_holes$($7042));
                var $7026 = $7043;
                break;
            case 'Kind.Term.ori':
                var $7044 = self.expr;
                var $7045 = Kind$Term$has_holes$($7044);
                var $7026 = $7045;
                break;
            case 'Kind.Term.var':
            case 'Kind.Term.ref':
            case 'Kind.Term.typ':
            case 'Kind.Term.gol':
            case 'Kind.Term.nat':
            case 'Kind.Term.chr':
            case 'Kind.Term.str':
            case 'Kind.Term.cse':
                var $7046 = Bool$false;
                var $7026 = $7046;
                break;
            case 'Kind.Term.hol':
                var $7047 = Bool$true;
                var $7026 = $7047;
                break;
        };
        return $7026;
    };
    const Kind$Term$has_holes = x0 => Kind$Term$has_holes$(x0);

    function Kind$Term$equal$hole$(_path$1, _term$2) {
        var self = _term$2;
        switch (self._) {
            case 'Kind.Term.var':
            case 'Kind.Term.ref':
            case 'Kind.Term.typ':
            case 'Kind.Term.all':
            case 'Kind.Term.lam':
            case 'Kind.Term.app':
            case 'Kind.Term.let':
            case 'Kind.Term.def':
            case 'Kind.Term.ann':
            case 'Kind.Term.gol':
            case 'Kind.Term.nat':
            case 'Kind.Term.chr':
            case 'Kind.Term.str':
            case 'Kind.Term.cse':
            case 'Kind.Term.ori':
                var self = Kind$Term$has_holes$(_term$2);
                if (self) {
                    var $7050 = Kind$Check$result$(Maybe$some$(Bool$true), List$nil);
                    var $7049 = $7050;
                } else {
                    var $7051 = Kind$Check$result$(Maybe$some$(Bool$true), List$cons$(Kind$Error$patch$(_path$1, Kind$Term$normalize$(_term$2, Kind$Map$new)), List$nil));
                    var $7049 = $7051;
                };
                var $7048 = $7049;
                break;
            case 'Kind.Term.hol':
                var $7052 = Kind$Check$result$(Maybe$some$(Bool$true), List$nil);
                var $7048 = $7052;
                break;
        };
        return $7048;
    };
    const Kind$Term$equal$hole = x0 => x1 => Kind$Term$equal$hole$(x0, x1);

    function Kind$Term$equal$extra_holes$filler$(_a$1, _b$2) {
        var self = _a$1;
        switch (self._) {
            case 'Kind.Term.app':
                var $7054 = self.func;
                var $7055 = self.argm;
                var self = _b$2;
                switch (self._) {
                    case 'Kind.Term.app':
                        var $7057 = self.func;
                        var $7058 = self.argm;
                        var self = Kind$Term$equal$extra_holes$filler$($7054, $7057);
                        switch (self._) {
                            case 'Kind.Check.result':
                                var $7060 = self.value;
                                var $7061 = self.errors;
                                var self = $7060;
                                switch (self._) {
                                    case 'Maybe.none':
                                        var $7063 = Kind$Check$result$(Maybe$none, $7061);
                                        var $7062 = $7063;
                                        break;
                                    case 'Maybe.some':
                                        var self = Kind$Term$equal$extra_holes$filler$($7055, $7058);
                                        switch (self._) {
                                            case 'Kind.Check.result':
                                                var $7065 = self.value;
                                                var $7066 = self.errors;
                                                var $7067 = Kind$Check$result$($7065, List$concat$($7061, $7066));
                                                var $7064 = $7067;
                                                break;
                                        };
                                        var $7062 = $7064;
                                        break;
                                };
                                var $7059 = $7062;
                                break;
                        };
                        var $7056 = $7059;
                        break;
                    case 'Kind.Term.hol':
                        var $7068 = self.path;
                        var self = Kind$Term$equal$hole$($7068, _a$1);
                        switch (self._) {
                            case 'Kind.Check.result':
                                var $7070 = self.value;
                                var $7071 = self.errors;
                                var self = $7070;
                                switch (self._) {
                                    case 'Maybe.none':
                                        var $7073 = Kind$Check$result$(Maybe$none, $7071);
                                        var $7072 = $7073;
                                        break;
                                    case 'Maybe.some':
                                        var self = Kind$Check$result$(Maybe$some$(Unit$new), List$nil);
                                        switch (self._) {
                                            case 'Kind.Check.result':
                                                var $7075 = self.value;
                                                var $7076 = self.errors;
                                                var $7077 = Kind$Check$result$($7075, List$concat$($7071, $7076));
                                                var $7074 = $7077;
                                                break;
                                        };
                                        var $7072 = $7074;
                                        break;
                                };
                                var $7069 = $7072;
                                break;
                        };
                        var $7056 = $7069;
                        break;
                    case 'Kind.Term.ori':
                        var $7078 = self.expr;
                        var $7079 = Kind$Term$equal$extra_holes$filler$(_a$1, $7078);
                        var $7056 = $7079;
                        break;
                    case 'Kind.Term.var':
                    case 'Kind.Term.ref':
                    case 'Kind.Term.typ':
                    case 'Kind.Term.all':
                    case 'Kind.Term.lam':
                    case 'Kind.Term.let':
                    case 'Kind.Term.def':
                    case 'Kind.Term.ann':
                    case 'Kind.Term.gol':
                    case 'Kind.Term.nat':
                    case 'Kind.Term.chr':
                    case 'Kind.Term.str':
                    case 'Kind.Term.cse':
                        var $7080 = Kind$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $7056 = $7080;
                        break;
                };
                var $7053 = $7056;
                break;
            case 'Kind.Term.hol':
                var $7081 = self.path;
                var self = Kind$Term$equal$hole$($7081, _b$2);
                switch (self._) {
                    case 'Kind.Check.result':
                        var $7083 = self.value;
                        var $7084 = self.errors;
                        var self = $7083;
                        switch (self._) {
                            case 'Maybe.none':
                                var $7086 = Kind$Check$result$(Maybe$none, $7084);
                                var $7085 = $7086;
                                break;
                            case 'Maybe.some':
                                var self = Kind$Check$result$(Maybe$some$(Unit$new), List$nil);
                                switch (self._) {
                                    case 'Kind.Check.result':
                                        var $7088 = self.value;
                                        var $7089 = self.errors;
                                        var $7090 = Kind$Check$result$($7088, List$concat$($7084, $7089));
                                        var $7087 = $7090;
                                        break;
                                };
                                var $7085 = $7087;
                                break;
                        };
                        var $7082 = $7085;
                        break;
                };
                var $7053 = $7082;
                break;
            case 'Kind.Term.ori':
                var $7091 = self.expr;
                var $7092 = Kind$Term$equal$extra_holes$filler$($7091, _b$2);
                var $7053 = $7092;
                break;
            case 'Kind.Term.var':
            case 'Kind.Term.lam':
                var self = _b$2;
                switch (self._) {
                    case 'Kind.Term.hol':
                        var $7094 = self.path;
                        var self = Kind$Term$equal$hole$($7094, _a$1);
                        switch (self._) {
                            case 'Kind.Check.result':
                                var $7096 = self.value;
                                var $7097 = self.errors;
                                var self = $7096;
                                switch (self._) {
                                    case 'Maybe.none':
                                        var $7099 = Kind$Check$result$(Maybe$none, $7097);
                                        var $7098 = $7099;
                                        break;
                                    case 'Maybe.some':
                                        var self = Kind$Check$result$(Maybe$some$(Unit$new), List$nil);
                                        switch (self._) {
                                            case 'Kind.Check.result':
                                                var $7101 = self.value;
                                                var $7102 = self.errors;
                                                var $7103 = Kind$Check$result$($7101, List$concat$($7097, $7102));
                                                var $7100 = $7103;
                                                break;
                                        };
                                        var $7098 = $7100;
                                        break;
                                };
                                var $7095 = $7098;
                                break;
                        };
                        var $7093 = $7095;
                        break;
                    case 'Kind.Term.ori':
                        var $7104 = self.expr;
                        var $7105 = Kind$Term$equal$extra_holes$filler$(_a$1, $7104);
                        var $7093 = $7105;
                        break;
                    case 'Kind.Term.var':
                    case 'Kind.Term.ref':
                    case 'Kind.Term.typ':
                    case 'Kind.Term.all':
                    case 'Kind.Term.lam':
                    case 'Kind.Term.app':
                    case 'Kind.Term.let':
                    case 'Kind.Term.def':
                    case 'Kind.Term.ann':
                    case 'Kind.Term.gol':
                    case 'Kind.Term.nat':
                    case 'Kind.Term.chr':
                    case 'Kind.Term.str':
                    case 'Kind.Term.cse':
                        var $7106 = Kind$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $7093 = $7106;
                        break;
                };
                var $7053 = $7093;
                break;
            case 'Kind.Term.ref':
            case 'Kind.Term.nat':
            case 'Kind.Term.chr':
            case 'Kind.Term.str':
                var self = _b$2;
                switch (self._) {
                    case 'Kind.Term.hol':
                        var $7108 = self.path;
                        var self = Kind$Term$equal$hole$($7108, _a$1);
                        switch (self._) {
                            case 'Kind.Check.result':
                                var $7110 = self.value;
                                var $7111 = self.errors;
                                var self = $7110;
                                switch (self._) {
                                    case 'Maybe.none':
                                        var $7113 = Kind$Check$result$(Maybe$none, $7111);
                                        var $7112 = $7113;
                                        break;
                                    case 'Maybe.some':
                                        var self = Kind$Check$result$(Maybe$some$(Unit$new), List$nil);
                                        switch (self._) {
                                            case 'Kind.Check.result':
                                                var $7115 = self.value;
                                                var $7116 = self.errors;
                                                var $7117 = Kind$Check$result$($7115, List$concat$($7111, $7116));
                                                var $7114 = $7117;
                                                break;
                                        };
                                        var $7112 = $7114;
                                        break;
                                };
                                var $7109 = $7112;
                                break;
                        };
                        var $7107 = $7109;
                        break;
                    case 'Kind.Term.ori':
                        var $7118 = self.expr;
                        var $7119 = Kind$Term$equal$extra_holes$filler$(_a$1, $7118);
                        var $7107 = $7119;
                        break;
                    case 'Kind.Term.var':
                    case 'Kind.Term.ref':
                    case 'Kind.Term.typ':
                    case 'Kind.Term.all':
                    case 'Kind.Term.lam':
                    case 'Kind.Term.app':
                    case 'Kind.Term.let':
                    case 'Kind.Term.def':
                    case 'Kind.Term.ann':
                    case 'Kind.Term.gol':
                    case 'Kind.Term.nat':
                    case 'Kind.Term.chr':
                    case 'Kind.Term.str':
                    case 'Kind.Term.cse':
                        var $7120 = Kind$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $7107 = $7120;
                        break;
                };
                var $7053 = $7107;
                break;
            case 'Kind.Term.typ':
                var self = _b$2;
                switch (self._) {
                    case 'Kind.Term.hol':
                        var $7122 = self.path;
                        var self = Kind$Term$equal$hole$($7122, _a$1);
                        switch (self._) {
                            case 'Kind.Check.result':
                                var $7124 = self.value;
                                var $7125 = self.errors;
                                var self = $7124;
                                switch (self._) {
                                    case 'Maybe.none':
                                        var $7127 = Kind$Check$result$(Maybe$none, $7125);
                                        var $7126 = $7127;
                                        break;
                                    case 'Maybe.some':
                                        var self = Kind$Check$result$(Maybe$some$(Unit$new), List$nil);
                                        switch (self._) {
                                            case 'Kind.Check.result':
                                                var $7129 = self.value;
                                                var $7130 = self.errors;
                                                var $7131 = Kind$Check$result$($7129, List$concat$($7125, $7130));
                                                var $7128 = $7131;
                                                break;
                                        };
                                        var $7126 = $7128;
                                        break;
                                };
                                var $7123 = $7126;
                                break;
                        };
                        var $7121 = $7123;
                        break;
                    case 'Kind.Term.ori':
                        var $7132 = self.expr;
                        var $7133 = Kind$Term$equal$extra_holes$filler$(_a$1, $7132);
                        var $7121 = $7133;
                        break;
                    case 'Kind.Term.var':
                    case 'Kind.Term.ref':
                    case 'Kind.Term.typ':
                    case 'Kind.Term.all':
                    case 'Kind.Term.lam':
                    case 'Kind.Term.app':
                    case 'Kind.Term.let':
                    case 'Kind.Term.def':
                    case 'Kind.Term.ann':
                    case 'Kind.Term.gol':
                    case 'Kind.Term.nat':
                    case 'Kind.Term.chr':
                    case 'Kind.Term.str':
                    case 'Kind.Term.cse':
                        var $7134 = Kind$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $7121 = $7134;
                        break;
                };
                var $7053 = $7121;
                break;
            case 'Kind.Term.all':
                var self = _b$2;
                switch (self._) {
                    case 'Kind.Term.hol':
                        var $7136 = self.path;
                        var self = Kind$Term$equal$hole$($7136, _a$1);
                        switch (self._) {
                            case 'Kind.Check.result':
                                var $7138 = self.value;
                                var $7139 = self.errors;
                                var self = $7138;
                                switch (self._) {
                                    case 'Maybe.none':
                                        var $7141 = Kind$Check$result$(Maybe$none, $7139);
                                        var $7140 = $7141;
                                        break;
                                    case 'Maybe.some':
                                        var self = Kind$Check$result$(Maybe$some$(Unit$new), List$nil);
                                        switch (self._) {
                                            case 'Kind.Check.result':
                                                var $7143 = self.value;
                                                var $7144 = self.errors;
                                                var $7145 = Kind$Check$result$($7143, List$concat$($7139, $7144));
                                                var $7142 = $7145;
                                                break;
                                        };
                                        var $7140 = $7142;
                                        break;
                                };
                                var $7137 = $7140;
                                break;
                        };
                        var $7135 = $7137;
                        break;
                    case 'Kind.Term.ori':
                        var $7146 = self.expr;
                        var $7147 = Kind$Term$equal$extra_holes$filler$(_a$1, $7146);
                        var $7135 = $7147;
                        break;
                    case 'Kind.Term.var':
                    case 'Kind.Term.ref':
                    case 'Kind.Term.typ':
                    case 'Kind.Term.all':
                    case 'Kind.Term.lam':
                    case 'Kind.Term.app':
                    case 'Kind.Term.let':
                    case 'Kind.Term.def':
                    case 'Kind.Term.ann':
                    case 'Kind.Term.gol':
                    case 'Kind.Term.nat':
                    case 'Kind.Term.chr':
                    case 'Kind.Term.str':
                    case 'Kind.Term.cse':
                        var $7148 = Kind$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $7135 = $7148;
                        break;
                };
                var $7053 = $7135;
                break;
            case 'Kind.Term.let':
            case 'Kind.Term.def':
            case 'Kind.Term.ann':
            case 'Kind.Term.gol':
                var self = _b$2;
                switch (self._) {
                    case 'Kind.Term.hol':
                        var $7150 = self.path;
                        var self = Kind$Term$equal$hole$($7150, _a$1);
                        switch (self._) {
                            case 'Kind.Check.result':
                                var $7152 = self.value;
                                var $7153 = self.errors;
                                var self = $7152;
                                switch (self._) {
                                    case 'Maybe.none':
                                        var $7155 = Kind$Check$result$(Maybe$none, $7153);
                                        var $7154 = $7155;
                                        break;
                                    case 'Maybe.some':
                                        var self = Kind$Check$result$(Maybe$some$(Unit$new), List$nil);
                                        switch (self._) {
                                            case 'Kind.Check.result':
                                                var $7157 = self.value;
                                                var $7158 = self.errors;
                                                var $7159 = Kind$Check$result$($7157, List$concat$($7153, $7158));
                                                var $7156 = $7159;
                                                break;
                                        };
                                        var $7154 = $7156;
                                        break;
                                };
                                var $7151 = $7154;
                                break;
                        };
                        var $7149 = $7151;
                        break;
                    case 'Kind.Term.ori':
                        var $7160 = self.expr;
                        var $7161 = Kind$Term$equal$extra_holes$filler$(_a$1, $7160);
                        var $7149 = $7161;
                        break;
                    case 'Kind.Term.var':
                    case 'Kind.Term.ref':
                    case 'Kind.Term.typ':
                    case 'Kind.Term.all':
                    case 'Kind.Term.lam':
                    case 'Kind.Term.app':
                    case 'Kind.Term.let':
                    case 'Kind.Term.def':
                    case 'Kind.Term.ann':
                    case 'Kind.Term.gol':
                    case 'Kind.Term.nat':
                    case 'Kind.Term.chr':
                    case 'Kind.Term.str':
                    case 'Kind.Term.cse':
                        var $7162 = Kind$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $7149 = $7162;
                        break;
                };
                var $7053 = $7149;
                break;
            case 'Kind.Term.cse':
                var self = _b$2;
                switch (self._) {
                    case 'Kind.Term.hol':
                        var $7164 = self.path;
                        var self = Kind$Term$equal$hole$($7164, _a$1);
                        switch (self._) {
                            case 'Kind.Check.result':
                                var $7166 = self.value;
                                var $7167 = self.errors;
                                var self = $7166;
                                switch (self._) {
                                    case 'Maybe.none':
                                        var $7169 = Kind$Check$result$(Maybe$none, $7167);
                                        var $7168 = $7169;
                                        break;
                                    case 'Maybe.some':
                                        var self = Kind$Check$result$(Maybe$some$(Unit$new), List$nil);
                                        switch (self._) {
                                            case 'Kind.Check.result':
                                                var $7171 = self.value;
                                                var $7172 = self.errors;
                                                var $7173 = Kind$Check$result$($7171, List$concat$($7167, $7172));
                                                var $7170 = $7173;
                                                break;
                                        };
                                        var $7168 = $7170;
                                        break;
                                };
                                var $7165 = $7168;
                                break;
                        };
                        var $7163 = $7165;
                        break;
                    case 'Kind.Term.ori':
                        var $7174 = self.expr;
                        var $7175 = Kind$Term$equal$extra_holes$filler$(_a$1, $7174);
                        var $7163 = $7175;
                        break;
                    case 'Kind.Term.var':
                    case 'Kind.Term.ref':
                    case 'Kind.Term.typ':
                    case 'Kind.Term.all':
                    case 'Kind.Term.lam':
                    case 'Kind.Term.app':
                    case 'Kind.Term.let':
                    case 'Kind.Term.def':
                    case 'Kind.Term.ann':
                    case 'Kind.Term.gol':
                    case 'Kind.Term.nat':
                    case 'Kind.Term.chr':
                    case 'Kind.Term.str':
                    case 'Kind.Term.cse':
                        var $7176 = Kind$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $7163 = $7176;
                        break;
                };
                var $7053 = $7163;
                break;
        };
        return $7053;
    };
    const Kind$Term$equal$extra_holes$filler = x0 => x1 => Kind$Term$equal$extra_holes$filler$(x0, x1);

    function Kind$Term$equal$extra_holes$(_a$1, _b$2) {
        var self = Kind$Term$equal$extra_holes$funari$(_a$1, 0n);
        switch (self._) {
            case 'Maybe.some':
                var $7178 = self.value;
                var self = Kind$Term$equal$extra_holes$funari$(_b$2, 0n);
                switch (self._) {
                    case 'Maybe.some':
                        var $7180 = self.value;
                        var self = $7178;
                        switch (self._) {
                            case 'Pair.new':
                                var $7182 = self.fst;
                                var $7183 = self.snd;
                                var self = $7180;
                                switch (self._) {
                                    case 'Pair.new':
                                        var $7185 = self.fst;
                                        var $7186 = self.snd;
                                        var _same_fun$9 = ($7182 === $7185);
                                        var _same_ari$10 = ($7183 === $7186);
                                        var self = (_same_fun$9 && _same_ari$10);
                                        if (self) {
                                            var $7188 = Kind$Term$equal$extra_holes$filler$(_a$1, _b$2);
                                            var $7187 = $7188;
                                        } else {
                                            var $7189 = Kind$Check$result$(Maybe$some$(Unit$new), List$nil);
                                            var $7187 = $7189;
                                        };
                                        var $7184 = $7187;
                                        break;
                                };
                                var $7181 = $7184;
                                break;
                        };
                        var $7179 = $7181;
                        break;
                    case 'Maybe.none':
                        var $7190 = Kind$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $7179 = $7190;
                        break;
                };
                var $7177 = $7179;
                break;
            case 'Maybe.none':
                var $7191 = Kind$Check$result$(Maybe$some$(Unit$new), List$nil);
                var $7177 = $7191;
                break;
        };
        return $7177;
    };
    const Kind$Term$equal$extra_holes = x0 => x1 => Kind$Term$equal$extra_holes$(x0, x1);

    function BitsSet$set$(_bits$1, _set$2) {
        var $7192 = (bitsmap_set(_bits$1, Unit$new, _set$2, 'set'));
        return $7192;
    };
    const BitsSet$set = x0 => x1 => BitsSet$set$(x0, x1);

    function BitsSet$mut$set$(_bits$1, _set$2) {
        var $7193 = BitsSet$set$(_bits$1, _set$2);
        return $7193;
    };
    const BitsSet$mut$set = x0 => x1 => BitsSet$mut$set$(x0, x1);

    function Bool$eql$(_a$1, _b$2) {
        var self = _a$1;
        if (self) {
            var $7195 = _b$2;
            var $7194 = $7195;
        } else {
            var $7196 = (!_b$2);
            var $7194 = $7196;
        };
        return $7194;
    };
    const Bool$eql = x0 => x1 => Bool$eql$(x0, x1);

    function Kind$Term$equal$go$(_a$1, _b$2, _defs$3, _lv$4, _seen$5) {
        var _ah$6 = Kind$Term$serialize$(Kind$Term$reduce$(_a$1, Kind$Map$new), _lv$4, Bool$false);
        var _bh$7 = Kind$Term$serialize$(Kind$Term$reduce$(_b$2, Kind$Map$new), _lv$4, Bool$true);
        var self = (_bh$7 === _ah$6);
        if (self) {
            var $7198 = Kind$Check$result$(Maybe$some$(Bool$true), List$nil);
            var $7197 = $7198;
        } else {
            var _a1$8 = Kind$Term$reduce$(_a$1, _defs$3);
            var _b1$9 = Kind$Term$reduce$(_b$2, _defs$3);
            var _ah$10 = Kind$Term$serialize$(_a1$8, _lv$4, Bool$false);
            var _bh$11 = Kind$Term$serialize$(_b1$9, _lv$4, Bool$true);
            var self = (_bh$11 === _ah$10);
            if (self) {
                var $7200 = Kind$Check$result$(Maybe$some$(Bool$true), List$nil);
                var $7199 = $7200;
            } else {
                var _id$12 = (_bh$11 + _ah$10);
                var self = BitsSet$mut$has$(_id$12, _seen$5);
                if (self) {
                    var self = Kind$Term$equal$extra_holes$(_a$1, _b$2);
                    switch (self._) {
                        case 'Kind.Check.result':
                            var $7203 = self.value;
                            var $7204 = self.errors;
                            var self = $7203;
                            switch (self._) {
                                case 'Maybe.none':
                                    var $7206 = Kind$Check$result$(Maybe$none, $7204);
                                    var $7205 = $7206;
                                    break;
                                case 'Maybe.some':
                                    var self = Kind$Check$result$(Maybe$some$(Bool$true), List$nil);
                                    switch (self._) {
                                        case 'Kind.Check.result':
                                            var $7208 = self.value;
                                            var $7209 = self.errors;
                                            var $7210 = Kind$Check$result$($7208, List$concat$($7204, $7209));
                                            var $7207 = $7210;
                                            break;
                                    };
                                    var $7205 = $7207;
                                    break;
                            };
                            var $7202 = $7205;
                            break;
                    };
                    var $7201 = $7202;
                } else {
                    var self = _a1$8;
                    switch (self._) {
                        case 'Kind.Term.all':
                            var $7212 = self.eras;
                            var $7213 = self.self;
                            var $7214 = self.name;
                            var $7215 = self.xtyp;
                            var $7216 = self.body;
                            var self = _b1$9;
                            switch (self._) {
                                case 'Kind.Term.all':
                                    var $7218 = self.eras;
                                    var $7219 = self.self;
                                    var $7220 = self.name;
                                    var $7221 = self.xtyp;
                                    var $7222 = self.body;
                                    var _seen$23 = BitsSet$mut$set$(_id$12, _seen$5);
                                    var _a1_body$24 = $7216(Kind$Term$var$($7213, _lv$4))(Kind$Term$var$($7214, Nat$succ$(_lv$4)));
                                    var _b1_body$25 = $7222(Kind$Term$var$($7219, _lv$4))(Kind$Term$var$($7220, Nat$succ$(_lv$4)));
                                    var _eq_self$26 = ($7213 === $7219);
                                    var _eq_eras$27 = Bool$eql$($7212, $7218);
                                    var self = (_eq_self$26 && _eq_eras$27);
                                    if (self) {
                                        var self = Kind$Term$equal$go$($7215, $7221, _defs$3, _lv$4, _seen$23);
                                        switch (self._) {
                                            case 'Kind.Check.result':
                                                var $7225 = self.value;
                                                var $7226 = self.errors;
                                                var self = $7225;
                                                switch (self._) {
                                                    case 'Maybe.some':
                                                        var $7228 = self.value;
                                                        var self = Kind$Term$equal$go$(_a1_body$24, _b1_body$25, _defs$3, Nat$succ$(Nat$succ$(_lv$4)), _seen$23);
                                                        switch (self._) {
                                                            case 'Kind.Check.result':
                                                                var $7230 = self.value;
                                                                var $7231 = self.errors;
                                                                var self = $7230;
                                                                switch (self._) {
                                                                    case 'Maybe.some':
                                                                        var $7233 = self.value;
                                                                        var self = Kind$Check$result$(Maybe$some$(($7228 && $7233)), List$nil);
                                                                        switch (self._) {
                                                                            case 'Kind.Check.result':
                                                                                var $7235 = self.value;
                                                                                var $7236 = self.errors;
                                                                                var $7237 = Kind$Check$result$($7235, List$concat$($7231, $7236));
                                                                                var $7234 = $7237;
                                                                                break;
                                                                        };
                                                                        var $7232 = $7234;
                                                                        break;
                                                                    case 'Maybe.none':
                                                                        var $7238 = Kind$Check$result$(Maybe$none, $7231);
                                                                        var $7232 = $7238;
                                                                        break;
                                                                };
                                                                var self = $7232;
                                                                break;
                                                        };
                                                        switch (self._) {
                                                            case 'Kind.Check.result':
                                                                var $7239 = self.value;
                                                                var $7240 = self.errors;
                                                                var $7241 = Kind$Check$result$($7239, List$concat$($7226, $7240));
                                                                var $7229 = $7241;
                                                                break;
                                                        };
                                                        var $7227 = $7229;
                                                        break;
                                                    case 'Maybe.none':
                                                        var $7242 = Kind$Check$result$(Maybe$none, $7226);
                                                        var $7227 = $7242;
                                                        break;
                                                };
                                                var $7224 = $7227;
                                                break;
                                        };
                                        var $7223 = $7224;
                                    } else {
                                        var $7243 = Kind$Check$result$(Maybe$some$(Bool$false), List$nil);
                                        var $7223 = $7243;
                                    };
                                    var $7217 = $7223;
                                    break;
                                case 'Kind.Term.hol':
                                    var $7244 = self.path;
                                    var $7245 = Kind$Term$equal$hole$($7244, _a$1);
                                    var $7217 = $7245;
                                    break;
                                case 'Kind.Term.var':
                                case 'Kind.Term.ref':
                                case 'Kind.Term.typ':
                                case 'Kind.Term.lam':
                                case 'Kind.Term.app':
                                case 'Kind.Term.let':
                                case 'Kind.Term.def':
                                case 'Kind.Term.ann':
                                case 'Kind.Term.gol':
                                case 'Kind.Term.nat':
                                case 'Kind.Term.chr':
                                case 'Kind.Term.str':
                                case 'Kind.Term.cse':
                                case 'Kind.Term.ori':
                                    var $7246 = Kind$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7217 = $7246;
                                    break;
                            };
                            var $7211 = $7217;
                            break;
                        case 'Kind.Term.lam':
                            var $7247 = self.name;
                            var $7248 = self.body;
                            var self = _b1$9;
                            switch (self._) {
                                case 'Kind.Term.lam':
                                    var $7250 = self.name;
                                    var $7251 = self.body;
                                    var _seen$17 = BitsSet$mut$set$(_id$12, _seen$5);
                                    var _a1_body$18 = $7248(Kind$Term$var$($7247, _lv$4));
                                    var _b1_body$19 = $7251(Kind$Term$var$($7250, _lv$4));
                                    var self = Kind$Term$equal$go$(_a1_body$18, _b1_body$19, _defs$3, Nat$succ$(_lv$4), _seen$17);
                                    switch (self._) {
                                        case 'Kind.Check.result':
                                            var $7253 = self.value;
                                            var $7254 = self.errors;
                                            var self = $7253;
                                            switch (self._) {
                                                case 'Maybe.some':
                                                    var $7256 = self.value;
                                                    var self = Kind$Check$result$(Maybe$some$($7256), List$nil);
                                                    switch (self._) {
                                                        case 'Kind.Check.result':
                                                            var $7258 = self.value;
                                                            var $7259 = self.errors;
                                                            var $7260 = Kind$Check$result$($7258, List$concat$($7254, $7259));
                                                            var $7257 = $7260;
                                                            break;
                                                    };
                                                    var $7255 = $7257;
                                                    break;
                                                case 'Maybe.none':
                                                    var $7261 = Kind$Check$result$(Maybe$none, $7254);
                                                    var $7255 = $7261;
                                                    break;
                                            };
                                            var $7252 = $7255;
                                            break;
                                    };
                                    var $7249 = $7252;
                                    break;
                                case 'Kind.Term.hol':
                                    var $7262 = self.path;
                                    var $7263 = Kind$Term$equal$hole$($7262, _a$1);
                                    var $7249 = $7263;
                                    break;
                                case 'Kind.Term.var':
                                case 'Kind.Term.ref':
                                case 'Kind.Term.typ':
                                case 'Kind.Term.all':
                                case 'Kind.Term.app':
                                case 'Kind.Term.let':
                                case 'Kind.Term.def':
                                case 'Kind.Term.ann':
                                case 'Kind.Term.gol':
                                case 'Kind.Term.nat':
                                case 'Kind.Term.chr':
                                case 'Kind.Term.str':
                                case 'Kind.Term.cse':
                                case 'Kind.Term.ori':
                                    var $7264 = Kind$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7249 = $7264;
                                    break;
                            };
                            var $7211 = $7249;
                            break;
                        case 'Kind.Term.app':
                            var $7265 = self.func;
                            var $7266 = self.argm;
                            var self = _b1$9;
                            switch (self._) {
                                case 'Kind.Term.app':
                                    var $7268 = self.func;
                                    var $7269 = self.argm;
                                    var _seen$17 = BitsSet$mut$set$(_id$12, _seen$5);
                                    var self = Kind$Term$equal$go$($7265, $7268, _defs$3, _lv$4, _seen$17);
                                    switch (self._) {
                                        case 'Kind.Check.result':
                                            var $7271 = self.value;
                                            var $7272 = self.errors;
                                            var self = $7271;
                                            switch (self._) {
                                                case 'Maybe.some':
                                                    var $7274 = self.value;
                                                    var self = Kind$Term$equal$go$($7266, $7269, _defs$3, _lv$4, _seen$17);
                                                    switch (self._) {
                                                        case 'Kind.Check.result':
                                                            var $7276 = self.value;
                                                            var $7277 = self.errors;
                                                            var self = $7276;
                                                            switch (self._) {
                                                                case 'Maybe.some':
                                                                    var $7279 = self.value;
                                                                    var self = Kind$Check$result$(Maybe$some$(($7274 && $7279)), List$nil);
                                                                    switch (self._) {
                                                                        case 'Kind.Check.result':
                                                                            var $7281 = self.value;
                                                                            var $7282 = self.errors;
                                                                            var $7283 = Kind$Check$result$($7281, List$concat$($7277, $7282));
                                                                            var $7280 = $7283;
                                                                            break;
                                                                    };
                                                                    var $7278 = $7280;
                                                                    break;
                                                                case 'Maybe.none':
                                                                    var $7284 = Kind$Check$result$(Maybe$none, $7277);
                                                                    var $7278 = $7284;
                                                                    break;
                                                            };
                                                            var self = $7278;
                                                            break;
                                                    };
                                                    switch (self._) {
                                                        case 'Kind.Check.result':
                                                            var $7285 = self.value;
                                                            var $7286 = self.errors;
                                                            var $7287 = Kind$Check$result$($7285, List$concat$($7272, $7286));
                                                            var $7275 = $7287;
                                                            break;
                                                    };
                                                    var $7273 = $7275;
                                                    break;
                                                case 'Maybe.none':
                                                    var $7288 = Kind$Check$result$(Maybe$none, $7272);
                                                    var $7273 = $7288;
                                                    break;
                                            };
                                            var $7270 = $7273;
                                            break;
                                    };
                                    var $7267 = $7270;
                                    break;
                                case 'Kind.Term.hol':
                                    var $7289 = self.path;
                                    var $7290 = Kind$Term$equal$hole$($7289, _a$1);
                                    var $7267 = $7290;
                                    break;
                                case 'Kind.Term.var':
                                case 'Kind.Term.ref':
                                case 'Kind.Term.typ':
                                case 'Kind.Term.all':
                                case 'Kind.Term.lam':
                                case 'Kind.Term.let':
                                case 'Kind.Term.def':
                                case 'Kind.Term.ann':
                                case 'Kind.Term.gol':
                                case 'Kind.Term.nat':
                                case 'Kind.Term.chr':
                                case 'Kind.Term.str':
                                case 'Kind.Term.cse':
                                case 'Kind.Term.ori':
                                    var $7291 = Kind$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7267 = $7291;
                                    break;
                            };
                            var $7211 = $7267;
                            break;
                        case 'Kind.Term.let':
                            var $7292 = self.name;
                            var $7293 = self.expr;
                            var $7294 = self.body;
                            var self = _b1$9;
                            switch (self._) {
                                case 'Kind.Term.let':
                                    var $7296 = self.name;
                                    var $7297 = self.expr;
                                    var $7298 = self.body;
                                    var _seen$19 = BitsSet$mut$set$(_id$12, _seen$5);
                                    var _a1_body$20 = $7294(Kind$Term$var$($7292, _lv$4));
                                    var _b1_body$21 = $7298(Kind$Term$var$($7296, _lv$4));
                                    var self = Kind$Term$equal$go$($7293, $7297, _defs$3, _lv$4, _seen$19);
                                    switch (self._) {
                                        case 'Kind.Check.result':
                                            var $7300 = self.value;
                                            var $7301 = self.errors;
                                            var self = $7300;
                                            switch (self._) {
                                                case 'Maybe.some':
                                                    var $7303 = self.value;
                                                    var self = Kind$Term$equal$go$(_a1_body$20, _b1_body$21, _defs$3, Nat$succ$(_lv$4), _seen$19);
                                                    switch (self._) {
                                                        case 'Kind.Check.result':
                                                            var $7305 = self.value;
                                                            var $7306 = self.errors;
                                                            var self = $7305;
                                                            switch (self._) {
                                                                case 'Maybe.some':
                                                                    var $7308 = self.value;
                                                                    var self = Kind$Check$result$(Maybe$some$(($7303 && $7308)), List$nil);
                                                                    switch (self._) {
                                                                        case 'Kind.Check.result':
                                                                            var $7310 = self.value;
                                                                            var $7311 = self.errors;
                                                                            var $7312 = Kind$Check$result$($7310, List$concat$($7306, $7311));
                                                                            var $7309 = $7312;
                                                                            break;
                                                                    };
                                                                    var $7307 = $7309;
                                                                    break;
                                                                case 'Maybe.none':
                                                                    var $7313 = Kind$Check$result$(Maybe$none, $7306);
                                                                    var $7307 = $7313;
                                                                    break;
                                                            };
                                                            var self = $7307;
                                                            break;
                                                    };
                                                    switch (self._) {
                                                        case 'Kind.Check.result':
                                                            var $7314 = self.value;
                                                            var $7315 = self.errors;
                                                            var $7316 = Kind$Check$result$($7314, List$concat$($7301, $7315));
                                                            var $7304 = $7316;
                                                            break;
                                                    };
                                                    var $7302 = $7304;
                                                    break;
                                                case 'Maybe.none':
                                                    var $7317 = Kind$Check$result$(Maybe$none, $7301);
                                                    var $7302 = $7317;
                                                    break;
                                            };
                                            var $7299 = $7302;
                                            break;
                                    };
                                    var $7295 = $7299;
                                    break;
                                case 'Kind.Term.hol':
                                    var $7318 = self.path;
                                    var $7319 = Kind$Term$equal$hole$($7318, _a$1);
                                    var $7295 = $7319;
                                    break;
                                case 'Kind.Term.var':
                                case 'Kind.Term.ref':
                                case 'Kind.Term.typ':
                                case 'Kind.Term.all':
                                case 'Kind.Term.lam':
                                case 'Kind.Term.app':
                                case 'Kind.Term.def':
                                case 'Kind.Term.ann':
                                case 'Kind.Term.gol':
                                case 'Kind.Term.nat':
                                case 'Kind.Term.chr':
                                case 'Kind.Term.str':
                                case 'Kind.Term.cse':
                                case 'Kind.Term.ori':
                                    var $7320 = Kind$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7295 = $7320;
                                    break;
                            };
                            var $7211 = $7295;
                            break;
                        case 'Kind.Term.hol':
                            var $7321 = self.path;
                            var $7322 = Kind$Term$equal$hole$($7321, _b$2);
                            var $7211 = $7322;
                            break;
                        case 'Kind.Term.var':
                        case 'Kind.Term.ori':
                            var self = _b1$9;
                            switch (self._) {
                                case 'Kind.Term.hol':
                                    var $7324 = self.path;
                                    var $7325 = Kind$Term$equal$hole$($7324, _a$1);
                                    var $7323 = $7325;
                                    break;
                                case 'Kind.Term.var':
                                case 'Kind.Term.ref':
                                case 'Kind.Term.typ':
                                case 'Kind.Term.all':
                                case 'Kind.Term.lam':
                                case 'Kind.Term.app':
                                case 'Kind.Term.let':
                                case 'Kind.Term.def':
                                case 'Kind.Term.ann':
                                case 'Kind.Term.gol':
                                case 'Kind.Term.nat':
                                case 'Kind.Term.chr':
                                case 'Kind.Term.str':
                                case 'Kind.Term.cse':
                                case 'Kind.Term.ori':
                                    var $7326 = Kind$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7323 = $7326;
                                    break;
                            };
                            var $7211 = $7323;
                            break;
                        case 'Kind.Term.ref':
                        case 'Kind.Term.nat':
                        case 'Kind.Term.chr':
                        case 'Kind.Term.str':
                            var self = _b1$9;
                            switch (self._) {
                                case 'Kind.Term.hol':
                                    var $7328 = self.path;
                                    var $7329 = Kind$Term$equal$hole$($7328, _a$1);
                                    var $7327 = $7329;
                                    break;
                                case 'Kind.Term.var':
                                case 'Kind.Term.ref':
                                case 'Kind.Term.typ':
                                case 'Kind.Term.all':
                                case 'Kind.Term.lam':
                                case 'Kind.Term.app':
                                case 'Kind.Term.let':
                                case 'Kind.Term.def':
                                case 'Kind.Term.ann':
                                case 'Kind.Term.gol':
                                case 'Kind.Term.nat':
                                case 'Kind.Term.chr':
                                case 'Kind.Term.str':
                                case 'Kind.Term.cse':
                                case 'Kind.Term.ori':
                                    var $7330 = Kind$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7327 = $7330;
                                    break;
                            };
                            var $7211 = $7327;
                            break;
                        case 'Kind.Term.typ':
                            var self = _b1$9;
                            switch (self._) {
                                case 'Kind.Term.hol':
                                    var $7332 = self.path;
                                    var $7333 = Kind$Term$equal$hole$($7332, _a$1);
                                    var $7331 = $7333;
                                    break;
                                case 'Kind.Term.var':
                                case 'Kind.Term.ref':
                                case 'Kind.Term.typ':
                                case 'Kind.Term.all':
                                case 'Kind.Term.lam':
                                case 'Kind.Term.app':
                                case 'Kind.Term.let':
                                case 'Kind.Term.def':
                                case 'Kind.Term.ann':
                                case 'Kind.Term.gol':
                                case 'Kind.Term.nat':
                                case 'Kind.Term.chr':
                                case 'Kind.Term.str':
                                case 'Kind.Term.cse':
                                case 'Kind.Term.ori':
                                    var $7334 = Kind$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7331 = $7334;
                                    break;
                            };
                            var $7211 = $7331;
                            break;
                        case 'Kind.Term.def':
                        case 'Kind.Term.ann':
                        case 'Kind.Term.gol':
                            var self = _b1$9;
                            switch (self._) {
                                case 'Kind.Term.hol':
                                    var $7336 = self.path;
                                    var $7337 = Kind$Term$equal$hole$($7336, _a$1);
                                    var $7335 = $7337;
                                    break;
                                case 'Kind.Term.var':
                                case 'Kind.Term.ref':
                                case 'Kind.Term.typ':
                                case 'Kind.Term.all':
                                case 'Kind.Term.lam':
                                case 'Kind.Term.app':
                                case 'Kind.Term.let':
                                case 'Kind.Term.def':
                                case 'Kind.Term.ann':
                                case 'Kind.Term.gol':
                                case 'Kind.Term.nat':
                                case 'Kind.Term.chr':
                                case 'Kind.Term.str':
                                case 'Kind.Term.cse':
                                case 'Kind.Term.ori':
                                    var $7338 = Kind$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7335 = $7338;
                                    break;
                            };
                            var $7211 = $7335;
                            break;
                        case 'Kind.Term.cse':
                            var self = _b1$9;
                            switch (self._) {
                                case 'Kind.Term.hol':
                                    var $7340 = self.path;
                                    var $7341 = Kind$Term$equal$hole$($7340, _a$1);
                                    var $7339 = $7341;
                                    break;
                                case 'Kind.Term.var':
                                case 'Kind.Term.ref':
                                case 'Kind.Term.typ':
                                case 'Kind.Term.all':
                                case 'Kind.Term.lam':
                                case 'Kind.Term.app':
                                case 'Kind.Term.let':
                                case 'Kind.Term.def':
                                case 'Kind.Term.ann':
                                case 'Kind.Term.gol':
                                case 'Kind.Term.nat':
                                case 'Kind.Term.chr':
                                case 'Kind.Term.str':
                                case 'Kind.Term.cse':
                                case 'Kind.Term.ori':
                                    var $7342 = Kind$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7339 = $7342;
                                    break;
                            };
                            var $7211 = $7339;
                            break;
                    };
                    var $7201 = $7211;
                };
                var $7199 = $7201;
            };
            var $7197 = $7199;
        };
        return $7197;
    };
    const Kind$Term$equal$go = x0 => x1 => x2 => x3 => x4 => Kind$Term$equal$go$(x0, x1, x2, x3, x4);
    const BitsSet$new = BitsMap$new;

    function BitsSet$mut$new$(_a$1) {
        var $7343 = BitsSet$new;
        return $7343;
    };
    const BitsSet$mut$new = x0 => BitsSet$mut$new$(x0);

    function Kind$Term$check$(_term$1, _type$2, _defs$3, _ctx$4, _path$5, _orig$6) {
        var self = _term$1;
        switch (self._) {
            case 'Kind.Term.var':
                var $7345 = self.name;
                var $7346 = self.indx;
                var self = List$at_last$($7346, _ctx$4);
                switch (self._) {
                    case 'Maybe.some':
                        var $7348 = self.value;
                        var $7349 = Kind$Check$result$(Maybe$some$((() => {
                            var self = $7348;
                            switch (self._) {
                                case 'Pair.new':
                                    var $7350 = self.snd;
                                    var $7351 = $7350;
                                    return $7351;
                            };
                        })()), List$nil);
                        var $7347 = $7349;
                        break;
                    case 'Maybe.none':
                        var $7352 = Kind$Check$result$(_type$2, List$cons$(Kind$Error$undefined_reference$(_orig$6, $7345), List$nil));
                        var $7347 = $7352;
                        break;
                };
                var self = $7347;
                break;
            case 'Kind.Term.ref':
                var $7353 = self.name;
                var self = Kind$Map$get$($7353, _defs$3);
                switch (self._) {
                    case 'Maybe.some':
                        var $7355 = self.value;
                        var self = $7355;
                        switch (self._) {
                            case 'Kind.Def.new':
                                var $7357 = self.name;
                                var $7358 = self.term;
                                var $7359 = self.type;
                                var $7360 = self.stat;
                                var _ref_name$18 = $7357;
                                var _ref_type$19 = $7359;
                                var _ref_term$20 = $7358;
                                var _ref_stat$21 = $7360;
                                var self = _ref_stat$21;
                                switch (self._) {
                                    case 'Kind.Status.init':
                                        var $7362 = Kind$Check$result$(Maybe$some$(_ref_type$19), List$cons$(Kind$Error$waiting$(_ref_name$18), List$nil));
                                        var $7361 = $7362;
                                        break;
                                    case 'Kind.Status.wait':
                                    case 'Kind.Status.done':
                                        var $7363 = Kind$Check$result$(Maybe$some$(_ref_type$19), List$nil);
                                        var $7361 = $7363;
                                        break;
                                    case 'Kind.Status.fail':
                                        var $7364 = Kind$Check$result$(Maybe$some$(_ref_type$19), List$cons$(Kind$Error$indirect$(_ref_name$18), List$nil));
                                        var $7361 = $7364;
                                        break;
                                };
                                var $7356 = $7361;
                                break;
                        };
                        var $7354 = $7356;
                        break;
                    case 'Maybe.none':
                        var $7365 = Kind$Check$result$(_type$2, List$cons$(Kind$Error$undefined_reference$(_orig$6, $7353), List$nil));
                        var $7354 = $7365;
                        break;
                };
                var self = $7354;
                break;
            case 'Kind.Term.all':
                var $7366 = self.self;
                var $7367 = self.name;
                var $7368 = self.xtyp;
                var $7369 = self.body;
                var _ctx_size$12 = (list_length(_ctx$4));
                var _self_var$13 = Kind$Term$var$($7366, _ctx_size$12);
                var _body_var$14 = Kind$Term$var$($7367, Nat$succ$(_ctx_size$12));
                var _body_ctx$15 = List$cons$(Pair$new$($7367, $7368), List$cons$(Pair$new$($7366, _term$1), _ctx$4));
                var self = Kind$Term$check$($7368, Maybe$some$(Kind$Term$typ), _defs$3, _ctx$4, Kind$MPath$o$(_path$5), _orig$6);
                switch (self._) {
                    case 'Kind.Check.result':
                        var $7371 = self.value;
                        var $7372 = self.errors;
                        var self = $7371;
                        switch (self._) {
                            case 'Maybe.none':
                                var $7374 = Kind$Check$result$(Maybe$none, $7372);
                                var $7373 = $7374;
                                break;
                            case 'Maybe.some':
                                var self = Kind$Term$check$($7369(_self_var$13)(_body_var$14), Maybe$some$(Kind$Term$typ), _defs$3, _body_ctx$15, Kind$MPath$i$(_path$5), _orig$6);
                                switch (self._) {
                                    case 'Kind.Check.result':
                                        var $7376 = self.value;
                                        var $7377 = self.errors;
                                        var self = $7376;
                                        switch (self._) {
                                            case 'Maybe.none':
                                                var $7379 = Kind$Check$result$(Maybe$none, $7377);
                                                var $7378 = $7379;
                                                break;
                                            case 'Maybe.some':
                                                var self = Kind$Check$result$(Maybe$some$(Kind$Term$typ), List$nil);
                                                switch (self._) {
                                                    case 'Kind.Check.result':
                                                        var $7381 = self.value;
                                                        var $7382 = self.errors;
                                                        var $7383 = Kind$Check$result$($7381, List$concat$($7377, $7382));
                                                        var $7380 = $7383;
                                                        break;
                                                };
                                                var $7378 = $7380;
                                                break;
                                        };
                                        var self = $7378;
                                        break;
                                };
                                switch (self._) {
                                    case 'Kind.Check.result':
                                        var $7384 = self.value;
                                        var $7385 = self.errors;
                                        var $7386 = Kind$Check$result$($7384, List$concat$($7372, $7385));
                                        var $7375 = $7386;
                                        break;
                                };
                                var $7373 = $7375;
                                break;
                        };
                        var $7370 = $7373;
                        break;
                };
                var self = $7370;
                break;
            case 'Kind.Term.lam':
                var $7387 = self.name;
                var $7388 = self.body;
                var self = _type$2;
                switch (self._) {
                    case 'Maybe.some':
                        var $7390 = self.value;
                        var _typv$10 = Kind$Term$reduce$($7390, _defs$3);
                        var self = _typv$10;
                        switch (self._) {
                            case 'Kind.Term.all':
                                var $7392 = self.xtyp;
                                var $7393 = self.body;
                                var _ctx_size$16 = (list_length(_ctx$4));
                                var _self_var$17 = _term$1;
                                var _body_var$18 = Kind$Term$var$($7387, _ctx_size$16);
                                var _body_typ$19 = $7393(_self_var$17)(_body_var$18);
                                var _body_ctx$20 = List$cons$(Pair$new$($7387, $7392), _ctx$4);
                                var self = Kind$Term$check$($7388(_body_var$18), Maybe$some$(_body_typ$19), _defs$3, _body_ctx$20, Kind$MPath$o$(_path$5), _orig$6);
                                switch (self._) {
                                    case 'Kind.Check.result':
                                        var $7395 = self.value;
                                        var $7396 = self.errors;
                                        var self = $7395;
                                        switch (self._) {
                                            case 'Maybe.none':
                                                var $7398 = Kind$Check$result$(Maybe$none, $7396);
                                                var $7397 = $7398;
                                                break;
                                            case 'Maybe.some':
                                                var self = Kind$Check$result$(Maybe$some$($7390), List$nil);
                                                switch (self._) {
                                                    case 'Kind.Check.result':
                                                        var $7400 = self.value;
                                                        var $7401 = self.errors;
                                                        var $7402 = Kind$Check$result$($7400, List$concat$($7396, $7401));
                                                        var $7399 = $7402;
                                                        break;
                                                };
                                                var $7397 = $7399;
                                                break;
                                        };
                                        var $7394 = $7397;
                                        break;
                                };
                                var $7391 = $7394;
                                break;
                            case 'Kind.Term.var':
                            case 'Kind.Term.lam':
                            case 'Kind.Term.app':
                            case 'Kind.Term.ori':
                                var _expected$13 = Either$left$("function");
                                var _detected$14 = Either$right$($7390);
                                var $7403 = Kind$Check$result$(_type$2, List$cons$(Kind$Error$type_mismatch$(_orig$6, _expected$13, _detected$14, _ctx$4), List$nil));
                                var $7391 = $7403;
                                break;
                            case 'Kind.Term.ref':
                            case 'Kind.Term.hol':
                            case 'Kind.Term.nat':
                            case 'Kind.Term.chr':
                            case 'Kind.Term.str':
                                var _expected$12 = Either$left$("function");
                                var _detected$13 = Either$right$($7390);
                                var $7404 = Kind$Check$result$(_type$2, List$cons$(Kind$Error$type_mismatch$(_orig$6, _expected$12, _detected$13, _ctx$4), List$nil));
                                var $7391 = $7404;
                                break;
                            case 'Kind.Term.typ':
                                var _expected$11 = Either$left$("function");
                                var _detected$12 = Either$right$($7390);
                                var $7405 = Kind$Check$result$(_type$2, List$cons$(Kind$Error$type_mismatch$(_orig$6, _expected$11, _detected$12, _ctx$4), List$nil));
                                var $7391 = $7405;
                                break;
                            case 'Kind.Term.let':
                            case 'Kind.Term.def':
                            case 'Kind.Term.ann':
                            case 'Kind.Term.gol':
                                var _expected$14 = Either$left$("function");
                                var _detected$15 = Either$right$($7390);
                                var $7406 = Kind$Check$result$(_type$2, List$cons$(Kind$Error$type_mismatch$(_orig$6, _expected$14, _detected$15, _ctx$4), List$nil));
                                var $7391 = $7406;
                                break;
                            case 'Kind.Term.cse':
                                var _expected$17 = Either$left$("function");
                                var _detected$18 = Either$right$($7390);
                                var $7407 = Kind$Check$result$(_type$2, List$cons$(Kind$Error$type_mismatch$(_orig$6, _expected$17, _detected$18, _ctx$4), List$nil));
                                var $7391 = $7407;
                                break;
                        };
                        var $7389 = $7391;
                        break;
                    case 'Maybe.none':
                        var _lam_type$9 = Kind$Term$hol$(Bits$e);
                        var _lam_term$10 = Kind$Term$ann$(Bool$false, _term$1, _lam_type$9);
                        var $7408 = Kind$Check$result$(_type$2, List$cons$(Kind$Error$patch$(Kind$MPath$to_bits$(_path$5), _lam_term$10), List$nil));
                        var $7389 = $7408;
                        break;
                };
                var self = $7389;
                break;
            case 'Kind.Term.app':
                var $7409 = self.func;
                var $7410 = self.argm;
                var self = Kind$Term$check$($7409, Maybe$none, _defs$3, _ctx$4, Kind$MPath$o$(_path$5), _orig$6);
                switch (self._) {
                    case 'Kind.Check.result':
                        var $7412 = self.value;
                        var $7413 = self.errors;
                        var self = $7412;
                        switch (self._) {
                            case 'Maybe.some':
                                var $7415 = self.value;
                                var _func_typ$12 = Kind$Term$reduce$($7415, _defs$3);
                                var self = _func_typ$12;
                                switch (self._) {
                                    case 'Kind.Term.all':
                                        var $7417 = self.xtyp;
                                        var $7418 = self.body;
                                        var self = Kind$Term$check$($7410, Maybe$some$($7417), _defs$3, _ctx$4, Kind$MPath$i$(_path$5), _orig$6);
                                        switch (self._) {
                                            case 'Kind.Check.result':
                                                var $7420 = self.value;
                                                var $7421 = self.errors;
                                                var self = $7420;
                                                switch (self._) {
                                                    case 'Maybe.none':
                                                        var $7423 = Kind$Check$result$(Maybe$none, $7421);
                                                        var $7422 = $7423;
                                                        break;
                                                    case 'Maybe.some':
                                                        var self = Kind$Check$result$(Maybe$some$($7418($7409)($7410)), List$nil);
                                                        switch (self._) {
                                                            case 'Kind.Check.result':
                                                                var $7425 = self.value;
                                                                var $7426 = self.errors;
                                                                var $7427 = Kind$Check$result$($7425, List$concat$($7421, $7426));
                                                                var $7424 = $7427;
                                                                break;
                                                        };
                                                        var $7422 = $7424;
                                                        break;
                                                };
                                                var $7419 = $7422;
                                                break;
                                        };
                                        var self = $7419;
                                        break;
                                    case 'Kind.Term.var':
                                    case 'Kind.Term.lam':
                                    case 'Kind.Term.app':
                                    case 'Kind.Term.ori':
                                        var _expected$15 = Either$left$("function");
                                        var _detected$16 = Either$right$(_func_typ$12);
                                        var self = $7409;
                                        switch (self._) {
                                            case 'Kind.Term.ori':
                                                var $7429 = self.orig;
                                                var $7430 = Maybe$some$($7429);
                                                var _orig$17 = $7430;
                                                break;
                                            case 'Kind.Term.var':
                                            case 'Kind.Term.ref':
                                            case 'Kind.Term.typ':
                                            case 'Kind.Term.all':
                                            case 'Kind.Term.lam':
                                            case 'Kind.Term.app':
                                            case 'Kind.Term.let':
                                            case 'Kind.Term.def':
                                            case 'Kind.Term.ann':
                                            case 'Kind.Term.gol':
                                            case 'Kind.Term.hol':
                                            case 'Kind.Term.nat':
                                            case 'Kind.Term.chr':
                                            case 'Kind.Term.str':
                                            case 'Kind.Term.cse':
                                                var $7431 = _orig$6;
                                                var _orig$17 = $7431;
                                                break;
                                        };
                                        var $7428 = Kind$Check$result$(_type$2, List$cons$(Kind$Error$type_mismatch$(_orig$17, _expected$15, _detected$16, _ctx$4), List$nil));
                                        var self = $7428;
                                        break;
                                    case 'Kind.Term.ref':
                                    case 'Kind.Term.hol':
                                    case 'Kind.Term.nat':
                                    case 'Kind.Term.chr':
                                    case 'Kind.Term.str':
                                        var _expected$14 = Either$left$("function");
                                        var _detected$15 = Either$right$(_func_typ$12);
                                        var self = $7409;
                                        switch (self._) {
                                            case 'Kind.Term.ori':
                                                var $7433 = self.orig;
                                                var $7434 = Maybe$some$($7433);
                                                var _orig$16 = $7434;
                                                break;
                                            case 'Kind.Term.var':
                                            case 'Kind.Term.ref':
                                            case 'Kind.Term.typ':
                                            case 'Kind.Term.all':
                                            case 'Kind.Term.lam':
                                            case 'Kind.Term.app':
                                            case 'Kind.Term.let':
                                            case 'Kind.Term.def':
                                            case 'Kind.Term.ann':
                                            case 'Kind.Term.gol':
                                            case 'Kind.Term.hol':
                                            case 'Kind.Term.nat':
                                            case 'Kind.Term.chr':
                                            case 'Kind.Term.str':
                                            case 'Kind.Term.cse':
                                                var $7435 = _orig$6;
                                                var _orig$16 = $7435;
                                                break;
                                        };
                                        var $7432 = Kind$Check$result$(_type$2, List$cons$(Kind$Error$type_mismatch$(_orig$16, _expected$14, _detected$15, _ctx$4), List$nil));
                                        var self = $7432;
                                        break;
                                    case 'Kind.Term.typ':
                                        var _expected$13 = Either$left$("function");
                                        var _detected$14 = Either$right$(_func_typ$12);
                                        var self = $7409;
                                        switch (self._) {
                                            case 'Kind.Term.ori':
                                                var $7437 = self.orig;
                                                var $7438 = Maybe$some$($7437);
                                                var _orig$15 = $7438;
                                                break;
                                            case 'Kind.Term.var':
                                            case 'Kind.Term.ref':
                                            case 'Kind.Term.typ':
                                            case 'Kind.Term.all':
                                            case 'Kind.Term.lam':
                                            case 'Kind.Term.app':
                                            case 'Kind.Term.let':
                                            case 'Kind.Term.def':
                                            case 'Kind.Term.ann':
                                            case 'Kind.Term.gol':
                                            case 'Kind.Term.hol':
                                            case 'Kind.Term.nat':
                                            case 'Kind.Term.chr':
                                            case 'Kind.Term.str':
                                            case 'Kind.Term.cse':
                                                var $7439 = _orig$6;
                                                var _orig$15 = $7439;
                                                break;
                                        };
                                        var $7436 = Kind$Check$result$(_type$2, List$cons$(Kind$Error$type_mismatch$(_orig$15, _expected$13, _detected$14, _ctx$4), List$nil));
                                        var self = $7436;
                                        break;
                                    case 'Kind.Term.let':
                                    case 'Kind.Term.def':
                                    case 'Kind.Term.ann':
                                    case 'Kind.Term.gol':
                                        var _expected$16 = Either$left$("function");
                                        var _detected$17 = Either$right$(_func_typ$12);
                                        var self = $7409;
                                        switch (self._) {
                                            case 'Kind.Term.ori':
                                                var $7441 = self.orig;
                                                var $7442 = Maybe$some$($7441);
                                                var _orig$18 = $7442;
                                                break;
                                            case 'Kind.Term.var':
                                            case 'Kind.Term.ref':
                                            case 'Kind.Term.typ':
                                            case 'Kind.Term.all':
                                            case 'Kind.Term.lam':
                                            case 'Kind.Term.app':
                                            case 'Kind.Term.let':
                                            case 'Kind.Term.def':
                                            case 'Kind.Term.ann':
                                            case 'Kind.Term.gol':
                                            case 'Kind.Term.hol':
                                            case 'Kind.Term.nat':
                                            case 'Kind.Term.chr':
                                            case 'Kind.Term.str':
                                            case 'Kind.Term.cse':
                                                var $7443 = _orig$6;
                                                var _orig$18 = $7443;
                                                break;
                                        };
                                        var $7440 = Kind$Check$result$(_type$2, List$cons$(Kind$Error$type_mismatch$(_orig$18, _expected$16, _detected$17, _ctx$4), List$nil));
                                        var self = $7440;
                                        break;
                                    case 'Kind.Term.cse':
                                        var _expected$19 = Either$left$("function");
                                        var _detected$20 = Either$right$(_func_typ$12);
                                        var self = $7409;
                                        switch (self._) {
                                            case 'Kind.Term.ori':
                                                var $7445 = self.orig;
                                                var $7446 = Maybe$some$($7445);
                                                var _orig$21 = $7446;
                                                break;
                                            case 'Kind.Term.var':
                                            case 'Kind.Term.ref':
                                            case 'Kind.Term.typ':
                                            case 'Kind.Term.all':
                                            case 'Kind.Term.lam':
                                            case 'Kind.Term.app':
                                            case 'Kind.Term.let':
                                            case 'Kind.Term.def':
                                            case 'Kind.Term.ann':
                                            case 'Kind.Term.gol':
                                            case 'Kind.Term.hol':
                                            case 'Kind.Term.nat':
                                            case 'Kind.Term.chr':
                                            case 'Kind.Term.str':
                                            case 'Kind.Term.cse':
                                                var $7447 = _orig$6;
                                                var _orig$21 = $7447;
                                                break;
                                        };
                                        var $7444 = Kind$Check$result$(_type$2, List$cons$(Kind$Error$type_mismatch$(_orig$21, _expected$19, _detected$20, _ctx$4), List$nil));
                                        var self = $7444;
                                        break;
                                };
                                switch (self._) {
                                    case 'Kind.Check.result':
                                        var $7448 = self.value;
                                        var $7449 = self.errors;
                                        var $7450 = Kind$Check$result$($7448, List$concat$($7413, $7449));
                                        var $7416 = $7450;
                                        break;
                                };
                                var $7414 = $7416;
                                break;
                            case 'Maybe.none':
                                var $7451 = Kind$Check$result$(Maybe$none, $7413);
                                var $7414 = $7451;
                                break;
                        };
                        var $7411 = $7414;
                        break;
                };
                var self = $7411;
                break;
            case 'Kind.Term.let':
                var $7452 = self.name;
                var $7453 = self.expr;
                var $7454 = self.body;
                var _ctx_size$10 = (list_length(_ctx$4));
                var self = Kind$Term$check$($7453, Maybe$none, _defs$3, _ctx$4, Kind$MPath$o$(_path$5), _orig$6);
                switch (self._) {
                    case 'Kind.Check.result':
                        var $7456 = self.value;
                        var $7457 = self.errors;
                        var self = $7456;
                        switch (self._) {
                            case 'Maybe.some':
                                var $7459 = self.value;
                                var _body_val$14 = $7454(Kind$Term$var$($7452, _ctx_size$10));
                                var _body_ctx$15 = List$cons$(Pair$new$($7452, $7459), _ctx$4);
                                var self = Kind$Term$check$(_body_val$14, _type$2, _defs$3, _body_ctx$15, Kind$MPath$i$(_path$5), _orig$6);
                                switch (self._) {
                                    case 'Kind.Check.result':
                                        var $7461 = self.value;
                                        var $7462 = self.errors;
                                        var self = $7461;
                                        switch (self._) {
                                            case 'Maybe.some':
                                                var $7464 = self.value;
                                                var self = Kind$Check$result$(Maybe$some$($7464), List$nil);
                                                switch (self._) {
                                                    case 'Kind.Check.result':
                                                        var $7466 = self.value;
                                                        var $7467 = self.errors;
                                                        var $7468 = Kind$Check$result$($7466, List$concat$($7462, $7467));
                                                        var $7465 = $7468;
                                                        break;
                                                };
                                                var $7463 = $7465;
                                                break;
                                            case 'Maybe.none':
                                                var $7469 = Kind$Check$result$(Maybe$none, $7462);
                                                var $7463 = $7469;
                                                break;
                                        };
                                        var self = $7463;
                                        break;
                                };
                                switch (self._) {
                                    case 'Kind.Check.result':
                                        var $7470 = self.value;
                                        var $7471 = self.errors;
                                        var $7472 = Kind$Check$result$($7470, List$concat$($7457, $7471));
                                        var $7460 = $7472;
                                        break;
                                };
                                var $7458 = $7460;
                                break;
                            case 'Maybe.none':
                                var $7473 = Kind$Check$result$(Maybe$none, $7457);
                                var $7458 = $7473;
                                break;
                        };
                        var $7455 = $7458;
                        break;
                };
                var self = $7455;
                break;
            case 'Kind.Term.def':
                var $7474 = self.name;
                var $7475 = self.expr;
                var $7476 = self.body;
                var _ctx_size$10 = (list_length(_ctx$4));
                var self = Kind$Term$check$($7475, Maybe$none, _defs$3, _ctx$4, Kind$MPath$o$(_path$5), _orig$6);
                switch (self._) {
                    case 'Kind.Check.result':
                        var $7478 = self.value;
                        var $7479 = self.errors;
                        var self = $7478;
                        switch (self._) {
                            case 'Maybe.some':
                                var $7481 = self.value;
                                var _body_val$14 = $7476(Kind$Term$ann$(Bool$true, $7475, $7481));
                                var _body_ctx$15 = List$cons$(Pair$new$($7474, $7481), _ctx$4);
                                var self = Kind$Term$check$(_body_val$14, _type$2, _defs$3, _body_ctx$15, Kind$MPath$i$(_path$5), _orig$6);
                                switch (self._) {
                                    case 'Kind.Check.result':
                                        var $7483 = self.value;
                                        var $7484 = self.errors;
                                        var self = $7483;
                                        switch (self._) {
                                            case 'Maybe.some':
                                                var $7486 = self.value;
                                                var self = Kind$Check$result$(Maybe$some$($7486), List$nil);
                                                switch (self._) {
                                                    case 'Kind.Check.result':
                                                        var $7488 = self.value;
                                                        var $7489 = self.errors;
                                                        var $7490 = Kind$Check$result$($7488, List$concat$($7484, $7489));
                                                        var $7487 = $7490;
                                                        break;
                                                };
                                                var $7485 = $7487;
                                                break;
                                            case 'Maybe.none':
                                                var $7491 = Kind$Check$result$(Maybe$none, $7484);
                                                var $7485 = $7491;
                                                break;
                                        };
                                        var self = $7485;
                                        break;
                                };
                                switch (self._) {
                                    case 'Kind.Check.result':
                                        var $7492 = self.value;
                                        var $7493 = self.errors;
                                        var $7494 = Kind$Check$result$($7492, List$concat$($7479, $7493));
                                        var $7482 = $7494;
                                        break;
                                };
                                var $7480 = $7482;
                                break;
                            case 'Maybe.none':
                                var $7495 = Kind$Check$result$(Maybe$none, $7479);
                                var $7480 = $7495;
                                break;
                        };
                        var $7477 = $7480;
                        break;
                };
                var self = $7477;
                break;
            case 'Kind.Term.ann':
                var $7496 = self.done;
                var $7497 = self.term;
                var $7498 = self.type;
                var self = $7496;
                if (self) {
                    var $7500 = Kind$Check$result$(Maybe$some$($7498), List$nil);
                    var $7499 = $7500;
                } else {
                    var self = Kind$Term$check$($7497, Maybe$some$($7498), _defs$3, _ctx$4, Kind$MPath$o$(_path$5), _orig$6);
                    switch (self._) {
                        case 'Kind.Check.result':
                            var $7502 = self.value;
                            var $7503 = self.errors;
                            var self = $7502;
                            switch (self._) {
                                case 'Maybe.none':
                                    var $7505 = Kind$Check$result$(Maybe$none, $7503);
                                    var $7504 = $7505;
                                    break;
                                case 'Maybe.some':
                                    var self = Kind$Term$check$($7498, Maybe$some$(Kind$Term$typ), _defs$3, _ctx$4, Kind$MPath$i$(_path$5), _orig$6);
                                    switch (self._) {
                                        case 'Kind.Check.result':
                                            var $7507 = self.value;
                                            var $7508 = self.errors;
                                            var self = $7507;
                                            switch (self._) {
                                                case 'Maybe.none':
                                                    var $7510 = Kind$Check$result$(Maybe$none, $7508);
                                                    var $7509 = $7510;
                                                    break;
                                                case 'Maybe.some':
                                                    var self = Kind$Check$result$(Maybe$some$($7498), List$nil);
                                                    switch (self._) {
                                                        case 'Kind.Check.result':
                                                            var $7512 = self.value;
                                                            var $7513 = self.errors;
                                                            var $7514 = Kind$Check$result$($7512, List$concat$($7508, $7513));
                                                            var $7511 = $7514;
                                                            break;
                                                    };
                                                    var $7509 = $7511;
                                                    break;
                                            };
                                            var self = $7509;
                                            break;
                                    };
                                    switch (self._) {
                                        case 'Kind.Check.result':
                                            var $7515 = self.value;
                                            var $7516 = self.errors;
                                            var $7517 = Kind$Check$result$($7515, List$concat$($7503, $7516));
                                            var $7506 = $7517;
                                            break;
                                    };
                                    var $7504 = $7506;
                                    break;
                            };
                            var $7501 = $7504;
                            break;
                    };
                    var $7499 = $7501;
                };
                var self = $7499;
                break;
            case 'Kind.Term.gol':
                var $7518 = self.name;
                var $7519 = self.dref;
                var $7520 = self.verb;
                var $7521 = Kind$Check$result$(_type$2, List$cons$(Kind$Error$show_goal$($7518, $7519, $7520, _type$2, _ctx$4), List$nil));
                var self = $7521;
                break;
            case 'Kind.Term.cse':
                var $7522 = self.expr;
                var $7523 = self.name;
                var $7524 = self.with;
                var $7525 = self.cses;
                var $7526 = self.moti;
                var _expr$13 = $7522;
                var self = Kind$Term$check$(_expr$13, Maybe$none, _defs$3, _ctx$4, Kind$MPath$o$(_path$5), _orig$6);
                switch (self._) {
                    case 'Kind.Check.result':
                        var $7528 = self.value;
                        var $7529 = self.errors;
                        var self = $7528;
                        switch (self._) {
                            case 'Maybe.some':
                                var $7531 = self.value;
                                var self = Kind$Term$check$infer_with_types$($7524, _defs$3, _ctx$4, _path$5, _orig$6);
                                switch (self._) {
                                    case 'Kind.Check.result':
                                        var $7533 = self.value;
                                        var $7534 = self.errors;
                                        var self = $7533;
                                        switch (self._) {
                                            case 'Maybe.some':
                                                var $7536 = self.value;
                                                var _dsug$20 = Kind$Term$desugar_cse$($7522, $7523, $7536, $7525, $7526, $7531, _type$2, _defs$3, _ctx$4);
                                                var self = _dsug$20;
                                                switch (self._) {
                                                    case 'Maybe.some':
                                                        var $7538 = self.value;
                                                        var $7539 = Kind$Check$result$(_type$2, List$cons$(Kind$Error$patch$(Kind$MPath$to_bits$(_path$5), $7538), List$nil));
                                                        var self = $7539;
                                                        break;
                                                    case 'Maybe.none':
                                                        var $7540 = Kind$Check$result$(_type$2, List$cons$(Kind$Error$cant_infer$(_orig$6, _term$1, _ctx$4), List$nil));
                                                        var self = $7540;
                                                        break;
                                                };
                                                switch (self._) {
                                                    case 'Kind.Check.result':
                                                        var $7541 = self.value;
                                                        var $7542 = self.errors;
                                                        var $7543 = Kind$Check$result$($7541, List$concat$($7534, $7542));
                                                        var $7537 = $7543;
                                                        break;
                                                };
                                                var $7535 = $7537;
                                                break;
                                            case 'Maybe.none':
                                                var $7544 = Kind$Check$result$(Maybe$none, $7534);
                                                var $7535 = $7544;
                                                break;
                                        };
                                        var self = $7535;
                                        break;
                                };
                                switch (self._) {
                                    case 'Kind.Check.result':
                                        var $7545 = self.value;
                                        var $7546 = self.errors;
                                        var $7547 = Kind$Check$result$($7545, List$concat$($7529, $7546));
                                        var $7532 = $7547;
                                        break;
                                };
                                var $7530 = $7532;
                                break;
                            case 'Maybe.none':
                                var $7548 = Kind$Check$result$(Maybe$none, $7529);
                                var $7530 = $7548;
                                break;
                        };
                        var $7527 = $7530;
                        break;
                };
                var self = $7527;
                break;
            case 'Kind.Term.ori':
                var $7549 = self.orig;
                var $7550 = self.expr;
                var $7551 = Kind$Term$check$($7550, _type$2, _defs$3, _ctx$4, _path$5, Maybe$some$($7549));
                var self = $7551;
                break;
            case 'Kind.Term.typ':
                var $7552 = Kind$Check$result$(Maybe$some$(Kind$Term$typ), List$nil);
                var self = $7552;
                break;
            case 'Kind.Term.hol':
                var $7553 = Kind$Check$result$(_type$2, List$nil);
                var self = $7553;
                break;
            case 'Kind.Term.nat':
                var $7554 = Kind$Check$result$(Maybe$some$(Kind$Term$ref$("Nat")), List$nil);
                var self = $7554;
                break;
            case 'Kind.Term.chr':
                var $7555 = Kind$Check$result$(Maybe$some$(Kind$Term$ref$("Char")), List$nil);
                var self = $7555;
                break;
            case 'Kind.Term.str':
                var $7556 = Kind$Check$result$(Maybe$some$(Kind$Term$ref$("String")), List$nil);
                var self = $7556;
                break;
        };
        switch (self._) {
            case 'Kind.Check.result':
                var $7557 = self.value;
                var $7558 = self.errors;
                var self = $7557;
                switch (self._) {
                    case 'Maybe.some':
                        var $7560 = self.value;
                        var self = _type$2;
                        switch (self._) {
                            case 'Maybe.some':
                                var $7562 = self.value;
                                var self = Kind$Term$equal$go$($7562, $7560, _defs$3, (list_length(_ctx$4)), BitsSet$mut$new$(Unit$new));
                                switch (self._) {
                                    case 'Kind.Check.result':
                                        var $7564 = self.value;
                                        var $7565 = self.errors;
                                        var self = $7564;
                                        switch (self._) {
                                            case 'Maybe.some':
                                                var $7567 = self.value;
                                                var self = $7567;
                                                if (self) {
                                                    var $7569 = Kind$Check$result$(Maybe$some$($7562), List$nil);
                                                    var self = $7569;
                                                } else {
                                                    var $7570 = Kind$Check$result$(_type$2, List$cons$(Kind$Error$type_mismatch$(_orig$6, Either$right$($7562), Either$right$($7560), _ctx$4), List$nil));
                                                    var self = $7570;
                                                };
                                                switch (self._) {
                                                    case 'Kind.Check.result':
                                                        var $7571 = self.value;
                                                        var $7572 = self.errors;
                                                        var $7573 = Kind$Check$result$($7571, List$concat$($7565, $7572));
                                                        var $7568 = $7573;
                                                        break;
                                                };
                                                var $7566 = $7568;
                                                break;
                                            case 'Maybe.none':
                                                var $7574 = Kind$Check$result$(Maybe$none, $7565);
                                                var $7566 = $7574;
                                                break;
                                        };
                                        var $7563 = $7566;
                                        break;
                                };
                                var self = $7563;
                                break;
                            case 'Maybe.none':
                                var $7575 = Kind$Check$result$(Maybe$some$($7560), List$nil);
                                var self = $7575;
                                break;
                        };
                        switch (self._) {
                            case 'Kind.Check.result':
                                var $7576 = self.value;
                                var $7577 = self.errors;
                                var $7578 = Kind$Check$result$($7576, List$concat$($7558, $7577));
                                var $7561 = $7578;
                                break;
                        };
                        var $7559 = $7561;
                        break;
                    case 'Maybe.none':
                        var $7579 = Kind$Check$result$(Maybe$none, $7558);
                        var $7559 = $7579;
                        break;
                };
                var $7344 = $7559;
                break;
        };
        return $7344;
    };
    const Kind$Term$check = x0 => x1 => x2 => x3 => x4 => x5 => Kind$Term$check$(x0, x1, x2, x3, x4, x5);

    function Kind$Path$nil$(_x$1) {
        var $7580 = _x$1;
        return $7580;
    };
    const Kind$Path$nil = x0 => Kind$Path$nil$(x0);
    const Kind$MPath$nil = Maybe$some$(Kind$Path$nil);

    function List$is_empty$(_list$2) {
        var self = _list$2;
        switch (self._) {
            case 'List.nil':
                var $7582 = Bool$true;
                var $7581 = $7582;
                break;
            case 'List.cons':
                var $7583 = Bool$false;
                var $7581 = $7583;
                break;
        };
        return $7581;
    };
    const List$is_empty = x0 => List$is_empty$(x0);

    function Kind$Term$patch_at$(_path$1, _term$2, _fn$3) {
        var self = _term$2;
        switch (self._) {
            case 'Kind.Term.all':
                var $7585 = self.eras;
                var $7586 = self.self;
                var $7587 = self.name;
                var $7588 = self.xtyp;
                var $7589 = self.body;
                var self = _path$1;
                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                    case 'o':
                        var $7591 = self.slice(0, -1);
                        var $7592 = Kind$Term$all$($7585, $7586, $7587, Kind$Term$patch_at$($7591, $7588, _fn$3), $7589);
                        var $7590 = $7592;
                        break;
                    case 'i':
                        var $7593 = self.slice(0, -1);
                        var $7594 = Kind$Term$all$($7585, $7586, $7587, $7588, (_s$10 => _x$11 => {
                            var $7595 = Kind$Term$patch_at$($7593, $7589(_s$10)(_x$11), _fn$3);
                            return $7595;
                        }));
                        var $7590 = $7594;
                        break;
                    case 'e':
                        var $7596 = _fn$3(_term$2);
                        var $7590 = $7596;
                        break;
                };
                var $7584 = $7590;
                break;
            case 'Kind.Term.lam':
                var $7597 = self.name;
                var $7598 = self.body;
                var self = _path$1;
                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                    case 'e':
                        var $7600 = _fn$3(_term$2);
                        var $7599 = $7600;
                        break;
                    case 'o':
                    case 'i':
                        var $7601 = Kind$Term$lam$($7597, (_x$7 => {
                            var $7602 = Kind$Term$patch_at$(Bits$tail$(_path$1), $7598(_x$7), _fn$3);
                            return $7602;
                        }));
                        var $7599 = $7601;
                        break;
                };
                var $7584 = $7599;
                break;
            case 'Kind.Term.app':
                var $7603 = self.func;
                var $7604 = self.argm;
                var self = _path$1;
                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                    case 'o':
                        var $7606 = self.slice(0, -1);
                        var $7607 = Kind$Term$app$(Kind$Term$patch_at$($7606, $7603, _fn$3), $7604);
                        var $7605 = $7607;
                        break;
                    case 'i':
                        var $7608 = self.slice(0, -1);
                        var $7609 = Kind$Term$app$($7603, Kind$Term$patch_at$($7608, $7604, _fn$3));
                        var $7605 = $7609;
                        break;
                    case 'e':
                        var $7610 = _fn$3(_term$2);
                        var $7605 = $7610;
                        break;
                };
                var $7584 = $7605;
                break;
            case 'Kind.Term.let':
                var $7611 = self.name;
                var $7612 = self.expr;
                var $7613 = self.body;
                var self = _path$1;
                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                    case 'o':
                        var $7615 = self.slice(0, -1);
                        var $7616 = Kind$Term$let$($7611, Kind$Term$patch_at$($7615, $7612, _fn$3), $7613);
                        var $7614 = $7616;
                        break;
                    case 'i':
                        var $7617 = self.slice(0, -1);
                        var $7618 = Kind$Term$let$($7611, $7612, (_x$8 => {
                            var $7619 = Kind$Term$patch_at$($7617, $7613(_x$8), _fn$3);
                            return $7619;
                        }));
                        var $7614 = $7618;
                        break;
                    case 'e':
                        var $7620 = _fn$3(_term$2);
                        var $7614 = $7620;
                        break;
                };
                var $7584 = $7614;
                break;
            case 'Kind.Term.def':
                var $7621 = self.name;
                var $7622 = self.expr;
                var $7623 = self.body;
                var self = _path$1;
                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                    case 'o':
                        var $7625 = self.slice(0, -1);
                        var $7626 = Kind$Term$def$($7621, Kind$Term$patch_at$($7625, $7622, _fn$3), $7623);
                        var $7624 = $7626;
                        break;
                    case 'i':
                        var $7627 = self.slice(0, -1);
                        var $7628 = Kind$Term$def$($7621, $7622, (_x$8 => {
                            var $7629 = Kind$Term$patch_at$($7627, $7623(_x$8), _fn$3);
                            return $7629;
                        }));
                        var $7624 = $7628;
                        break;
                    case 'e':
                        var $7630 = _fn$3(_term$2);
                        var $7624 = $7630;
                        break;
                };
                var $7584 = $7624;
                break;
            case 'Kind.Term.ann':
                var $7631 = self.done;
                var $7632 = self.term;
                var $7633 = self.type;
                var self = _path$1;
                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                    case 'o':
                        var $7635 = self.slice(0, -1);
                        var $7636 = Kind$Term$ann$($7631, Kind$Term$patch_at$($7635, $7632, _fn$3), $7633);
                        var $7634 = $7636;
                        break;
                    case 'i':
                        var $7637 = self.slice(0, -1);
                        var $7638 = Kind$Term$ann$($7631, $7632, Kind$Term$patch_at$($7637, $7633, _fn$3));
                        var $7634 = $7638;
                        break;
                    case 'e':
                        var $7639 = _fn$3(_term$2);
                        var $7634 = $7639;
                        break;
                };
                var $7584 = $7634;
                break;
            case 'Kind.Term.ori':
                var $7640 = self.orig;
                var $7641 = self.expr;
                var $7642 = Kind$Term$ori$($7640, Kind$Term$patch_at$(_path$1, $7641, _fn$3));
                var $7584 = $7642;
                break;
            case 'Kind.Term.var':
                var self = _path$1;
                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                    case 'e':
                        var $7644 = _fn$3(_term$2);
                        var $7643 = $7644;
                        break;
                    case 'o':
                    case 'i':
                        var $7645 = _term$2;
                        var $7643 = $7645;
                        break;
                };
                var $7584 = $7643;
                break;
            case 'Kind.Term.ref':
            case 'Kind.Term.hol':
            case 'Kind.Term.nat':
            case 'Kind.Term.chr':
            case 'Kind.Term.str':
                var self = _path$1;
                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                    case 'e':
                        var $7647 = _fn$3(_term$2);
                        var $7646 = $7647;
                        break;
                    case 'o':
                    case 'i':
                        var $7648 = _term$2;
                        var $7646 = $7648;
                        break;
                };
                var $7584 = $7646;
                break;
            case 'Kind.Term.typ':
                var self = _path$1;
                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                    case 'e':
                        var $7650 = _fn$3(_term$2);
                        var $7649 = $7650;
                        break;
                    case 'o':
                    case 'i':
                        var $7651 = _term$2;
                        var $7649 = $7651;
                        break;
                };
                var $7584 = $7649;
                break;
            case 'Kind.Term.gol':
                var self = _path$1;
                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                    case 'e':
                        var $7653 = _fn$3(_term$2);
                        var $7652 = $7653;
                        break;
                    case 'o':
                    case 'i':
                        var $7654 = _term$2;
                        var $7652 = $7654;
                        break;
                };
                var $7584 = $7652;
                break;
            case 'Kind.Term.cse':
                var self = _path$1;
                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                    case 'e':
                        var $7656 = _fn$3(_term$2);
                        var $7655 = $7656;
                        break;
                    case 'o':
                    case 'i':
                        var $7657 = _term$2;
                        var $7655 = $7657;
                        break;
                };
                var $7584 = $7655;
                break;
        };
        return $7584;
    };
    const Kind$Term$patch_at = x0 => x1 => x2 => Kind$Term$patch_at$(x0, x1, x2);

    function Kind$Synth$fix$(_file$1, _code$2, _orig$3, _name$4, _term$5, _type$6, _isct$7, _arit$8, _defs$9, _errs$10, _fixd$11) {
        var self = _errs$10;
        switch (self._) {
            case 'List.cons':
                var $7659 = self.head;
                var $7660 = self.tail;
                var self = $7659;
                switch (self._) {
                    case 'Kind.Error.waiting':
                        var $7662 = self.name;
                        var $7663 = IO$monad$((_m$bind$15 => _m$pure$16 => {
                            var $7664 = _m$bind$15;
                            return $7664;
                        }))(Kind$Synth$one$($7662, _defs$9))((_new_defs$15 => {
                            var self = _new_defs$15;
                            switch (self._) {
                                case 'Maybe.some':
                                    var $7666 = self.value;
                                    var $7667 = Kind$Synth$fix$(_file$1, _code$2, _orig$3, _name$4, _term$5, _type$6, _isct$7, _arit$8, $7666, $7660, Bool$true);
                                    var $7665 = $7667;
                                    break;
                                case 'Maybe.none':
                                    var $7668 = Kind$Synth$fix$(_file$1, _code$2, _orig$3, _name$4, _term$5, _type$6, _isct$7, _arit$8, _defs$9, $7660, _fixd$11);
                                    var $7665 = $7668;
                                    break;
                            };
                            return $7665;
                        }));
                        var $7661 = $7663;
                        break;
                    case 'Kind.Error.patch':
                        var $7669 = self.path;
                        var $7670 = self.term;
                        var self = $7669;
                        switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                            case 'o':
                                var $7672 = self.slice(0, -1);
                                var _term$17 = Kind$Term$patch_at$($7672, _term$5, (_x$17 => {
                                    var $7674 = $7670;
                                    return $7674;
                                }));
                                var $7673 = Kind$Synth$fix$(_file$1, _code$2, _orig$3, _name$4, _term$17, _type$6, _isct$7, _arit$8, _defs$9, $7660, Bool$true);
                                var $7671 = $7673;
                                break;
                            case 'i':
                                var $7675 = self.slice(0, -1);
                                var _type$17 = Kind$Term$patch_at$($7675, _type$6, (_x$17 => {
                                    var $7677 = $7670;
                                    return $7677;
                                }));
                                var $7676 = Kind$Synth$fix$(_file$1, _code$2, _orig$3, _name$4, _term$5, _type$17, _isct$7, _arit$8, _defs$9, $7660, Bool$true);
                                var $7671 = $7676;
                                break;
                            case 'e':
                                var $7678 = IO$monad$((_m$bind$16 => _m$pure$17 => {
                                    var $7679 = _m$pure$17;
                                    return $7679;
                                }))(Maybe$none);
                                var $7671 = $7678;
                                break;
                        };
                        var $7661 = $7671;
                        break;
                    case 'Kind.Error.undefined_reference':
                        var $7680 = self.name;
                        var $7681 = IO$monad$((_m$bind$16 => _m$pure$17 => {
                            var $7682 = _m$bind$16;
                            return $7682;
                        }))(Kind$Synth$one$($7680, _defs$9))((_new_defs$16 => {
                            var self = _new_defs$16;
                            switch (self._) {
                                case 'Maybe.some':
                                    var $7684 = self.value;
                                    var $7685 = Kind$Synth$fix$(_file$1, _code$2, _orig$3, _name$4, _term$5, _type$6, _isct$7, _arit$8, $7684, $7660, Bool$true);
                                    var $7683 = $7685;
                                    break;
                                case 'Maybe.none':
                                    var $7686 = Kind$Synth$fix$(_file$1, _code$2, _orig$3, _name$4, _term$5, _type$6, _isct$7, _arit$8, _defs$9, $7660, _fixd$11);
                                    var $7683 = $7686;
                                    break;
                            };
                            return $7683;
                        }));
                        var $7661 = $7681;
                        break;
                    case 'Kind.Error.type_mismatch':
                    case 'Kind.Error.show_goal':
                    case 'Kind.Error.indirect':
                    case 'Kind.Error.cant_infer':
                        var $7687 = Kind$Synth$fix$(_file$1, _code$2, _orig$3, _name$4, _term$5, _type$6, _isct$7, _arit$8, _defs$9, $7660, _fixd$11);
                        var $7661 = $7687;
                        break;
                };
                var $7658 = $7661;
                break;
            case 'List.nil':
                var self = _fixd$11;
                if (self) {
                    var _type$12 = Kind$Term$bind$(List$nil, (_x$12 => {
                        var $7690 = (_x$12 + '1');
                        return $7690;
                    }), _type$6);
                    var _term$13 = Kind$Term$bind$(List$nil, (_x$13 => {
                        var $7691 = (_x$13 + '0');
                        return $7691;
                    }), _term$5);
                    var _defs$14 = Kind$Map$set$(_name$4, Kind$Def$new$(_file$1, _code$2, _orig$3, _name$4, _term$13, _type$12, _isct$7, _arit$8, Kind$Status$init), _defs$9);
                    var $7689 = IO$monad$((_m$bind$15 => _m$pure$16 => {
                        var $7692 = _m$pure$16;
                        return $7692;
                    }))(Maybe$some$(_defs$14));
                    var $7688 = $7689;
                } else {
                    var $7693 = IO$monad$((_m$bind$12 => _m$pure$13 => {
                        var $7694 = _m$pure$13;
                        return $7694;
                    }))(Maybe$none);
                    var $7688 = $7693;
                };
                var $7658 = $7688;
                break;
        };
        return $7658;
    };
    const Kind$Synth$fix = x0 => x1 => x2 => x3 => x4 => x5 => x6 => x7 => x8 => x9 => x10 => Kind$Synth$fix$(x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10);

    function Kind$Status$fail$(_errors$1) {
        var $7695 = ({
            _: 'Kind.Status.fail',
            'errors': _errors$1
        });
        return $7695;
    };
    const Kind$Status$fail = x0 => Kind$Status$fail$(x0);

    function Kind$Synth$one$(_name$1, _defs$2) {
        var self = Kind$Map$get$(_name$1, _defs$2);
        switch (self._) {
            case 'Maybe.some':
                var $7697 = self.value;
                var self = $7697;
                switch (self._) {
                    case 'Kind.Def.new':
                        var $7699 = self.file;
                        var $7700 = self.code;
                        var $7701 = self.orig;
                        var $7702 = self.name;
                        var $7703 = self.term;
                        var $7704 = self.type;
                        var $7705 = self.isct;
                        var $7706 = self.arit;
                        var $7707 = self.stat;
                        var _file$13 = $7699;
                        var _code$14 = $7700;
                        var _orig$15 = $7701;
                        var _name$16 = $7702;
                        var _term$17 = $7703;
                        var _type$18 = $7704;
                        var _isct$19 = $7705;
                        var _arit$20 = $7706;
                        var _stat$21 = $7707;
                        var self = _stat$21;
                        switch (self._) {
                            case 'Kind.Status.init':
                                var _defs$22 = Kind$Map$set$(_name$16, Kind$Def$new$(_file$13, _code$14, _orig$15, _name$16, _term$17, _type$18, _isct$19, _arit$20, Kind$Status$wait), _defs$2);
                                var self = Kind$Term$check$(_type$18, Maybe$some$(Kind$Term$typ), _defs$22, List$nil, Kind$MPath$i$(Kind$MPath$nil), Maybe$none);
                                switch (self._) {
                                    case 'Kind.Check.result':
                                        var $7710 = self.value;
                                        var $7711 = self.errors;
                                        var self = $7710;
                                        switch (self._) {
                                            case 'Maybe.none':
                                                var $7713 = Kind$Check$result$(Maybe$none, $7711);
                                                var $7712 = $7713;
                                                break;
                                            case 'Maybe.some':
                                                var self = Kind$Term$check$(_term$17, Maybe$some$(_type$18), _defs$22, List$nil, Kind$MPath$o$(Kind$MPath$nil), Maybe$none);
                                                switch (self._) {
                                                    case 'Kind.Check.result':
                                                        var $7715 = self.value;
                                                        var $7716 = self.errors;
                                                        var self = $7715;
                                                        switch (self._) {
                                                            case 'Maybe.none':
                                                                var $7718 = Kind$Check$result$(Maybe$none, $7716);
                                                                var $7717 = $7718;
                                                                break;
                                                            case 'Maybe.some':
                                                                var self = Kind$Check$result$(Maybe$some$(Unit$new), List$nil);
                                                                switch (self._) {
                                                                    case 'Kind.Check.result':
                                                                        var $7720 = self.value;
                                                                        var $7721 = self.errors;
                                                                        var $7722 = Kind$Check$result$($7720, List$concat$($7716, $7721));
                                                                        var $7719 = $7722;
                                                                        break;
                                                                };
                                                                var $7717 = $7719;
                                                                break;
                                                        };
                                                        var self = $7717;
                                                        break;
                                                };
                                                switch (self._) {
                                                    case 'Kind.Check.result':
                                                        var $7723 = self.value;
                                                        var $7724 = self.errors;
                                                        var $7725 = Kind$Check$result$($7723, List$concat$($7711, $7724));
                                                        var $7714 = $7725;
                                                        break;
                                                };
                                                var $7712 = $7714;
                                                break;
                                        };
                                        var _checked$23 = $7712;
                                        break;
                                };
                                var self = _checked$23;
                                switch (self._) {
                                    case 'Kind.Check.result':
                                        var $7726 = self.errors;
                                        var self = List$is_empty$($7726);
                                        if (self) {
                                            var _defs$26 = Kind$Map$def$(_file$13, _code$14, _orig$15, _name$16, _term$17, _type$18, _isct$19, _arit$20, Bool$true, _defs$22);
                                            var $7728 = IO$monad$((_m$bind$27 => _m$pure$28 => {
                                                var $7729 = _m$pure$28;
                                                return $7729;
                                            }))(Maybe$some$(_defs$26));
                                            var $7727 = $7728;
                                        } else {
                                            var $7730 = IO$monad$((_m$bind$26 => _m$pure$27 => {
                                                var $7731 = _m$bind$26;
                                                return $7731;
                                            }))(Kind$Synth$fix$(_file$13, _code$14, _orig$15, _name$16, _term$17, _type$18, _isct$19, _arit$20, _defs$22, $7726, Bool$false))((_fixed$26 => {
                                                var self = _fixed$26;
                                                switch (self._) {
                                                    case 'Maybe.some':
                                                        var $7733 = self.value;
                                                        var $7734 = Kind$Synth$one$(_name$16, $7733);
                                                        var $7732 = $7734;
                                                        break;
                                                    case 'Maybe.none':
                                                        var _stat$27 = Kind$Status$fail$($7726);
                                                        var _defs$28 = Kind$Map$set$(_name$16, Kind$Def$new$(_file$13, _code$14, _orig$15, _name$16, _term$17, _type$18, _isct$19, _arit$20, _stat$27), _defs$22);
                                                        var $7735 = IO$monad$((_m$bind$29 => _m$pure$30 => {
                                                            var $7736 = _m$pure$30;
                                                            return $7736;
                                                        }))(Maybe$some$(_defs$28));
                                                        var $7732 = $7735;
                                                        break;
                                                };
                                                return $7732;
                                            }));
                                            var $7727 = $7730;
                                        };
                                        var $7709 = $7727;
                                        break;
                                };
                                var $7708 = $7709;
                                break;
                            case 'Kind.Status.wait':
                                var $7737 = IO$monad$((_m$bind$22 => _m$pure$23 => {
                                    var $7738 = _m$pure$23;
                                    return $7738;
                                }))(Maybe$some$(_defs$2));
                                var $7708 = $7737;
                                break;
                            case 'Kind.Status.done':
                            case 'Kind.Status.fail':
                                var $7739 = IO$monad$((_m$bind$23 => _m$pure$24 => {
                                    var $7740 = _m$pure$24;
                                    return $7740;
                                }))(Maybe$some$(_defs$2));
                                var $7708 = $7739;
                                break;
                        };
                        var $7698 = $7708;
                        break;
                };
                var $7696 = $7698;
                break;
            case 'Maybe.none':
                var $7741 = IO$monad$((_m$bind$3 => _m$pure$4 => {
                    var $7742 = _m$bind$3;
                    return $7742;
                }))(IO$get_time)((_time_a$3 => {
                    var $7743 = IO$monad$((_m$bind$4 => _m$pure$5 => {
                        var $7744 = _m$bind$4;
                        return $7744;
                    }))(Kind$Synth$load$(_name$1, _defs$2))((_loaded$4 => {
                        var self = _loaded$4;
                        switch (self._) {
                            case 'Maybe.some':
                                var $7746 = self.value;
                                var $7747 = IO$monad$((_m$bind$6 => _m$pure$7 => {
                                    var $7748 = _m$bind$6;
                                    return $7748;
                                }))(IO$get_time)((_time_b$6 => {
                                    var $7749 = IO$monad$((_m$bind$7 => _m$pure$8 => {
                                        var $7750 = _m$bind$7;
                                        return $7750;
                                    }))(Kind$Synth$one$(_name$1, $7746))((_result$7 => {
                                        var $7751 = IO$monad$((_m$bind$8 => _m$pure$9 => {
                                            var $7752 = _m$bind$8;
                                            return $7752;
                                        }))(IO$get_time)((_time_c$8 => {
                                            var $7753 = IO$monad$((_m$bind$9 => _m$pure$10 => {
                                                var $7754 = _m$pure$10;
                                                return $7754;
                                            }))(_result$7);
                                            return $7753;
                                        }));
                                        return $7751;
                                    }));
                                    return $7749;
                                }));
                                var $7745 = $7747;
                                break;
                            case 'Maybe.none':
                                var $7755 = IO$monad$((_m$bind$5 => _m$pure$6 => {
                                    var $7756 = _m$pure$6;
                                    return $7756;
                                }))(Maybe$none);
                                var $7745 = $7755;
                                break;
                        };
                        return $7745;
                    }));
                    return $7743;
                }));
                var $7696 = $7741;
                break;
        };
        return $7696;
    };
    const Kind$Synth$one = x0 => x1 => Kind$Synth$one$(x0, x1);

    function BitsMap$from_list$(_xs$2) {
        var self = _xs$2;
        switch (self._) {
            case 'List.cons':
                var $7758 = self.head;
                var $7759 = self.tail;
                var self = $7758;
                switch (self._) {
                    case 'Pair.new':
                        var $7761 = self.fst;
                        var $7762 = self.snd;
                        var $7763 = (bitsmap_set($7761, $7762, BitsMap$from_list$($7759), 'set'));
                        var $7760 = $7763;
                        break;
                };
                var $7757 = $7760;
                break;
            case 'List.nil':
                var $7764 = BitsMap$new;
                var $7757 = $7764;
                break;
        };
        return $7757;
    };
    const BitsMap$from_list = x0 => BitsMap$from_list$(x0);
    const Kind$Term$inline$names = (() => {
        var _inl$1 = List$cons$("Monad.pure", List$cons$("Monad.bind", List$cons$("Monad.new", List$cons$("Parser.monad", List$cons$("Parser.bind", List$cons$("Parser.pure", List$cons$("Kind.Check.pure", List$cons$("Kind.Check.bind", List$cons$("Kind.Check.monad", List$cons$("Kind.Check.value", List$cons$("Kind.Check.none", List$nil)))))))))));
        var _kvs$2 = List$mapped$(_inl$1, (_x$2 => {
            var $7766 = Pair$new$((kind_name_to_bits(_x$2)), Unit$new);
            return $7766;
        }));
        var $7765 = BitsMap$from_list$(_kvs$2);
        return $7765;
    })();

    function Kind$Term$inline$reduce$(_term$1, _defs$2) {
        var self = _term$1;
        switch (self._) {
            case 'Kind.Term.ref':
                var $7768 = self.name;
                var _inli$4 = BitsSet$has$((kind_name_to_bits($7768)), Kind$Term$inline$names);
                var self = _inli$4;
                if (self) {
                    var self = Kind$Map$get$($7768, _defs$2);
                    switch (self._) {
                        case 'Maybe.some':
                            var $7771 = self.value;
                            var self = $7771;
                            switch (self._) {
                                case 'Kind.Def.new':
                                    var $7773 = self.term;
                                    var $7774 = Kind$Term$inline$reduce$($7773, _defs$2);
                                    var $7772 = $7774;
                                    break;
                            };
                            var $7770 = $7772;
                            break;
                        case 'Maybe.none':
                            var $7775 = Kind$Term$ref$($7768);
                            var $7770 = $7775;
                            break;
                    };
                    var $7769 = $7770;
                } else {
                    var $7776 = _term$1;
                    var $7769 = $7776;
                };
                var $7767 = $7769;
                break;
            case 'Kind.Term.app':
                var $7777 = self.func;
                var $7778 = self.argm;
                var _func$5 = Kind$Term$inline$reduce$($7777, _defs$2);
                var self = _func$5;
                switch (self._) {
                    case 'Kind.Term.lam':
                        var $7780 = self.body;
                        var $7781 = Kind$Term$inline$reduce$($7780($7778), _defs$2);
                        var $7779 = $7781;
                        break;
                    case 'Kind.Term.let':
                        var $7782 = self.name;
                        var $7783 = self.expr;
                        var $7784 = self.body;
                        var $7785 = Kind$Term$let$($7782, $7783, (_x$9 => {
                            var $7786 = Kind$Term$inline$reduce$(Kind$Term$app$($7784(_x$9), $7778), _defs$2);
                            return $7786;
                        }));
                        var $7779 = $7785;
                        break;
                    case 'Kind.Term.var':
                    case 'Kind.Term.ref':
                    case 'Kind.Term.typ':
                    case 'Kind.Term.all':
                    case 'Kind.Term.app':
                    case 'Kind.Term.def':
                    case 'Kind.Term.ann':
                    case 'Kind.Term.gol':
                    case 'Kind.Term.hol':
                    case 'Kind.Term.nat':
                    case 'Kind.Term.chr':
                    case 'Kind.Term.str':
                    case 'Kind.Term.cse':
                    case 'Kind.Term.ori':
                        var $7787 = _term$1;
                        var $7779 = $7787;
                        break;
                };
                var $7767 = $7779;
                break;
            case 'Kind.Term.ori':
                var $7788 = self.expr;
                var $7789 = Kind$Term$inline$reduce$($7788, _defs$2);
                var $7767 = $7789;
                break;
            case 'Kind.Term.var':
            case 'Kind.Term.typ':
            case 'Kind.Term.all':
            case 'Kind.Term.lam':
            case 'Kind.Term.let':
            case 'Kind.Term.def':
            case 'Kind.Term.ann':
            case 'Kind.Term.gol':
            case 'Kind.Term.hol':
            case 'Kind.Term.nat':
            case 'Kind.Term.chr':
            case 'Kind.Term.str':
            case 'Kind.Term.cse':
                var $7790 = _term$1;
                var $7767 = $7790;
                break;
        };
        return $7767;
    };
    const Kind$Term$inline$reduce = x0 => x1 => Kind$Term$inline$reduce$(x0, x1);

    function Kind$Term$inline$(_term$1, _defs$2) {
        var self = Kind$Term$inline$reduce$(_term$1, _defs$2);
        switch (self._) {
            case 'Kind.Term.var':
                var $7792 = self.name;
                var $7793 = self.indx;
                var $7794 = Kind$Term$var$($7792, $7793);
                var $7791 = $7794;
                break;
            case 'Kind.Term.ref':
                var $7795 = self.name;
                var $7796 = Kind$Term$ref$($7795);
                var $7791 = $7796;
                break;
            case 'Kind.Term.all':
                var $7797 = self.eras;
                var $7798 = self.self;
                var $7799 = self.name;
                var $7800 = self.xtyp;
                var $7801 = self.body;
                var $7802 = Kind$Term$all$($7797, $7798, $7799, Kind$Term$inline$($7800, _defs$2), (_s$8 => _x$9 => {
                    var $7803 = Kind$Term$inline$($7801(_s$8)(_x$9), _defs$2);
                    return $7803;
                }));
                var $7791 = $7802;
                break;
            case 'Kind.Term.lam':
                var $7804 = self.name;
                var $7805 = self.body;
                var $7806 = Kind$Term$lam$($7804, (_x$5 => {
                    var $7807 = Kind$Term$inline$($7805(_x$5), _defs$2);
                    return $7807;
                }));
                var $7791 = $7806;
                break;
            case 'Kind.Term.app':
                var $7808 = self.func;
                var $7809 = self.argm;
                var $7810 = Kind$Term$app$(Kind$Term$inline$($7808, _defs$2), Kind$Term$inline$($7809, _defs$2));
                var $7791 = $7810;
                break;
            case 'Kind.Term.let':
                var $7811 = self.name;
                var $7812 = self.expr;
                var $7813 = self.body;
                var $7814 = Kind$Term$let$($7811, Kind$Term$inline$($7812, _defs$2), (_x$6 => {
                    var $7815 = Kind$Term$inline$($7813(_x$6), _defs$2);
                    return $7815;
                }));
                var $7791 = $7814;
                break;
            case 'Kind.Term.def':
                var $7816 = self.name;
                var $7817 = self.expr;
                var $7818 = self.body;
                var $7819 = Kind$Term$def$($7816, Kind$Term$inline$($7817, _defs$2), (_x$6 => {
                    var $7820 = Kind$Term$inline$($7818(_x$6), _defs$2);
                    return $7820;
                }));
                var $7791 = $7819;
                break;
            case 'Kind.Term.ann':
                var $7821 = self.done;
                var $7822 = self.term;
                var $7823 = self.type;
                var $7824 = Kind$Term$ann$($7821, Kind$Term$inline$($7822, _defs$2), Kind$Term$inline$($7823, _defs$2));
                var $7791 = $7824;
                break;
            case 'Kind.Term.gol':
                var $7825 = self.name;
                var $7826 = self.dref;
                var $7827 = self.verb;
                var $7828 = Kind$Term$gol$($7825, $7826, $7827);
                var $7791 = $7828;
                break;
            case 'Kind.Term.hol':
                var $7829 = self.path;
                var $7830 = Kind$Term$hol$($7829);
                var $7791 = $7830;
                break;
            case 'Kind.Term.nat':
                var $7831 = self.natx;
                var $7832 = Kind$Term$nat$($7831);
                var $7791 = $7832;
                break;
            case 'Kind.Term.chr':
                var $7833 = self.chrx;
                var $7834 = Kind$Term$chr$($7833);
                var $7791 = $7834;
                break;
            case 'Kind.Term.str':
                var $7835 = self.strx;
                var $7836 = Kind$Term$str$($7835);
                var $7791 = $7836;
                break;
            case 'Kind.Term.ori':
                var $7837 = self.expr;
                var $7838 = Kind$Term$inline$($7837, _defs$2);
                var $7791 = $7838;
                break;
            case 'Kind.Term.typ':
                var $7839 = Kind$Term$typ;
                var $7791 = $7839;
                break;
            case 'Kind.Term.cse':
                var $7840 = _term$1;
                var $7791 = $7840;
                break;
        };
        return $7791;
    };
    const Kind$Term$inline = x0 => x1 => Kind$Term$inline$(x0, x1);

    function BitsMap$values$go$(_xs$2, _list$3) {
        var self = _xs$2;
        switch (self._) {
            case 'BitsMap.tie':
                var $7842 = self.val;
                var $7843 = self.lft;
                var $7844 = self.rgt;
                var self = $7842;
                switch (self._) {
                    case 'Maybe.some':
                        var $7846 = self.value;
                        var $7847 = List$cons$($7846, _list$3);
                        var _list0$7 = $7847;
                        break;
                    case 'Maybe.none':
                        var $7848 = _list$3;
                        var _list0$7 = $7848;
                        break;
                };
                var _list1$8 = BitsMap$values$go$($7843, _list0$7);
                var _list2$9 = BitsMap$values$go$($7844, _list1$8);
                var $7845 = _list2$9;
                var $7841 = $7845;
                break;
            case 'BitsMap.new':
                var $7849 = _list$3;
                var $7841 = $7849;
                break;
        };
        return $7841;
    };
    const BitsMap$values$go = x0 => x1 => BitsMap$values$go$(x0, x1);

    function BitsMap$values$(_xs$2) {
        var $7850 = BitsMap$values$go$(_xs$2, List$nil);
        return $7850;
    };
    const BitsMap$values = x0 => BitsMap$values$(x0);

    function Kind$Core$var_name$(_indx$1, _name$2, _brui$3, _vars$4) {
        var Kind$Core$var_name$ = (_indx$1, _name$2, _brui$3, _vars$4) => ({
            ctr: 'TCO',
            arg: [_indx$1, _name$2, _brui$3, _vars$4]
        });
        var Kind$Core$var_name = _indx$1 => _name$2 => _brui$3 => _vars$4 => Kind$Core$var_name$(_indx$1, _name$2, _brui$3, _vars$4);
        var arg = [_indx$1, _name$2, _brui$3, _vars$4];
        while (true) {
            let [_indx$1, _name$2, _brui$3, _vars$4] = arg;
            var R = (() => {
                var self = _indx$1;
                if (self === 0n) {
                    var self = _brui$3;
                    if (self === 0n) {
                        var $7852 = _name$2;
                        var $7851 = $7852;
                    } else {
                        var $7853 = (self - 1n);
                        var $7854 = (_name$2 + ("^" + Nat$show$(_brui$3)));
                        var $7851 = $7854;
                    };
                    return $7851;
                } else {
                    var $7855 = (self - 1n);
                    var self = _vars$4;
                    switch (self._) {
                        case 'List.cons':
                            var $7857 = self.head;
                            var $7858 = self.tail;
                            var self = (_name$2 === $7857);
                            if (self) {
                                var $7860 = Nat$succ$(_brui$3);
                                var _brui$8 = $7860;
                            } else {
                                var $7861 = _brui$3;
                                var _brui$8 = $7861;
                            };
                            var $7859 = Kind$Core$var_name$($7855, _name$2, _brui$8, $7858);
                            var $7856 = $7859;
                            break;
                        case 'List.nil':
                            var $7862 = "unbound";
                            var $7856 = $7862;
                            break;
                    };
                    return $7856;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Kind$Core$var_name = x0 => x1 => x2 => x3 => Kind$Core$var_name$(x0, x1, x2, x3);

    function Kind$Name$show$(_name$1) {
        var $7863 = _name$1;
        return $7863;
    };
    const Kind$Name$show = x0 => Kind$Name$show$(x0);

    function Bits$to_nat$(_b$1) {
        var self = _b$1;
        switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
            case 'o':
                var $7865 = self.slice(0, -1);
                var $7866 = (2n * Bits$to_nat$($7865));
                var $7864 = $7866;
                break;
            case 'i':
                var $7867 = self.slice(0, -1);
                var $7868 = Nat$succ$((2n * Bits$to_nat$($7867)));
                var $7864 = $7868;
                break;
            case 'e':
                var $7869 = 0n;
                var $7864 = $7869;
                break;
        };
        return $7864;
    };
    const Bits$to_nat = x0 => Bits$to_nat$(x0);

    function U16$show_hex$(_a$1) {
        var self = _a$1;
        switch ('u16') {
            case 'u16':
                var $7871 = u16_to_word(self);
                var $7872 = Nat$to_string_base$(16n, Bits$to_nat$(Word$to_bits$($7871)));
                var $7870 = $7872;
                break;
        };
        return $7870;
    };
    const U16$show_hex = x0 => U16$show_hex$(x0);

    function Kind$Code$escape$char$(_chr$1) {
        var self = (_chr$1 === Kind$Code$backslash);
        if (self) {
            var $7874 = String$cons$(Kind$Code$backslash, String$cons$(_chr$1, String$nil));
            var $7873 = $7874;
        } else {
            var self = (_chr$1 === 34);
            if (self) {
                var $7876 = String$cons$(Kind$Code$backslash, String$cons$(_chr$1, String$nil));
                var $7875 = $7876;
            } else {
                var self = (_chr$1 === 39);
                if (self) {
                    var $7878 = String$cons$(Kind$Code$backslash, String$cons$(_chr$1, String$nil));
                    var $7877 = $7878;
                } else {
                    var self = U16$btw$(32, _chr$1, 126);
                    if (self) {
                        var $7880 = String$cons$(_chr$1, String$nil);
                        var $7879 = $7880;
                    } else {
                        var $7881 = (String$cons$(Kind$Code$backslash, String$nil) + ("u{" + (U16$show_hex$(_chr$1) + "}")));
                        var $7879 = $7881;
                    };
                    var $7877 = $7879;
                };
                var $7875 = $7877;
            };
            var $7873 = $7875;
        };
        return $7873;
    };
    const Kind$Code$escape$char = x0 => Kind$Code$escape$char$(x0);

    function Kind$Code$escape$go$(_str$1, _result$2) {
        var Kind$Code$escape$go$ = (_str$1, _result$2) => ({
            ctr: 'TCO',
            arg: [_str$1, _result$2]
        });
        var Kind$Code$escape$go = _str$1 => _result$2 => Kind$Code$escape$go$(_str$1, _result$2);
        var arg = [_str$1, _result$2];
        while (true) {
            let [_str$1, _result$2] = arg;
            var R = (() => {
                var self = _str$1;
                if (self.length === 0) {
                    var $7882 = String$reverse$(_result$2);
                    return $7882;
                } else {
                    var $7883 = self.charCodeAt(0);
                    var $7884 = self.slice(1);
                    var $7885 = Kind$Code$escape$go$($7884, (String$reverse$(Kind$Code$escape$char$($7883)) + _result$2));
                    return $7885;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Kind$Code$escape$go = x0 => x1 => Kind$Code$escape$go$(x0, x1);

    function Kind$Code$escape$(_str$1) {
        var $7886 = Kind$Code$escape$go$(_str$1, "");
        return $7886;
    };
    const Kind$Code$escape = x0 => Kind$Code$escape$(x0);

    function Kind$Core$show$go$(_term$1, _indx$2, _vars$3) {
        var self = _term$1;
        switch (self._) {
            case 'Kind.Term.var':
                var $7888 = self.name;
                var $7889 = self.indx;
                var $7890 = Kind$Core$var_name$(Nat$pred$((_indx$2 - $7889 <= 0n ? 0n : _indx$2 - $7889)), $7888, 0n, _vars$3);
                var $7887 = $7890;
                break;
            case 'Kind.Term.ref':
                var $7891 = self.name;
                var $7892 = Kind$Name$show$($7891);
                var $7887 = $7892;
                break;
            case 'Kind.Term.all':
                var $7893 = self.eras;
                var $7894 = self.self;
                var $7895 = self.name;
                var $7896 = self.xtyp;
                var $7897 = self.body;
                var _eras$9 = $7893;
                var self = _eras$9;
                if (self) {
                    var $7899 = "%";
                    var _init$10 = $7899;
                } else {
                    var $7900 = "@";
                    var _init$10 = $7900;
                };
                var _self$11 = Kind$Name$show$($7894);
                var _name$12 = Kind$Name$show$($7895);
                var _xtyp$13 = Kind$Core$show$go$($7896, _indx$2, _vars$3);
                var _body$14 = Kind$Core$show$go$($7897(Kind$Term$var$($7894, _indx$2))(Kind$Term$var$($7895, Nat$succ$(_indx$2))), Nat$succ$(Nat$succ$(_indx$2)), List$cons$($7895, List$cons$($7894, _vars$3)));
                var $7898 = String$flatten$(List$cons$(_init$10, List$cons$(_self$11, List$cons$("(", List$cons$(_name$12, List$cons$(":", List$cons$(_xtyp$13, List$cons$(") ", List$cons$(_body$14, List$nil)))))))));
                var $7887 = $7898;
                break;
            case 'Kind.Term.lam':
                var $7901 = self.name;
                var $7902 = self.body;
                var _name$6 = Kind$Name$show$($7901);
                var _body$7 = Kind$Core$show$go$($7902(Kind$Term$var$($7901, _indx$2)), Nat$succ$(_indx$2), List$cons$($7901, _vars$3));
                var $7903 = String$flatten$(List$cons$("#", List$cons$(_name$6, List$cons$(" ", List$cons$(_body$7, List$nil)))));
                var $7887 = $7903;
                break;
            case 'Kind.Term.app':
                var $7904 = self.func;
                var $7905 = self.argm;
                var _func$6 = Kind$Core$show$go$($7904, _indx$2, _vars$3);
                var _argm$7 = Kind$Core$show$go$($7905, _indx$2, _vars$3);
                var $7906 = String$flatten$(List$cons$("(", List$cons$(_func$6, List$cons$(" ", List$cons$(_argm$7, List$cons$(")", List$nil))))));
                var $7887 = $7906;
                break;
            case 'Kind.Term.let':
                var $7907 = self.name;
                var $7908 = self.expr;
                var $7909 = self.body;
                var _name$7 = Kind$Name$show$($7907);
                var _expr$8 = Kind$Core$show$go$($7908, _indx$2, _vars$3);
                var _body$9 = Kind$Core$show$go$($7909(Kind$Term$var$($7907, _indx$2)), Nat$succ$(_indx$2), List$cons$($7907, _vars$3));
                var $7910 = String$flatten$(List$cons$("!", List$cons$(_name$7, List$cons$(" = ", List$cons$(_expr$8, List$cons$("; ", List$cons$(_body$9, List$nil)))))));
                var $7887 = $7910;
                break;
            case 'Kind.Term.def':
                var $7911 = self.name;
                var $7912 = self.expr;
                var $7913 = self.body;
                var _name$7 = Kind$Name$show$($7911);
                var _expr$8 = Kind$Core$show$go$($7912, _indx$2, _vars$3);
                var _body$9 = Kind$Core$show$go$($7913(Kind$Term$var$($7911, _indx$2)), Nat$succ$(_indx$2), List$cons$($7911, _vars$3));
                var $7914 = String$flatten$(List$cons$("$", List$cons$(_name$7, List$cons$(" = ", List$cons$(_expr$8, List$cons$("; ", List$cons$(_body$9, List$nil)))))));
                var $7887 = $7914;
                break;
            case 'Kind.Term.ann':
                var $7915 = self.term;
                var $7916 = self.type;
                var _term$7 = Kind$Core$show$go$($7915, _indx$2, _vars$3);
                var _type$8 = Kind$Core$show$go$($7916, _indx$2, _vars$3);
                var $7917 = String$flatten$(List$cons$("{", List$cons$(_term$7, List$cons$(":", List$cons$(_type$8, List$cons$("}", List$nil))))));
                var $7887 = $7917;
                break;
            case 'Kind.Term.nat':
                var $7918 = self.natx;
                var $7919 = String$flatten$(List$cons$("+", List$cons$(Nat$show$($7918), List$nil)));
                var $7887 = $7919;
                break;
            case 'Kind.Term.chr':
                var $7920 = self.chrx;
                var $7921 = String$flatten$(List$cons$("\'", List$cons$(Kind$Code$escape$char$($7920), List$cons$("\'", List$nil))));
                var $7887 = $7921;
                break;
            case 'Kind.Term.str':
                var $7922 = self.strx;
                var $7923 = String$flatten$(List$cons$("\"", List$cons$(Kind$Code$escape$($7922), List$cons$("\"", List$nil))));
                var $7887 = $7923;
                break;
            case 'Kind.Term.ori':
                var $7924 = self.expr;
                var $7925 = Kind$Core$show$go$($7924, _indx$2, _vars$3);
                var $7887 = $7925;
                break;
            case 'Kind.Term.typ':
                var $7926 = "*";
                var $7887 = $7926;
                break;
            case 'Kind.Term.gol':
                var $7927 = "<GOL>";
                var $7887 = $7927;
                break;
            case 'Kind.Term.hol':
                var $7928 = "<HOL>";
                var $7887 = $7928;
                break;
            case 'Kind.Term.cse':
                var $7929 = "<CSE>";
                var $7887 = $7929;
                break;
        };
        return $7887;
    };
    const Kind$Core$show$go = x0 => x1 => x2 => Kind$Core$show$go$(x0, x1, x2);

    function Kind$Core$show$(_term$1) {
        var $7930 = Kind$Core$show$go$(_term$1, 0n, List$nil);
        return $7930;
    };
    const Kind$Core$show = x0 => Kind$Core$show$(x0);

    function Kind$Defs$core$(_defs$1) {
        var _result$2 = "";
        var _result$3 = (() => {
            var $7933 = _result$2;
            var $7934 = BitsMap$values$(_defs$1);
            let _result$4 = $7933;
            let _defn$3;
            while ($7934._ === 'List.cons') {
                _defn$3 = $7934.head;
                var self = _defn$3;
                switch (self._) {
                    case 'Kind.Def.new':
                        var $7935 = self.name;
                        var $7936 = self.term;
                        var $7937 = self.type;
                        var $7938 = self.stat;
                        var self = $7938;
                        switch (self._) {
                            case 'Kind.Status.init':
                            case 'Kind.Status.wait':
                            case 'Kind.Status.fail':
                                var $7940 = _result$4;
                                var $7939 = $7940;
                                break;
                            case 'Kind.Status.done':
                                var _name$15 = $7935;
                                var _term$16 = Kind$Core$show$($7936);
                                var _type$17 = Kind$Core$show$($7937);
                                var $7941 = String$flatten$(List$cons$(_result$4, List$cons$(_name$15, List$cons$(" : ", List$cons$(_type$17, List$cons$(" = ", List$cons$(_term$16, List$cons$(";\u{a}", List$nil))))))));
                                var $7939 = $7941;
                                break;
                        };
                        var $7933 = $7939;
                        break;
                };
                _result$4 = $7933;
                $7934 = $7934.tail;
            }
            return _result$4;
        })();
        var $7931 = _result$3;
        return $7931;
    };
    const Kind$Defs$core = x0 => Kind$Defs$core$(x0);

    function Kind$api$io$term_to_core$(_name$1) {
        var $7942 = IO$monad$((_m$bind$2 => _m$pure$3 => {
            var $7943 = _m$bind$2;
            return $7943;
        }))(Kind$Synth$one$(_name$1, Kind$Map$new))((_new_defs$2 => {
            var self = _new_defs$2;
            switch (self._) {
                case 'Maybe.some':
                    var $7945 = self.value;
                    var $7946 = $7945;
                    var _defs$3 = $7946;
                    break;
                case 'Maybe.none':
                    var $7947 = Kind$Map$new;
                    var _defs$3 = $7947;
                    break;
            };
            var _defs$4 = BitsMap$map$((_defn$4 => {
                var self = _defn$4;
                switch (self._) {
                    case 'Kind.Def.new':
                        var $7949 = self.file;
                        var $7950 = self.code;
                        var $7951 = self.orig;
                        var $7952 = self.name;
                        var $7953 = self.term;
                        var $7954 = self.type;
                        var $7955 = self.isct;
                        var $7956 = self.arit;
                        var $7957 = self.stat;
                        var _term$14 = Kind$Term$inline$($7953, _defs$3);
                        var _type$15 = Kind$Term$inline$($7954, _defs$3);
                        var $7958 = Kind$Def$new$($7949, $7950, $7951, $7952, _term$14, _type$15, $7955, $7956, $7957);
                        var $7948 = $7958;
                        break;
                };
                return $7948;
            }), _defs$3);
            var $7944 = IO$monad$((_m$bind$5 => _m$pure$6 => {
                var $7959 = _m$pure$6;
                return $7959;
            }))(Kind$Defs$core$(_defs$4));
            return $7944;
        }));
        return $7942;
    };
    const Kind$api$io$term_to_core = x0 => Kind$api$io$term_to_core$(x0);

    function BitsMap$keys$go$(_xs$2, _key$3, _list$4) {
        var self = _xs$2;
        switch (self._) {
            case 'BitsMap.tie':
                var $7961 = self.val;
                var $7962 = self.lft;
                var $7963 = self.rgt;
                var self = $7961;
                switch (self._) {
                    case 'Maybe.none':
                        var $7965 = _list$4;
                        var _list0$8 = $7965;
                        break;
                    case 'Maybe.some':
                        var $7966 = List$cons$(Bits$reverse$(_key$3), _list$4);
                        var _list0$8 = $7966;
                        break;
                };
                var _list1$9 = BitsMap$keys$go$($7962, (_key$3 + '0'), _list0$8);
                var _list2$10 = BitsMap$keys$go$($7963, (_key$3 + '1'), _list1$9);
                var $7964 = _list2$10;
                var $7960 = $7964;
                break;
            case 'BitsMap.new':
                var $7967 = _list$4;
                var $7960 = $7967;
                break;
        };
        return $7960;
    };
    const BitsMap$keys$go = x0 => x1 => x2 => BitsMap$keys$go$(x0, x1, x2);

    function BitsMap$keys$(_xs$2) {
        var $7968 = List$reverse$(BitsMap$keys$go$(_xs$2, Bits$e, List$nil));
        return $7968;
    };
    const BitsMap$keys = x0 => BitsMap$keys$(x0);

    function Kind$Synth$many$(_names$1, _defs$2) {
        var self = _names$1;
        switch (self._) {
            case 'List.cons':
                var $7970 = self.head;
                var $7971 = self.tail;
                var $7972 = IO$monad$((_m$bind$5 => _m$pure$6 => {
                    var $7973 = _m$bind$5;
                    return $7973;
                }))(Kind$Synth$one$($7970, _defs$2))((_new_defs$5 => {
                    var self = _new_defs$5;
                    switch (self._) {
                        case 'Maybe.some':
                            var $7975 = self.value;
                            var $7976 = Kind$Synth$many$($7971, $7975);
                            var $7974 = $7976;
                            break;
                        case 'Maybe.none':
                            var $7977 = Kind$Synth$many$($7971, _defs$2);
                            var $7974 = $7977;
                            break;
                    };
                    return $7974;
                }));
                var $7969 = $7972;
                break;
            case 'List.nil':
                var $7978 = IO$monad$((_m$bind$3 => _m$pure$4 => {
                    var $7979 = _m$pure$4;
                    return $7979;
                }))(_defs$2);
                var $7969 = $7978;
                break;
        };
        return $7969;
    };
    const Kind$Synth$many = x0 => x1 => Kind$Synth$many$(x0, x1);

    function Kind$Synth$file$(_file$1, _defs$2) {
        var $7980 = IO$monad$((_m$bind$3 => _m$pure$4 => {
            var $7981 = _m$bind$3;
            return $7981;
        }))(IO$get_file$(_file$1))((_code$3 => {
            var _read$4 = Kind$Defs$read$(_file$1, _code$3, _defs$2);
            var self = _read$4;
            switch (self._) {
                case 'Either.left':
                    var $7983 = self.value;
                    var $7984 = IO$monad$((_m$bind$6 => _m$pure$7 => {
                        var $7985 = _m$pure$7;
                        return $7985;
                    }))(Either$left$($7983));
                    var $7982 = $7984;
                    break;
                case 'Either.right':
                    var $7986 = self.value;
                    var _file_defs$6 = $7986;
                    var _file_keys$7 = BitsMap$keys$(_file_defs$6);
                    var _file_nams$8 = List$mapped$(_file_keys$7, Kind$Name$from_bits);
                    var $7987 = IO$monad$((_m$bind$9 => _m$pure$10 => {
                        var $7988 = _m$bind$9;
                        return $7988;
                    }))(Kind$Synth$many$(_file_nams$8, _file_defs$6))((_defs$9 => {
                        var $7989 = IO$monad$((_m$bind$10 => _m$pure$11 => {
                            var $7990 = _m$pure$11;
                            return $7990;
                        }))(Either$right$(Pair$new$(_file_nams$8, _defs$9)));
                        return $7989;
                    }));
                    var $7982 = $7987;
                    break;
            };
            return $7982;
        }));
        return $7980;
    };
    const Kind$Synth$file = x0 => x1 => Kind$Synth$file$(x0, x1);

    function IO$put_string$(_text$1) {
        var $7991 = IO$ask$("put_string", _text$1, (_skip$2 => {
            var $7992 = IO$end$(Unit$new);
            return $7992;
        }));
        return $7991;
    };
    const IO$put_string = x0 => IO$put_string$(x0);

    function IO$print$(_text$1) {
        var $7993 = IO$put_string$((_text$1 + "\u{a}"));
        return $7993;
    };
    const IO$print = x0 => IO$print$(x0);

    function Kind$Term$show$as_nat$go$(_term$1) {
        var self = _term$1;
        switch (self._) {
            case 'Kind.Term.ref':
                var $7995 = self.name;
                var self = ($7995 === "Nat.zero");
                if (self) {
                    var $7997 = Maybe$some$(0n);
                    var $7996 = $7997;
                } else {
                    var $7998 = Maybe$none;
                    var $7996 = $7998;
                };
                var $7994 = $7996;
                break;
            case 'Kind.Term.app':
                var $7999 = self.func;
                var $8000 = self.argm;
                var self = $7999;
                switch (self._) {
                    case 'Kind.Term.ref':
                        var $8002 = self.name;
                        var self = ($8002 === "Nat.succ");
                        if (self) {
                            var $8004 = Maybe$monad$((_m$bind$5 => _m$pure$6 => {
                                var $8005 = _m$bind$5;
                                return $8005;
                            }))(Kind$Term$show$as_nat$go$($8000))((_pred$5 => {
                                var $8006 = Maybe$monad$((_m$bind$6 => _m$pure$7 => {
                                    var $8007 = _m$pure$7;
                                    return $8007;
                                }))(Nat$succ$(_pred$5));
                                return $8006;
                            }));
                            var $8003 = $8004;
                        } else {
                            var $8008 = Maybe$none;
                            var $8003 = $8008;
                        };
                        var $8001 = $8003;
                        break;
                    case 'Kind.Term.var':
                    case 'Kind.Term.typ':
                    case 'Kind.Term.all':
                    case 'Kind.Term.lam':
                    case 'Kind.Term.app':
                    case 'Kind.Term.let':
                    case 'Kind.Term.def':
                    case 'Kind.Term.ann':
                    case 'Kind.Term.gol':
                    case 'Kind.Term.hol':
                    case 'Kind.Term.nat':
                    case 'Kind.Term.chr':
                    case 'Kind.Term.str':
                    case 'Kind.Term.cse':
                    case 'Kind.Term.ori':
                        var $8009 = Maybe$none;
                        var $8001 = $8009;
                        break;
                };
                var $7994 = $8001;
                break;
            case 'Kind.Term.var':
            case 'Kind.Term.typ':
            case 'Kind.Term.all':
            case 'Kind.Term.lam':
            case 'Kind.Term.let':
            case 'Kind.Term.def':
            case 'Kind.Term.ann':
            case 'Kind.Term.gol':
            case 'Kind.Term.hol':
            case 'Kind.Term.nat':
            case 'Kind.Term.chr':
            case 'Kind.Term.str':
            case 'Kind.Term.cse':
            case 'Kind.Term.ori':
                var $8010 = Maybe$none;
                var $7994 = $8010;
                break;
        };
        return $7994;
    };
    const Kind$Term$show$as_nat$go = x0 => Kind$Term$show$as_nat$go$(x0);

    function Kind$Term$show$as_nat$(_term$1) {
        var $8011 = Maybe$mapped$(Kind$Term$show$as_nat$go$(_term$1), Nat$show);
        return $8011;
    };
    const Kind$Term$show$as_nat = x0 => Kind$Term$show$as_nat$(x0);

    function Kind$Term$show$is_ref$(_term$1, _name$2) {
        var self = _term$1;
        switch (self._) {
            case 'Kind.Term.ref':
                var $8013 = self.name;
                var $8014 = (_name$2 === $8013);
                var $8012 = $8014;
                break;
            case 'Kind.Term.var':
            case 'Kind.Term.typ':
            case 'Kind.Term.all':
            case 'Kind.Term.lam':
            case 'Kind.Term.app':
            case 'Kind.Term.let':
            case 'Kind.Term.def':
            case 'Kind.Term.ann':
            case 'Kind.Term.gol':
            case 'Kind.Term.hol':
            case 'Kind.Term.nat':
            case 'Kind.Term.chr':
            case 'Kind.Term.str':
            case 'Kind.Term.cse':
            case 'Kind.Term.ori':
                var $8015 = Bool$false;
                var $8012 = $8015;
                break;
        };
        return $8012;
    };
    const Kind$Term$show$is_ref = x0 => x1 => Kind$Term$show$is_ref$(x0, x1);

    function Kind$Term$show$app$done$(_term$1, _path$2, _args$3) {
        var _arity$4 = (list_length(_args$3));
        var self = (Kind$Term$show$is_ref$(_term$1, "Equal") && (_arity$4 === 3n));
        if (self) {
            var _func$5 = Kind$Term$show$go$(_term$1, _path$2);
            var _eq_lft$6 = Maybe$default$(List$at$(1n, _args$3), "?");
            var _eq_rgt$7 = Maybe$default$(List$at$(2n, _args$3), "?");
            var $8017 = String$flatten$(List$cons$(_eq_lft$6, List$cons$(" == ", List$cons$(_eq_rgt$7, List$nil))));
            var $8016 = $8017;
        } else {
            var _func$5 = Kind$Term$show$go$(_term$1, _path$2);
            var self = _func$5;
            if (self.length === 0) {
                var $8019 = Bool$false;
                var _wrap$6 = $8019;
            } else {
                var $8020 = self.charCodeAt(0);
                var $8021 = self.slice(1);
                var $8022 = ($8020 === 40);
                var _wrap$6 = $8022;
            };
            var _args$7 = String$join$(",", _args$3);
            var self = _wrap$6;
            if (self) {
                var $8023 = String$flatten$(List$cons$("(", List$cons$(_func$5, List$cons$(")", List$nil))));
                var _func$8 = $8023;
            } else {
                var $8024 = _func$5;
                var _func$8 = $8024;
            };
            var $8018 = String$flatten$(List$cons$(_func$8, List$cons$("(", List$cons$(_args$7, List$cons$(")", List$nil)))));
            var $8016 = $8018;
        };
        return $8016;
    };
    const Kind$Term$show$app$done = x0 => x1 => x2 => Kind$Term$show$app$done$(x0, x1, x2);

    function Kind$Term$show$app$(_term$1, _path$2, _args$3) {
        var Kind$Term$show$app$ = (_term$1, _path$2, _args$3) => ({
            ctr: 'TCO',
            arg: [_term$1, _path$2, _args$3]
        });
        var Kind$Term$show$app = _term$1 => _path$2 => _args$3 => Kind$Term$show$app$(_term$1, _path$2, _args$3);
        var arg = [_term$1, _path$2, _args$3];
        while (true) {
            let [_term$1, _path$2, _args$3] = arg;
            var R = (() => {
                var self = _term$1;
                switch (self._) {
                    case 'Kind.Term.app':
                        var $8025 = self.func;
                        var $8026 = self.argm;
                        var $8027 = Kind$Term$show$app$($8025, Kind$MPath$o$(_path$2), List$cons$(Kind$Term$show$go$($8026, Kind$MPath$i$(_path$2)), _args$3));
                        return $8027;
                    case 'Kind.Term.ori':
                        var $8028 = self.expr;
                        var $8029 = Kind$Term$show$app$($8028, _path$2, _args$3);
                        return $8029;
                    case 'Kind.Term.var':
                    case 'Kind.Term.ref':
                    case 'Kind.Term.typ':
                    case 'Kind.Term.all':
                    case 'Kind.Term.lam':
                    case 'Kind.Term.let':
                    case 'Kind.Term.def':
                    case 'Kind.Term.ann':
                    case 'Kind.Term.gol':
                    case 'Kind.Term.hol':
                    case 'Kind.Term.nat':
                    case 'Kind.Term.chr':
                    case 'Kind.Term.str':
                    case 'Kind.Term.cse':
                        var $8030 = Kind$Term$show$app$done$(_term$1, _path$2, _args$3);
                        return $8030;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Kind$Term$show$app = x0 => x1 => x2 => Kind$Term$show$app$(x0, x1, x2);

    function BitsMap$to_list$(_xs$2) {
        var $8031 = List$reverse$(BitsMap$to_list$go$(_xs$2, Bits$e, List$nil));
        return $8031;
    };
    const BitsMap$to_list = x0 => BitsMap$to_list$(x0);

    function Kind$Term$show$go$(_term$1, _path$2) {
        var self = Kind$Term$show$as_nat$(_term$1);
        switch (self._) {
            case 'Maybe.some':
                var $8033 = self.value;
                var $8034 = $8033;
                var $8032 = $8034;
                break;
            case 'Maybe.none':
                var self = _term$1;
                switch (self._) {
                    case 'Kind.Term.var':
                        var $8036 = self.name;
                        var $8037 = Kind$Name$show$($8036);
                        var $8035 = $8037;
                        break;
                    case 'Kind.Term.ref':
                        var $8038 = self.name;
                        var _name$4 = Kind$Name$show$($8038);
                        var self = _path$2;
                        switch (self._) {
                            case 'Maybe.some':
                                var $8040 = self.value;
                                var _path_val$6 = ((Bits$e + '1') + Kind$Path$to_bits$($8040));
                                var _path_str$7 = Nat$show$(Bits$to_nat$(_path_val$6));
                                var $8041 = String$flatten$(List$cons$(_name$4, List$cons$(Kind$Code$color$("2", ("-" + _path_str$7)), List$nil)));
                                var $8039 = $8041;
                                break;
                            case 'Maybe.none':
                                var $8042 = _name$4;
                                var $8039 = $8042;
                                break;
                        };
                        var $8035 = $8039;
                        break;
                    case 'Kind.Term.all':
                        var $8043 = self.eras;
                        var $8044 = self.self;
                        var $8045 = self.name;
                        var $8046 = self.xtyp;
                        var $8047 = self.body;
                        var _eras$8 = $8043;
                        var _self$9 = Kind$Name$show$($8044);
                        var _name$10 = Kind$Name$show$($8045);
                        var _type$11 = Kind$Term$show$go$($8046, Kind$MPath$o$(_path$2));
                        var self = _eras$8;
                        if (self) {
                            var $8049 = "<";
                            var _open$12 = $8049;
                        } else {
                            var $8050 = "(";
                            var _open$12 = $8050;
                        };
                        var self = _eras$8;
                        if (self) {
                            var $8051 = ">";
                            var _clos$13 = $8051;
                        } else {
                            var $8052 = ")";
                            var _clos$13 = $8052;
                        };
                        var _body$14 = Kind$Term$show$go$($8047(Kind$Term$var$($8044, 0n))(Kind$Term$var$($8045, 0n)), Kind$MPath$i$(_path$2));
                        var $8048 = String$flatten$(List$cons$(_self$9, List$cons$(_open$12, List$cons$(_name$10, List$cons$(":", List$cons$(_type$11, List$cons$(_clos$13, List$cons$(" ", List$cons$(_body$14, List$nil)))))))));
                        var $8035 = $8048;
                        break;
                    case 'Kind.Term.lam':
                        var $8053 = self.name;
                        var $8054 = self.body;
                        var _name$5 = Kind$Name$show$($8053);
                        var _body$6 = Kind$Term$show$go$($8054(Kind$Term$var$($8053, 0n)), Kind$MPath$o$(_path$2));
                        var $8055 = String$flatten$(List$cons$("(", List$cons$(_name$5, List$cons$(") ", List$cons$(_body$6, List$nil)))));
                        var $8035 = $8055;
                        break;
                    case 'Kind.Term.let':
                        var $8056 = self.name;
                        var $8057 = self.expr;
                        var $8058 = self.body;
                        var _name$6 = Kind$Name$show$($8056);
                        var _expr$7 = Kind$Term$show$go$($8057, Kind$MPath$o$(_path$2));
                        var _body$8 = Kind$Term$show$go$($8058(Kind$Term$var$($8056, 0n)), Kind$MPath$i$(_path$2));
                        var $8059 = String$flatten$(List$cons$("let ", List$cons$(_name$6, List$cons$(" = ", List$cons$(_expr$7, List$cons$("; ", List$cons$(_body$8, List$nil)))))));
                        var $8035 = $8059;
                        break;
                    case 'Kind.Term.def':
                        var $8060 = self.name;
                        var $8061 = self.expr;
                        var $8062 = self.body;
                        var _name$6 = Kind$Name$show$($8060);
                        var _expr$7 = Kind$Term$show$go$($8061, Kind$MPath$o$(_path$2));
                        var _body$8 = Kind$Term$show$go$($8062(Kind$Term$var$($8060, 0n)), Kind$MPath$i$(_path$2));
                        var $8063 = String$flatten$(List$cons$("def ", List$cons$(_name$6, List$cons$(" = ", List$cons$(_expr$7, List$cons$("; ", List$cons$(_body$8, List$nil)))))));
                        var $8035 = $8063;
                        break;
                    case 'Kind.Term.ann':
                        var $8064 = self.term;
                        var $8065 = self.type;
                        var _term$6 = Kind$Term$show$go$($8064, Kind$MPath$o$(_path$2));
                        var _type$7 = Kind$Term$show$go$($8065, Kind$MPath$i$(_path$2));
                        var $8066 = String$flatten$(List$cons$(_term$6, List$cons$("::", List$cons$(_type$7, List$nil))));
                        var $8035 = $8066;
                        break;
                    case 'Kind.Term.gol':
                        var $8067 = self.name;
                        var _name$6 = Kind$Name$show$($8067);
                        var $8068 = String$flatten$(List$cons$("?", List$cons$(_name$6, List$nil)));
                        var $8035 = $8068;
                        break;
                    case 'Kind.Term.nat':
                        var $8069 = self.natx;
                        var $8070 = String$flatten$(List$cons$(Nat$show$($8069), List$nil));
                        var $8035 = $8070;
                        break;
                    case 'Kind.Term.chr':
                        var $8071 = self.chrx;
                        var $8072 = String$flatten$(List$cons$("\'", List$cons$(Kind$Code$escape$char$($8071), List$cons$("\'", List$nil))));
                        var $8035 = $8072;
                        break;
                    case 'Kind.Term.str':
                        var $8073 = self.strx;
                        var $8074 = String$flatten$(List$cons$("\"", List$cons$(Kind$Code$escape$($8073), List$cons$("\"", List$nil))));
                        var $8035 = $8074;
                        break;
                    case 'Kind.Term.cse':
                        var $8075 = self.expr;
                        var $8076 = self.name;
                        var $8077 = self.with;
                        var $8078 = self.cses;
                        var $8079 = self.moti;
                        var _expr$9 = Kind$Term$show$go$($8075, Kind$MPath$o$(_path$2));
                        var _name$10 = Kind$Name$show$($8076);
                        var _wyth$11 = String$join$("; ", List$mapped$($8077, (_with_var$11 => {
                            var self = _with_var$11;
                            switch (self._) {
                                case 'Kind.Ann.new':
                                    var $8082 = self.name;
                                    var $8083 = self.type;
                                    var self = $8083;
                                    switch (self._) {
                                        case 'Maybe.some':
                                            var $8085 = self.value;
                                            var $8086 = ($8082 + (": " + Kind$Term$show$go$($8085, Maybe$none)));
                                            var $8084 = $8086;
                                            break;
                                        case 'Maybe.none':
                                            var $8087 = $8082;
                                            var $8084 = $8087;
                                            break;
                                    };
                                    var $8081 = $8084;
                                    break;
                            };
                            return $8081;
                        })));
                        var _cses$12 = BitsMap$to_list$($8078);
                        var _cses$13 = String$join$("", List$mapped$(_cses$12, (_x$13 => {
                            var _name$14 = Kind$Name$from_bits$(Pair$fst$(_x$13));
                            var _term$15 = Kind$Term$show$go$(Pair$snd$(_x$13), Maybe$none);
                            var $8088 = String$flatten$(List$cons$(_name$14, List$cons$(": ", List$cons$(_term$15, List$cons$("; ", List$nil)))));
                            return $8088;
                        })));
                        var self = $8079;
                        switch (self._) {
                            case 'Maybe.some':
                                var $8089 = self.value;
                                var $8090 = String$flatten$(List$cons$(": ", List$cons$(Kind$Term$show$go$($8089, Maybe$none), List$nil)));
                                var _moti$14 = $8090;
                                break;
                            case 'Maybe.none':
                                var $8091 = "";
                                var _moti$14 = $8091;
                                break;
                        };
                        var $8080 = String$flatten$(List$cons$("case ", List$cons$(_expr$9, List$cons$(" as ", List$cons$(_name$10, List$cons$(_wyth$11, List$cons$(" { ", List$cons$(_cses$13, List$cons$("}", List$cons$(_moti$14, List$nil))))))))));
                        var $8035 = $8080;
                        break;
                    case 'Kind.Term.ori':
                        var $8092 = self.expr;
                        var $8093 = Kind$Term$show$go$($8092, _path$2);
                        var $8035 = $8093;
                        break;
                    case 'Kind.Term.typ':
                        var $8094 = "Type";
                        var $8035 = $8094;
                        break;
                    case 'Kind.Term.app':
                        var $8095 = Kind$Term$show$app$(_term$1, _path$2, List$nil);
                        var $8035 = $8095;
                        break;
                    case 'Kind.Term.hol':
                        var $8096 = "_";
                        var $8035 = $8096;
                        break;
                };
                var $8032 = $8035;
                break;
        };
        return $8032;
    };
    const Kind$Term$show$go = x0 => x1 => Kind$Term$show$go$(x0, x1);

    function Kind$Term$show$(_term$1) {
        var $8097 = Kind$Term$show$go$(_term$1, Maybe$none);
        return $8097;
    };
    const Kind$Term$show = x0 => Kind$Term$show$(x0);

    function Kind$Defs$report$types$(_defs$1, _names$2) {
        var _types$3 = "";
        var _types$4 = (() => {
            var $8100 = _types$3;
            var $8101 = _names$2;
            let _types$5 = $8100;
            let _name$4;
            while ($8101._ === 'List.cons') {
                _name$4 = $8101.head;
                var self = Kind$Map$get$(_name$4, _defs$1);
                switch (self._) {
                    case 'Maybe.some':
                        var $8102 = self.value;
                        var self = $8102;
                        switch (self._) {
                            case 'Kind.Def.new':
                                var $8104 = self.type;
                                var $8105 = (_types$5 + (_name$4 + (": " + (Kind$Term$show$($8104) + "\u{a}"))));
                                var $8103 = $8105;
                                break;
                        };
                        var $8100 = $8103;
                        break;
                    case 'Maybe.none':
                        var $8106 = _types$5;
                        var $8100 = $8106;
                        break;
                };
                _types$5 = $8100;
                $8101 = $8101.tail;
            }
            return _types$5;
        })();
        var $8098 = _types$4;
        return $8098;
    };
    const Kind$Defs$report$types = x0 => x1 => Kind$Defs$report$types$(x0, x1);

    function List$filter$(_f$2, _xs$3) {
        var self = _xs$3;
        switch (self._) {
            case 'List.cons':
                var $8108 = self.head;
                var $8109 = self.tail;
                var self = _f$2($8108);
                if (self) {
                    var $8111 = List$cons$($8108, List$filter$(_f$2, $8109));
                    var $8110 = $8111;
                } else {
                    var $8112 = List$filter$(_f$2, $8109);
                    var $8110 = $8112;
                };
                var $8107 = $8110;
                break;
            case 'List.nil':
                var $8113 = List$nil;
                var $8107 = $8113;
                break;
        };
        return $8107;
    };
    const List$filter = x0 => x1 => List$filter$(x0, x1);

    function Kind$Error$is_undef$(_error$1) {
        var self = _error$1;
        switch (self._) {
            case 'Kind.Error.type_mismatch':
            case 'Kind.Error.show_goal':
            case 'Kind.Error.waiting':
            case 'Kind.Error.indirect':
            case 'Kind.Error.patch':
            case 'Kind.Error.cant_infer':
                var $8115 = Bool$false;
                var $8114 = $8115;
                break;
            case 'Kind.Error.undefined_reference':
                var $8116 = Bool$true;
                var $8114 = $8116;
                break;
        };
        return $8114;
    };
    const Kind$Error$is_undef = x0 => Kind$Error$is_undef$(x0);

    function Kind$Error$is_mistake$(_error$1) {
        var self = _error$1;
        switch (self._) {
            case 'Kind.Error.type_mismatch':
            case 'Kind.Error.cant_infer':
                var $8118 = Bool$true;
                var $8117 = $8118;
                break;
            case 'Kind.Error.show_goal':
            case 'Kind.Error.waiting':
            case 'Kind.Error.indirect':
            case 'Kind.Error.patch':
            case 'Kind.Error.undefined_reference':
                var $8119 = Bool$false;
                var $8117 = $8119;
                break;
        };
        return $8117;
    };
    const Kind$Error$is_mistake = x0 => Kind$Error$is_mistake$(x0);

    function Kind$Error$is_goal$(_error$1) {
        var self = _error$1;
        switch (self._) {
            case 'Kind.Error.type_mismatch':
            case 'Kind.Error.waiting':
            case 'Kind.Error.indirect':
            case 'Kind.Error.patch':
            case 'Kind.Error.undefined_reference':
            case 'Kind.Error.cant_infer':
                var $8121 = Bool$false;
                var $8120 = $8121;
                break;
            case 'Kind.Error.show_goal':
                var $8122 = Bool$true;
                var $8120 = $8122;
                break;
        };
        return $8120;
    };
    const Kind$Error$is_goal = x0 => Kind$Error$is_goal$(x0);

    function Kind$Error$relevant$(_errors$1) {
        var _undefs$2 = List$filter$(Kind$Error$is_undef, _errors$1);
        var _mistakes$3 = List$filter$(Kind$Error$is_mistake, _errors$1);
        var _goals$4 = List$filter$(Kind$Error$is_goal, _errors$1);
        var self = _undefs$2;
        switch (self._) {
            case 'List.nil':
                var self = _mistakes$3;
                switch (self._) {
                    case 'List.cons':
                        var $8125 = self.head;
                        var $8126 = List$concat$(List$cons$($8125, List$nil), _goals$4);
                        var $8124 = $8126;
                        break;
                    case 'List.nil':
                        var $8127 = _goals$4;
                        var $8124 = $8127;
                        break;
                };
                var $8123 = $8124;
                break;
            case 'List.cons':
                var $8128 = List$concat$(_undefs$2, _goals$4);
                var $8123 = $8128;
                break;
        };
        return $8123;
    };
    const Kind$Error$relevant = x0 => Kind$Error$relevant$(x0);

    function Map$(_V$1) {
        var $8129 = null;
        return $8129;
    };
    const Map = x0 => Map$(x0);

    function String$to_bits$(_str$1) {
        var self = _str$1;
        if (self.length === 0) {
            var $8131 = Bits$e;
            var $8130 = $8131;
        } else {
            var $8132 = self.charCodeAt(0);
            var $8133 = self.slice(1);
            var $8134 = (String$to_bits$($8133) + (u16_to_bits($8132)));
            var $8130 = $8134;
        };
        return $8130;
    };
    const String$to_bits = x0 => String$to_bits$(x0);

    function Map$from_list$(_xs$2) {
        var self = _xs$2;
        switch (self._) {
            case 'List.cons':
                var $8136 = self.head;
                var $8137 = self.tail;
                var self = $8136;
                switch (self._) {
                    case 'Pair.new':
                        var $8139 = self.fst;
                        var $8140 = self.snd;
                        var $8141 = (bitsmap_set(String$to_bits$($8139), $8140, Map$from_list$($8137), 'set'));
                        var $8138 = $8141;
                        break;
                };
                var $8135 = $8138;
                break;
            case 'List.nil':
                var $8142 = BitsMap$new;
                var $8135 = $8142;
                break;
        };
        return $8135;
    };
    const Map$from_list = x0 => Map$from_list$(x0);

    function Kind$Context$show$(_context$1) {
        var self = _context$1;
        switch (self._) {
            case 'List.cons':
                var $8144 = self.head;
                var $8145 = self.tail;
                var self = $8144;
                switch (self._) {
                    case 'Pair.new':
                        var $8147 = self.fst;
                        var $8148 = self.snd;
                        var _name$6 = Kind$Name$show$($8147);
                        var _type$7 = Kind$Term$show$(Kind$Term$normalize$($8148, Kind$Map$new));
                        var _rest$8 = Kind$Context$show$($8145);
                        var $8149 = (_rest$8 + ("- " + (_name$6 + (": " + (_type$7 + "\u{a}")))));
                        var $8146 = $8149;
                        break;
                };
                var $8143 = $8146;
                break;
            case 'List.nil':
                var $8150 = "";
                var $8143 = $8150;
                break;
        };
        return $8143;
    };
    const Kind$Context$show = x0 => Kind$Context$show$(x0);

    function Kind$Term$expand_at$(_path$1, _term$2, _defs$3) {
        var $8151 = Kind$Term$patch_at$(_path$1, _term$2, (_term$4 => {
            var self = _term$4;
            switch (self._) {
                case 'Kind.Term.ref':
                    var $8153 = self.name;
                    var self = Kind$Map$get$($8153, _defs$3);
                    switch (self._) {
                        case 'Maybe.some':
                            var $8155 = self.value;
                            var self = $8155;
                            switch (self._) {
                                case 'Kind.Def.new':
                                    var $8157 = self.term;
                                    var $8158 = $8157;
                                    var $8156 = $8158;
                                    break;
                            };
                            var $8154 = $8156;
                            break;
                        case 'Maybe.none':
                            var $8159 = Kind$Term$ref$($8153);
                            var $8154 = $8159;
                            break;
                    };
                    var $8152 = $8154;
                    break;
                case 'Kind.Term.var':
                case 'Kind.Term.typ':
                case 'Kind.Term.all':
                case 'Kind.Term.lam':
                case 'Kind.Term.app':
                case 'Kind.Term.let':
                case 'Kind.Term.def':
                case 'Kind.Term.ann':
                case 'Kind.Term.gol':
                case 'Kind.Term.hol':
                case 'Kind.Term.nat':
                case 'Kind.Term.chr':
                case 'Kind.Term.str':
                case 'Kind.Term.cse':
                case 'Kind.Term.ori':
                    var $8160 = _term$4;
                    var $8152 = $8160;
                    break;
            };
            return $8152;
        }));
        return $8151;
    };
    const Kind$Term$expand_at = x0 => x1 => x2 => Kind$Term$expand_at$(x0, x1, x2);

    function Kind$Term$expand_ct$(_term$1, _defs$2, _arity$3) {
        var self = _term$1;
        switch (self._) {
            case 'Kind.Term.var':
                var $8162 = self.name;
                var $8163 = self.indx;
                var $8164 = Kind$Term$var$($8162, $8163);
                var $8161 = $8164;
                break;
            case 'Kind.Term.ref':
                var $8165 = self.name;
                var self = Kind$Map$get$($8165, _defs$2);
                switch (self._) {
                    case 'Maybe.some':
                        var $8167 = self.value;
                        var self = $8167;
                        switch (self._) {
                            case 'Kind.Def.new':
                                var $8169 = self.term;
                                var $8170 = self.isct;
                                var $8171 = self.arit;
                                var self = ($8170 && (_arity$3 > $8171));
                                if (self) {
                                    var $8173 = $8169;
                                    var $8172 = $8173;
                                } else {
                                    var $8174 = Kind$Term$ref$($8165);
                                    var $8172 = $8174;
                                };
                                var $8168 = $8172;
                                break;
                        };
                        var $8166 = $8168;
                        break;
                    case 'Maybe.none':
                        var $8175 = Kind$Term$ref$($8165);
                        var $8166 = $8175;
                        break;
                };
                var $8161 = $8166;
                break;
            case 'Kind.Term.all':
                var $8176 = self.eras;
                var $8177 = self.self;
                var $8178 = self.name;
                var $8179 = self.xtyp;
                var $8180 = self.body;
                var $8181 = Kind$Term$all$($8176, $8177, $8178, Kind$Term$expand_ct$($8179, _defs$2, 0n), (_s$9 => _x$10 => {
                    var $8182 = Kind$Term$expand_ct$($8180(_s$9)(_x$10), _defs$2, 0n);
                    return $8182;
                }));
                var $8161 = $8181;
                break;
            case 'Kind.Term.lam':
                var $8183 = self.name;
                var $8184 = self.body;
                var $8185 = Kind$Term$lam$($8183, (_x$6 => {
                    var $8186 = Kind$Term$expand_ct$($8184(_x$6), _defs$2, 0n);
                    return $8186;
                }));
                var $8161 = $8185;
                break;
            case 'Kind.Term.app':
                var $8187 = self.func;
                var $8188 = self.argm;
                var $8189 = Kind$Term$app$(Kind$Term$expand_ct$($8187, _defs$2, Nat$succ$(_arity$3)), Kind$Term$expand_ct$($8188, _defs$2, 0n));
                var $8161 = $8189;
                break;
            case 'Kind.Term.let':
                var $8190 = self.name;
                var $8191 = self.expr;
                var $8192 = self.body;
                var $8193 = Kind$Term$let$($8190, Kind$Term$expand_ct$($8191, _defs$2, 0n), (_x$7 => {
                    var $8194 = Kind$Term$expand_ct$($8192(_x$7), _defs$2, 0n);
                    return $8194;
                }));
                var $8161 = $8193;
                break;
            case 'Kind.Term.def':
                var $8195 = self.name;
                var $8196 = self.expr;
                var $8197 = self.body;
                var $8198 = Kind$Term$def$($8195, Kind$Term$expand_ct$($8196, _defs$2, 0n), (_x$7 => {
                    var $8199 = Kind$Term$expand_ct$($8197(_x$7), _defs$2, 0n);
                    return $8199;
                }));
                var $8161 = $8198;
                break;
            case 'Kind.Term.ann':
                var $8200 = self.done;
                var $8201 = self.term;
                var $8202 = self.type;
                var $8203 = Kind$Term$ann$($8200, Kind$Term$expand_ct$($8201, _defs$2, 0n), Kind$Term$expand_ct$($8202, _defs$2, 0n));
                var $8161 = $8203;
                break;
            case 'Kind.Term.gol':
                var $8204 = self.name;
                var $8205 = self.dref;
                var $8206 = self.verb;
                var $8207 = Kind$Term$gol$($8204, $8205, $8206);
                var $8161 = $8207;
                break;
            case 'Kind.Term.hol':
                var $8208 = self.path;
                var $8209 = Kind$Term$hol$($8208);
                var $8161 = $8209;
                break;
            case 'Kind.Term.nat':
                var $8210 = self.natx;
                var $8211 = Kind$Term$nat$($8210);
                var $8161 = $8211;
                break;
            case 'Kind.Term.chr':
                var $8212 = self.chrx;
                var $8213 = Kind$Term$chr$($8212);
                var $8161 = $8213;
                break;
            case 'Kind.Term.str':
                var $8214 = self.strx;
                var $8215 = Kind$Term$str$($8214);
                var $8161 = $8215;
                break;
            case 'Kind.Term.ori':
                var $8216 = self.orig;
                var $8217 = self.expr;
                var $8218 = Kind$Term$ori$($8216, $8217);
                var $8161 = $8218;
                break;
            case 'Kind.Term.typ':
                var $8219 = Kind$Term$typ;
                var $8161 = $8219;
                break;
            case 'Kind.Term.cse':
                var $8220 = _term$1;
                var $8161 = $8220;
                break;
        };
        return $8161;
    };
    const Kind$Term$expand_ct = x0 => x1 => x2 => Kind$Term$expand_ct$(x0, x1, x2);

    function Kind$Term$expand$(_dref$1, _term$2, _defs$3) {
        var _term$4 = Kind$Term$normalize$(_term$2, Kind$Map$new);
        var _term$5 = (() => {
            var $8223 = _term$4;
            var $8224 = _dref$1;
            let _term$6 = $8223;
            let _path$5;
            while ($8224._ === 'List.cons') {
                _path$5 = $8224.head;
                var _term$7 = Kind$Term$expand_at$(_path$5, _term$6, _defs$3);
                var _term$8 = Kind$Term$normalize$(_term$7, Kind$Map$new);
                var _term$9 = Kind$Term$expand_ct$(_term$8, _defs$3, 0n);
                var _term$10 = Kind$Term$normalize$(_term$9, Kind$Map$new);
                var $8223 = _term$10;
                _term$6 = $8223;
                $8224 = $8224.tail;
            }
            return _term$6;
        })();
        var $8221 = _term$5;
        return $8221;
    };
    const Kind$Term$expand = x0 => x1 => x2 => Kind$Term$expand$(x0, x1, x2);

    function Kind$Error$show$(_error$1, _defs$2) {
        var self = _error$1;
        switch (self._) {
            case 'Kind.Error.type_mismatch':
                var $8226 = self.expected;
                var $8227 = self.detected;
                var $8228 = self.context;
                var self = $8226;
                switch (self._) {
                    case 'Either.left':
                        var $8230 = self.value;
                        var $8231 = $8230;
                        var _expected$7 = $8231;
                        break;
                    case 'Either.right':
                        var $8232 = self.value;
                        var $8233 = Kind$Term$show$(Kind$Term$normalize$($8232, Map$from_list$(List$nil)));
                        var _expected$7 = $8233;
                        break;
                };
                var self = $8227;
                switch (self._) {
                    case 'Either.left':
                        var $8234 = self.value;
                        var $8235 = $8234;
                        var _detected$8 = $8235;
                        break;
                    case 'Either.right':
                        var $8236 = self.value;
                        var $8237 = Kind$Term$show$(Kind$Term$normalize$($8236, Map$from_list$(List$nil)));
                        var _detected$8 = $8237;
                        break;
                };
                var $8229 = ("Type mismatch.\u{a}" + ("- Expected: " + (_expected$7 + ("\u{a}" + ("- Detected: " + (_detected$8 + ("\u{a}" + (() => {
                    var self = $8228;
                    switch (self._) {
                        case 'List.nil':
                            var $8238 = "";
                            return $8238;
                        case 'List.cons':
                            var $8239 = ("With context:\u{a}" + Kind$Context$show$($8228));
                            return $8239;
                    };
                })())))))));
                var $8225 = $8229;
                break;
            case 'Kind.Error.show_goal':
                var $8240 = self.name;
                var $8241 = self.dref;
                var $8242 = self.verb;
                var $8243 = self.goal;
                var $8244 = self.context;
                var _goal_name$8 = ("Goal ?" + (Kind$Name$show$($8240) + ":\u{a}"));
                var self = $8243;
                switch (self._) {
                    case 'Maybe.some':
                        var $8246 = self.value;
                        var _goal$10 = Kind$Term$expand$($8241, $8246, _defs$2);
                        var $8247 = ("With type: " + ((() => {
                            var self = $8242;
                            if (self) {
                                var $8248 = Kind$Term$show$go$(_goal$10, Maybe$some$((_x$11 => {
                                    var $8249 = _x$11;
                                    return $8249;
                                })));
                                return $8248;
                            } else {
                                var $8250 = Kind$Term$show$(_goal$10);
                                return $8250;
                            };
                        })() + "\u{a}"));
                        var _with_type$9 = $8247;
                        break;
                    case 'Maybe.none':
                        var $8251 = "";
                        var _with_type$9 = $8251;
                        break;
                };
                var self = $8244;
                switch (self._) {
                    case 'List.nil':
                        var $8252 = "";
                        var _with_ctxt$10 = $8252;
                        break;
                    case 'List.cons':
                        var $8253 = ("With context:\u{a}" + Kind$Context$show$($8244));
                        var _with_ctxt$10 = $8253;
                        break;
                };
                var $8245 = String$flatten$(List$cons$(_goal_name$8, List$cons$(_with_type$9, List$cons$(_with_ctxt$10, List$nil))));
                var $8225 = $8245;
                break;
            case 'Kind.Error.waiting':
                var $8254 = self.name;
                var $8255 = ("Waiting for \'" + ($8254 + "\'."));
                var $8225 = $8255;
                break;
            case 'Kind.Error.indirect':
                var $8256 = self.name;
                var $8257 = ("Error on dependency \'" + ($8256 + "\'."));
                var $8225 = $8257;
                break;
            case 'Kind.Error.patch':
                var $8258 = self.term;
                var $8259 = ("Patching: " + Kind$Term$show$($8258));
                var $8225 = $8259;
                break;
            case 'Kind.Error.undefined_reference':
                var $8260 = self.name;
                var $8261 = ("Undefined reference: " + (Kind$Name$show$($8260) + "\u{a}"));
                var $8225 = $8261;
                break;
            case 'Kind.Error.cant_infer':
                var $8262 = self.term;
                var $8263 = self.context;
                var _term$6 = Kind$Term$show$($8262);
                var _context$7 = Kind$Context$show$($8263);
                var $8264 = ("Can\'t infer type of: " + (_term$6 + ("\u{a}" + ("With context:\u{a}" + _context$7))));
                var $8225 = $8264;
                break;
        };
        return $8225;
    };
    const Kind$Error$show = x0 => x1 => Kind$Error$show$(x0, x1);

    function Kind$Error$origin$(_error$1) {
        var self = _error$1;
        switch (self._) {
            case 'Kind.Error.type_mismatch':
                var $8266 = self.origin;
                var $8267 = $8266;
                var $8265 = $8267;
                break;
            case 'Kind.Error.undefined_reference':
                var $8268 = self.origin;
                var $8269 = $8268;
                var $8265 = $8269;
                break;
            case 'Kind.Error.cant_infer':
                var $8270 = self.origin;
                var $8271 = $8270;
                var $8265 = $8271;
                break;
            case 'Kind.Error.show_goal':
            case 'Kind.Error.waiting':
            case 'Kind.Error.indirect':
            case 'Kind.Error.patch':
                var $8272 = Maybe$none;
                var $8265 = $8272;
                break;
        };
        return $8265;
    };
    const Kind$Error$origin = x0 => Kind$Error$origin$(x0);

    function Kind$Defs$report$errors$(_defs$1) {
        var _errors$2 = "";
        var _errors$3 = (() => {
            var $8275 = _errors$2;
            var $8276 = BitsMap$keys$(_defs$1);
            let _errors$4 = $8275;
            let _key$3;
            while ($8276._ === 'List.cons') {
                _key$3 = $8276.head;
                var _name$5 = Kind$Name$from_bits$(_key$3);
                var _defn$6 = Kind$Map$get$(_name$5, _defs$1);
                var self = _defn$6;
                switch (self._) {
                    case 'Maybe.some':
                        var $8277 = self.value;
                        var self = $8277;
                        switch (self._) {
                            case 'Kind.Def.new':
                                var $8279 = self.file;
                                var $8280 = self.code;
                                var $8281 = self.name;
                                var $8282 = self.stat;
                                var self = $8282;
                                switch (self._) {
                                    case 'Kind.Status.fail':
                                        var $8284 = self.errors;
                                        var self = $8284;
                                        switch (self._) {
                                            case 'List.nil':
                                                var $8286 = _errors$4;
                                                var $8285 = $8286;
                                                break;
                                            case 'List.cons':
                                                var _name_str$20 = $8281;
                                                var _rel_errs$21 = Kind$Error$relevant$($8284);
                                                var _errors$22 = (() => {
                                                    var $8289 = _errors$4;
                                                    var $8290 = _rel_errs$21;
                                                    let _errors$23 = $8289;
                                                    let _err$22;
                                                    while ($8290._ === 'List.cons') {
                                                        _err$22 = $8290.head;
                                                        var _err_msg$24 = Kind$Error$show$(_err$22, _defs$1);
                                                        var _ori_val$25 = Kind$Error$origin$(_err$22);
                                                        var self = _ori_val$25;
                                                        switch (self._) {
                                                            case 'Maybe.some':
                                                                var $8291 = self.value;
                                                                var self = $8291;
                                                                switch (self._) {
                                                                    case 'Pair.new':
                                                                        var $8293 = self.fst;
                                                                        var $8294 = self.snd;
                                                                        var _inside$29 = ("Inside \'" + ($8279 + "\':\u{a}"));
                                                                        var _source$30 = Kind$Code$highlight$($8280, $8293, $8294);
                                                                        var $8295 = (_errors$23 + (_err_msg$24 + (_inside$29 + (_source$30 + ("\u{a}" + "\u{a}")))));
                                                                        var $8292 = $8295;
                                                                        break;
                                                                };
                                                                var $8289 = $8292;
                                                                break;
                                                            case 'Maybe.none':
                                                                var $8296 = (_errors$23 + (_err_msg$24 + "\u{a}"));
                                                                var $8289 = $8296;
                                                                break;
                                                        };
                                                        _errors$23 = $8289;
                                                        $8290 = $8290.tail;
                                                    }
                                                    return _errors$23;
                                                })();
                                                var $8287 = _errors$22;
                                                var $8285 = $8287;
                                                break;
                                        };
                                        var $8283 = $8285;
                                        break;
                                    case 'Kind.Status.init':
                                    case 'Kind.Status.wait':
                                    case 'Kind.Status.done':
                                        var $8297 = _errors$4;
                                        var $8283 = $8297;
                                        break;
                                };
                                var $8278 = $8283;
                                break;
                        };
                        var $8275 = $8278;
                        break;
                    case 'Maybe.none':
                        var $8298 = _errors$4;
                        var $8275 = $8298;
                        break;
                };
                _errors$4 = $8275;
                $8276 = $8276.tail;
            }
            return _errors$4;
        })();
        var $8273 = _errors$3;
        return $8273;
    };
    const Kind$Defs$report$errors = x0 => Kind$Defs$report$errors$(x0);

    function Kind$Defs$report$(_defs$1, _names$2) {
        var _types$3 = Kind$Defs$report$types$(_defs$1, _names$2);
        var _errors$4 = Kind$Defs$report$errors$(_defs$1);
        var self = _errors$4;
        if (self.length === 0) {
            var $8300 = "All terms check.";
            var _errors$5 = $8300;
        } else {
            var $8301 = self.charCodeAt(0);
            var $8302 = self.slice(1);
            var $8303 = _errors$4;
            var _errors$5 = $8303;
        };
        var $8299 = (_types$3 + ("\u{a}" + _errors$5));
        return $8299;
    };
    const Kind$Defs$report = x0 => x1 => Kind$Defs$report$(x0, x1);

    function IO$set_file$(_name$1, _content$2) {
        var $8304 = IO$ask$("set_file", (_name$1 + ("=" + _content$2)), (_ok$3 => {
            var $8305 = IO$end$(Unit$new);
            return $8305;
        }));
        return $8304;
    };
    const IO$set_file = x0 => x1 => IO$set_file$(x0, x1);

    function Bool$show$(_b$1) {
        var self = _b$1;
        if (self) {
            var $8307 = "Bool.true";
            var $8306 = $8307;
        } else {
            var $8308 = "Bool.false";
            var $8306 = $8308;
        };
        return $8306;
    };
    const Bool$show = x0 => Bool$show$(x0);

    function Kind$Defs$cache$go$(_kvs$1) {
        var self = _kvs$1;
        switch (self._) {
            case 'List.cons':
                var $8310 = self.head;
                var $8311 = self.tail;
                var self = $8310;
                switch (self._) {
                    case 'Pair.new':
                        var $8313 = self.fst;
                        var $8314 = self.snd;
                        var self = $8314;
                        switch (self._) {
                            case 'Kind.Def.new':
                                var $8316 = self.file;
                                var $8317 = self.term;
                                var $8318 = self.type;
                                var $8319 = self.isct;
                                var $8320 = self.arit;
                                var $8321 = self.stat;
                                var self = $8321;
                                switch (self._) {
                                    case 'Kind.Status.init':
                                    case 'Kind.Status.wait':
                                    case 'Kind.Status.fail':
                                        var $8323 = Kind$Defs$cache$go$($8311);
                                        var $8322 = $8323;
                                        break;
                                    case 'Kind.Status.done':
                                        var $8324 = IO$monad$((_m$bind$16 => _m$pure$17 => {
                                            var $8325 = _m$bind$16;
                                            return $8325;
                                        }))(IO$get_file_mtime$($8316))((_time$16 => {
                                            var $8326 = IO$monad$((_m$bind$17 => _m$pure$18 => {
                                                var $8327 = _m$bind$17;
                                                return $8327;
                                            }))(IO$set_file$((".cache/" + ($8313 + ".term")), Kind$Core$show$($8317)))((_$17 => {
                                                var $8328 = IO$monad$((_m$bind$18 => _m$pure$19 => {
                                                    var $8329 = _m$bind$18;
                                                    return $8329;
                                                }))(IO$set_file$((".cache/" + ($8313 + ".type")), Kind$Core$show$($8318)))((_$18 => {
                                                    var $8330 = IO$monad$((_m$bind$19 => _m$pure$20 => {
                                                        var $8331 = _m$bind$19;
                                                        return $8331;
                                                    }))(IO$set_file$((".cache/" + ($8313 + ".isct")), Bool$show$($8319)))((_$19 => {
                                                        var $8332 = IO$monad$((_m$bind$20 => _m$pure$21 => {
                                                            var $8333 = _m$bind$20;
                                                            return $8333;
                                                        }))(IO$set_file$((".cache/" + ($8313 + ".arit")), Nat$show$($8320)))((_$20 => {
                                                            var $8334 = IO$monad$((_m$bind$21 => _m$pure$22 => {
                                                                var $8335 = _m$bind$21;
                                                                return $8335;
                                                            }))(IO$set_file$((".cache/" + ($8313 + ".file")), $8316))((_$21 => {
                                                                var $8336 = IO$monad$((_m$bind$22 => _m$pure$23 => {
                                                                    var $8337 = _m$bind$22;
                                                                    return $8337;
                                                                }))(IO$set_file$((".cache/" + ($8313 + ".time")), _time$16))((_$22 => {
                                                                    var $8338 = Kind$Defs$cache$go$($8311);
                                                                    return $8338;
                                                                }));
                                                                return $8336;
                                                            }));
                                                            return $8334;
                                                        }));
                                                        return $8332;
                                                    }));
                                                    return $8330;
                                                }));
                                                return $8328;
                                            }));
                                            return $8326;
                                        }));
                                        var $8322 = $8324;
                                        break;
                                };
                                var $8315 = $8322;
                                break;
                        };
                        var $8312 = $8315;
                        break;
                };
                var $8309 = $8312;
                break;
            case 'List.nil':
                var $8339 = IO$monad$((_m$bind$2 => _m$pure$3 => {
                    var $8340 = _m$pure$3;
                    return $8340;
                }))(Unit$new);
                var $8309 = $8339;
                break;
        };
        return $8309;
    };
    const Kind$Defs$cache$go = x0 => Kind$Defs$cache$go$(x0);

    function Kind$Defs$cache$(_defs$1) {
        var $8341 = Kind$Defs$cache$go$(Kind$Map$to_list$(_defs$1));
        return $8341;
    };
    const Kind$Defs$cache = x0 => Kind$Defs$cache$(x0);

    function Kind$api$io$check_file$(_file$1) {
        var $8342 = IO$monad$((_m$bind$2 => _m$pure$3 => {
            var $8343 = _m$bind$2;
            return $8343;
        }))(Kind$Synth$file$(_file$1, Kind$Map$new))((_loaded$2 => {
            var self = _loaded$2;
            switch (self._) {
                case 'Either.left':
                    var $8345 = self.value;
                    var $8346 = IO$monad$((_m$bind$4 => _m$pure$5 => {
                        var $8347 = _m$bind$4;
                        return $8347;
                    }))(IO$print$(String$flatten$(List$cons$("On \'", List$cons$(_file$1, List$cons$("\':", List$nil))))))((_$4 => {
                        var $8348 = IO$print$($8345);
                        return $8348;
                    }));
                    var $8344 = $8346;
                    break;
                case 'Either.right':
                    var $8349 = self.value;
                    var self = $8349;
                    switch (self._) {
                        case 'Pair.new':
                            var $8351 = self.fst;
                            var $8352 = self.snd;
                            var _nams$6 = $8351;
                            var _defs$7 = $8352;
                            var self = _nams$6;
                            switch (self._) {
                                case 'List.nil':
                                    var $8354 = IO$print$(("File not found or empty: \'" + (_file$1 + "\'.")));
                                    var $8353 = $8354;
                                    break;
                                case 'List.cons':
                                    var $8355 = IO$monad$((_m$bind$10 => _m$pure$11 => {
                                        var $8356 = _m$bind$10;
                                        return $8356;
                                    }))(IO$print$(Kind$Defs$report$(_defs$7, _nams$6)))((_$10 => {
                                        var $8357 = Kind$Defs$cache$(_defs$7);
                                        return $8357;
                                    }));
                                    var $8353 = $8355;
                                    break;
                            };
                            var $8350 = $8353;
                            break;
                    };
                    var $8344 = $8350;
                    break;
            };
            return $8344;
        }));
        return $8342;
    };
    const Kind$api$io$check_file = x0 => Kind$api$io$check_file$(x0);

    function Kind$Synth$files$go$(_files$1, _defs$2) {
        var self = _files$1;
        switch (self._) {
            case 'List.cons':
                var $8359 = self.head;
                var $8360 = self.tail;
                var $8361 = IO$monad$((_m$bind$5 => _m$pure$6 => {
                    var $8362 = _m$bind$5;
                    return $8362;
                }))(Kind$Synth$file$($8359, _defs$2))((_file_synth$5 => {
                    var self = _file_synth$5;
                    switch (self._) {
                        case 'Either.right':
                            var $8364 = self.value;
                            var _nams$7 = Pair$fst$($8364);
                            var _defs$8 = Pair$snd$($8364);
                            var $8365 = IO$monad$((_m$bind$9 => _m$pure$10 => {
                                var $8366 = _m$bind$9;
                                return $8366;
                            }))(Kind$Synth$files$go$($8360, _defs$8))((_rest$9 => {
                                var _nams$10 = List$concat$(_nams$7, Pair$fst$(_rest$9));
                                var _defs$11 = Pair$snd$(_rest$9);
                                var $8367 = IO$monad$((_m$bind$12 => _m$pure$13 => {
                                    var $8368 = _m$pure$13;
                                    return $8368;
                                }))(Pair$new$(_nams$10, _defs$11));
                                return $8367;
                            }));
                            var $8363 = $8365;
                            break;
                        case 'Either.left':
                            var $8369 = Kind$Synth$files$go$($8360, _defs$2);
                            var $8363 = $8369;
                            break;
                    };
                    return $8363;
                }));
                var $8358 = $8361;
                break;
            case 'List.nil':
                var $8370 = IO$monad$((_m$bind$3 => _m$pure$4 => {
                    var $8371 = _m$pure$4;
                    return $8371;
                }))(Pair$new$(List$nil, _defs$2));
                var $8358 = $8370;
                break;
        };
        return $8358;
    };
    const Kind$Synth$files$go = x0 => x1 => Kind$Synth$files$go$(x0, x1);

    function Kind$Synth$remove_duplicate_names$(_names$1) {
        var _map$2 = List$fold$(_names$1, Kind$Map$new, (_name$2 => {
            var $8373 = Kind$Map$set(_name$2)(Unit$new);
            return $8373;
        }));
        var $8372 = List$mapped$(BitsMap$keys$(_map$2), Kind$Name$from_bits);
        return $8372;
    };
    const Kind$Synth$remove_duplicate_names = x0 => Kind$Synth$remove_duplicate_names$(x0);

    function Kind$Synth$files$(_files$1, _defs$2) {
        var $8374 = IO$monad$((_m$bind$3 => _m$pure$4 => {
            var $8375 = _m$bind$3;
            return $8375;
        }))(Kind$Synth$files$go$(_files$1, _defs$2))((_got$3 => {
            var _nams$4 = Kind$Synth$remove_duplicate_names$(Pair$fst$(_got$3));
            var _defs$5 = Pair$snd$(_got$3);
            var $8376 = IO$monad$((_m$bind$6 => _m$pure$7 => {
                var $8377 = _m$pure$7;
                return $8377;
            }))(Pair$new$(_nams$4, _defs$5));
            return $8376;
        }));
        return $8374;
    };
    const Kind$Synth$files = x0 => x1 => Kind$Synth$files$(x0, x1);

    function Kind$api$io$check_files$(_files$1) {
        var $8378 = IO$monad$((_m$bind$2 => _m$pure$3 => {
            var $8379 = _m$bind$2;
            return $8379;
        }))(Kind$Synth$files$(_files$1, Kind$Map$new))((_loaded$2 => {
            var _nams$3 = Pair$fst$(_loaded$2);
            var _defs$4 = Pair$snd$(_loaded$2);
            var self = _nams$3;
            switch (self._) {
                case 'List.nil':
                    var $8381 = IO$print$("No valid Kind file found.");
                    var $8380 = $8381;
                    break;
                case 'List.cons':
                    var $8382 = IO$monad$((_m$bind$7 => _m$pure$8 => {
                        var $8383 = _m$bind$7;
                        return $8383;
                    }))(IO$print$(Kind$Defs$report$(_defs$4, _nams$3)))((_$7 => {
                        var $8384 = Kind$Defs$cache$(_defs$4);
                        return $8384;
                    }));
                    var $8380 = $8382;
                    break;
            };
            return $8380;
        }));
        return $8378;
    };
    const Kind$api$io$check_files = x0 => Kind$api$io$check_files$(x0);

    function Kind$api$io$check_term$(_name$1) {
        var $8385 = IO$monad$((_m$bind$2 => _m$pure$3 => {
            var $8386 = _m$bind$2;
            return $8386;
        }))(Kind$Synth$one$(_name$1, Kind$Map$new))((_defs$2 => {
            var self = _defs$2;
            switch (self._) {
                case 'Maybe.some':
                    var $8388 = self.value;
                    var $8389 = IO$monad$((_m$bind$4 => _m$pure$5 => {
                        var $8390 = _m$bind$4;
                        return $8390;
                    }))(IO$print$(Kind$Defs$report$($8388, List$cons$(_name$1, List$nil))))((_$4 => {
                        var $8391 = Kind$Defs$cache$($8388);
                        return $8391;
                    }));
                    var $8387 = $8389;
                    break;
                case 'Maybe.none':
                    var _notfound$3 = ("Term not found: \'" + (_name$1 + "\'."));
                    var _filelist$4 = List$mapped$(Kind$Synth$files_of$(_name$1), (_x$4 => {
                        var $8393 = ("\'" + (_x$4 + "\'"));
                        return $8393;
                    }));
                    var _searched$5 = ("Searched on: " + (String$join$(", ", _filelist$4) + "."));
                    var $8392 = IO$print$((_notfound$3 + ("\u{a}" + _searched$5)));
                    var $8387 = $8392;
                    break;
            };
            return $8387;
        }));
        return $8385;
    };
    const Kind$api$io$check_term = x0 => Kind$api$io$check_term$(x0);

    function Kind$api$io$show_term$(_name$1) {
        var $8394 = IO$monad$((_m$bind$2 => _m$pure$3 => {
            var $8395 = _m$bind$2;
            return $8395;
        }))(Kind$Synth$one$(_name$1, Kind$Map$new))((_new_defs$2 => {
            var $8396 = IO$print$((() => {
                var self = _new_defs$2;
                switch (self._) {
                    case 'Maybe.some':
                        var $8397 = self.value;
                        var _defs$4 = $8397;
                        var _defn$5 = Kind$Map$get$(_name$1, _defs$4);
                        var self = _defn$5;
                        switch (self._) {
                            case 'Maybe.some':
                                var $8399 = self.value;
                                var self = $8399;
                                switch (self._) {
                                    case 'Kind.Def.new':
                                        var $8401 = self.term;
                                        var _term$16 = $8401;
                                        var $8402 = Kind$Term$show$(_term$16);
                                        var $8400 = $8402;
                                        break;
                                };
                                var $8398 = $8400;
                                break;
                            case 'Maybe.none':
                                var $8403 = ("Term not found: \'" + (_name$1 + "\'."));
                                var $8398 = $8403;
                                break;
                        };
                        return $8398;
                    case 'Maybe.none':
                        var _notfound$3 = ("Term not found: \'" + (_name$1 + "\'."));
                        var _filelist$4 = List$mapped$(Kind$Synth$files_of$(_name$1), (_x$4 => {
                            var $8405 = ("\'" + (_x$4 + "\'"));
                            return $8405;
                        }));
                        var _searched$5 = ("Searched on: " + (String$join$(", ", _filelist$4) + "."));
                        var $8404 = (_notfound$3 + ("\u{a}" + _searched$5));
                        return $8404;
                };
            })());
            return $8396;
        }));
        return $8394;
    };
    const Kind$api$io$show_term = x0 => Kind$api$io$show_term$(x0);

    function Kind$api$io$show_term_normal$(_name$1) {
        var $8406 = IO$monad$((_m$bind$2 => _m$pure$3 => {
            var $8407 = _m$bind$2;
            return $8407;
        }))(Kind$Synth$one$(_name$1, Kind$Map$new))((_new_defs$2 => {
            var $8408 = IO$print$((() => {
                var self = _new_defs$2;
                switch (self._) {
                    case 'Maybe.some':
                        var $8409 = self.value;
                        var _defs$4 = $8409;
                        var _defn$5 = Kind$Map$get$(_name$1, _defs$4);
                        var self = _defn$5;
                        switch (self._) {
                            case 'Maybe.some':
                                var $8411 = self.value;
                                var self = $8411;
                                switch (self._) {
                                    case 'Kind.Def.new':
                                        var $8413 = self.term;
                                        var _term$16 = $8413;
                                        var _norm$17 = Kind$Term$normalize$(_term$16, _defs$4);
                                        var $8414 = Kind$Term$show$(_norm$17);
                                        var $8412 = $8414;
                                        break;
                                };
                                var $8410 = $8412;
                                break;
                            case 'Maybe.none':
                                var $8415 = ("Term not found: \'" + (_name$1 + "\'."));
                                var $8410 = $8415;
                                break;
                        };
                        return $8410;
                    case 'Maybe.none':
                        var _notfound$3 = ("Term not found: \'" + (_name$1 + "\'."));
                        var _filelist$4 = List$mapped$(Kind$Synth$files_of$(_name$1), (_x$4 => {
                            var $8417 = ("\'" + (_x$4 + "\'"));
                            return $8417;
                        }));
                        var _searched$5 = ("Searched on: " + (String$join$(", ", _filelist$4) + "."));
                        var $8416 = (_notfound$3 + ("\u{a}" + _searched$5));
                        return $8416;
                };
            })());
            return $8408;
        }));
        return $8406;
    };
    const Kind$api$io$show_term_normal = x0 => Kind$api$io$show_term_normal$(x0);

    function IO$purify$(_io$2) {
        var IO$purify$ = (_io$2) => ({
            ctr: 'TCO',
            arg: [_io$2]
        });
        var IO$purify = _io$2 => IO$purify$(_io$2);
        var arg = [_io$2];
        while (true) {
            let [_io$2] = arg;
            var R = (() => {
                var self = _io$2;
                switch (self._) {
                    case 'IO.end':
                        var $8418 = self.value;
                        var $8419 = $8418;
                        return $8419;
                    case 'IO.ask':
                        var $8420 = self.then;
                        var $8421 = IO$purify$($8420(""));
                        return $8421;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const IO$purify = x0 => IO$purify$(x0);

    function Kind$api$check_code$(_code$1) {
        var self = Kind$Defs$read$("Main.kind", _code$1, Kind$Map$new);
        switch (self._) {
            case 'Either.left':
                var $8423 = self.value;
                var $8424 = $8423;
                var $8422 = $8424;
                break;
            case 'Either.right':
                var $8425 = self.value;
                var $8426 = IO$purify$((() => {
                    var _defs$3 = $8425;
                    var _nams$4 = List$mapped$(BitsMap$keys$(_defs$3), Kind$Name$from_bits);
                    var $8427 = IO$monad$((_m$bind$5 => _m$pure$6 => {
                        var $8428 = _m$bind$5;
                        return $8428;
                    }))(Kind$Synth$many$(_nams$4, _defs$3))((_defs$5 => {
                        var $8429 = IO$monad$((_m$bind$6 => _m$pure$7 => {
                            var $8430 = _m$pure$7;
                            return $8430;
                        }))(Kind$Defs$report$(_defs$5, _nams$4));
                        return $8429;
                    }));
                    return $8427;
                })());
                var $8422 = $8426;
                break;
        };
        return $8422;
    };
    const Kind$api$check_code = x0 => Kind$api$check_code$(x0);

    function Kind$Term$read$(_code$1) {
        var self = Kind$Parser$term$(0n, _code$1);
        switch (self._) {
            case 'Parser.Reply.value':
                var $8432 = self.val;
                var $8433 = Maybe$some$($8432);
                var $8431 = $8433;
                break;
            case 'Parser.Reply.error':
                var $8434 = Maybe$none;
                var $8431 = $8434;
                break;
        };
        return $8431;
    };
    const Kind$Term$read = x0 => Kind$Term$read$(x0);
    const Kind$api$export = (() => {
        var _e$1 = Kind$api$io$term_to_core;
        var _e$2 = Kind$api$io$check_file;
        var _e$3 = Kind$api$io$check_files;
        var _e$4 = Kind$api$io$check_term;
        var _e$5 = Kind$api$io$show_term;
        var _e$6 = Kind$api$io$show_term_normal;
        var _e$7 = Kind$api$check_code;
        var _e$8 = Kind$Term$read;
        var $8435 = IO$monad$((_m$bind$9 => _m$pure$10 => {
            var $8436 = _m$pure$10;
            return $8436;
        }))(Unit$new);
        return $8435;
    })();
    return {
        '$main$': () => run(Kind$api$export),
        'run': run,
        'IO': IO,
        'IO.ask': IO$ask,
        'IO.bind': IO$bind,
        'IO.end': IO$end,
        'IO.monad': IO$monad,
        'Maybe': Maybe,
        'BitsMap': BitsMap,
        'Maybe.none': Maybe$none,
        'BitsMap.get': BitsMap$get,
        'Bits.e': Bits$e,
        'Bits.o': Bits$o,
        'Bits.i': Bits$i,
        'Bool.true': Bool$true,
        'Bool.false': Bool$false,
        'Cmp.as_ltn': Cmp$as_ltn,
        'Cmp.ltn': Cmp$ltn,
        'Cmp.gtn': Cmp$gtn,
        'Word.cmp.go': Word$cmp$go,
        'Cmp.eql': Cmp$eql,
        'Word.cmp': Word$cmp,
        'Word.ltn': Word$ltn,
        'Nat.succ': Nat$succ,
        'Nat.zero': Nat$zero,
        'U16.ltn': U16$ltn,
        'U16.new': U16$new,
        'Nat.apply': Nat$apply,
        'Word': Word,
        'Word.e': Word$e,
        'Word.i': Word$i,
        'Word.o': Word$o,
        'Word.inc': Word$inc,
        'Word.zero': Word$zero,
        'Nat.to_word': Nat$to_word,
        'Nat.to_u16': Nat$to_u16,
        'Kind.Name.to_bits': Kind$Name$to_bits,
        'Kind.Map.get': Kind$Map$get,
        'Parser.Reply': Parser$Reply,
        'List': List,
        'Parser.Reply.error': Parser$Reply$error,
        'Parser.Reply.value': Parser$Reply$value,
        'List.nil': List$nil,
        'List.cons': List$cons,
        'Parser.many.go': Parser$many$go,
        'Parser.many': Parser$many,
        'Parser.many1': Parser$many1,
        'Cmp.as_eql': Cmp$as_eql,
        'Word.eql': Word$eql,
        'U16.eql': U16$eql,
        'Parser.digit': Parser$digit,
        'Nat.add': Nat$add,
        'Nat.mul': Nat$mul,
        'Nat.from_base.go': Nat$from_base$go,
        'List.reverse.go': List$reverse$go,
        'List.reverse': List$reverse,
        'Nat.from_base': Nat$from_base,
        'Parser.nat': Parser$nat,
        'Nat.read': Nat$read,
        'IO.get_time': IO$get_time,
        'Maybe.some': Maybe$some,
        'Kind.Synth.load.cached.is_loop': Kind$Synth$load$cached$is_loop,
        'IO.get_file': IO$get_file,
        'String.cons': String$cons,
        'String.concat': String$concat,
        'Bool.not': Bool$not,
        'String.is_empty': String$is_empty,
        'IO.get_file_mtime': IO$get_file_mtime,
        'Bool.and': Bool$and,
        'String.eql': String$eql,
        'Pair.new': Pair$new,
        'Maybe.bind': Maybe$bind,
        'Maybe.monad': Maybe$monad,
        'Pair': Pair,
        'Unit.new': Unit$new,
        'Bool.or': Bool$or,
        'Kind.Core.read.spaces': Kind$Core$read$spaces,
        'Kind.Term.ref': Kind$Term$ref,
        'Char.eql': Char$eql,
        'Kind.Term.typ': Kind$Term$typ,
        'Cmp.as_gte': Cmp$as_gte,
        'Word.gte': Word$gte,
        'U16.gte': U16$gte,
        'Cmp.as_lte': Cmp$as_lte,
        'Word.lte': Word$lte,
        'U16.lte': U16$lte,
        'Kind.Core.read.is_name': Kind$Core$read$is_name,
        'Kind.Core.read.name': Kind$Core$read$name,
        'Kind.Core.read.char': Kind$Core$read$char,
        'Kind.Term.all': Kind$Term$all,
        'Kind.Term.lam': Kind$Term$lam,
        'Kind.Term.app': Kind$Term$app,
        'Kind.Term.let': Kind$Term$let,
        'Kind.Term.def': Kind$Term$def,
        'Kind.Term.ann': Kind$Term$ann,
        'String.starts_with': String$starts_with,
        'String.nil': String$nil,
        'String.drop': String$drop,
        'Char.is_hex': Char$is_hex,
        'Word.adder': Word$adder,
        'Word.add': Word$add,
        'U16.add': U16$add,
        'Word.shift_left1.aux': Word$shift_left1$aux,
        'Word.shift_left1': Word$shift_left1,
        'Word.mul.go': Word$mul$go,
        'Word.to_zero': Word$to_zero,
        'Word.mul': Word$mul,
        'U16.mul': U16$mul,
        'U16.inc': U16$inc,
        'Word.subber': Word$subber,
        'Word.sub': Word$sub,
        'U16.sub': U16$sub,
        'U16.zero': U16$zero,
        'Char.hex_value16': Char$hex_value16,
        'Kind.Core.read.u16': Kind$Core$read$u16,
        'Kind.Core.read.chrx': Kind$Core$read$chrx,
        'Kind.Term.chr': Kind$Term$chr,
        'Kind.Core.read.strx': Kind$Core$read$strx,
        'Kind.Term.str': Kind$Term$str,
        'Char.dec_value': Char$dec_value,
        'Kind.Core.read.natx': Kind$Core$read$natx,
        'Kind.Term.nat': Kind$Term$nat,
        'Pair.fst': Pair$fst,
        'Nat.eql': Nat$eql,
        'Nat.pred': Nat$pred,
        'Kind.Core.read.find': Kind$Core$read$find,
        'Pair.snd': Pair$snd,
        'Kind.Core.read.term': Kind$Core$read$term,
        'Kind.Core.read': Kind$Core$read,
        'Bool.read': Bool$read,
        'Kind.Status.done': Kind$Status$done,
        'Kind.Def.new': Kind$Def$new,
        'Kind.Synth.load.cached.def': Kind$Synth$load$cached$def,
        'BitsMap.tie': BitsMap$tie,
        'BitsMap.new': BitsMap$new,
        'BitsMap.set': BitsMap$set,
        'Kind.Map.set': Kind$Map$set,
        'Kind.Map.new': Kind$Map$new,
        'Kind.Map': Kind$Map,
        'Kind.Core.dependencies.go': Kind$Core$dependencies$go,
        'List.mapped': List$mapped,
        'Bits.reverse.tco': Bits$reverse$tco,
        'Bits.reverse': Bits$reverse,
        'BitsMap.to_list.go': BitsMap$to_list$go,
        'Kind.Name.from_bits': Kind$Name$from_bits,
        'Kind.Map.to_list': Kind$Map$to_list,
        'Kind.Map.keys': Kind$Map$keys,
        'Kind.Synth.load.cached': Kind$Synth$load$cached,
        'Parser.is_eof': Parser$is_eof,
        'Parser': Parser,
        'Parser.ErrorAt.new': Parser$ErrorAt$new,
        'Nat.gtn': Nat$gtn,
        'Parser.ErrorAt.combine': Parser$ErrorAt$combine,
        'Parser.first_of.go': Parser$first_of$go,
        'Parser.first_of': Parser$first_of,
        'String.flatten.go': String$flatten$go,
        'String.flatten': String$flatten,
        'Parser.text.go': Parser$text$go,
        'Parser.text': Parser$text,
        'Parser.eof': Parser$eof,
        'Parser.until.go': Parser$until$go,
        'Parser.until': Parser$until,
        'Parser.one': Parser$one,
        'Kind.Parser.spaces': Kind$Parser$spaces,
        'Parser.get_index': Parser$get_index,
        'Kind.Parser.init': Kind$Parser$init,
        'U16.btw': U16$btw,
        'Kind.Name.is_letter': Kind$Name$is_letter,
        'Kind.Parser.letter': Kind$Parser$letter,
        'List.fold': List$fold,
        'Kind.Parser.name1': Kind$Parser$name1,
        'Kind.Parser.text': Kind$Parser$text,
        'Parser.until1': Parser$until1,
        'Parser.maybe': Parser$maybe,
        'Kind.Parser.item': Kind$Parser$item,
        'Kind.Parser.name': Kind$Parser$name,
        'Kind.Parser.stop': Kind$Parser$stop,
        'Kind.Term.ori': Kind$Term$ori,
        'Kind.Parser.forall': Kind$Parser$forall,
        'Kind.Parser.make_lambda': Kind$Parser$make_lambda,
        'Kind.Parser.lambda': Kind$Parser$lambda,
        'Kind.Parser.lambda.erased': Kind$Parser$lambda$erased,
        'Kind.Parser.lambda.nameless': Kind$Parser$lambda$nameless,
        'Kind.Parser.parenthesis': Kind$Parser$parenthesis,
        'Kind.Term.hol': Kind$Term$hol,
        'Kind.Parser.letforrange.u32': Kind$Parser$letforrange$u32,
        'Kind.Parser.letforrange.u32.with': Kind$Parser$letforrange$u32$with,
        'Kind.Parser.letforrange.nat': Kind$Parser$letforrange$nat,
        'Kind.Parser.letforrange.nat.with': Kind$Parser$letforrange$nat$with,
        'Kind.Parser.letforin': Kind$Parser$letforin,
        'Kind.Parser.letforin.with': Kind$Parser$letforin$with,
        'Kind.Parser.letwhile': Kind$Parser$letwhile,
        'Kind.Parser.letwhile.with': Kind$Parser$letwhile$with,
        'Kind.Parser.let': Kind$Parser$let,
        'Kind.Parser.let.omit': Kind$Parser$let$omit,
        'Kind.Parser.getwhile': Kind$Parser$getwhile,
        'Kind.Parser.getwhile.with': Kind$Parser$getwhile$with,
        'Kind.Parser.get': Kind$Parser$get,
        'Kind.Parser.get.omit': Kind$Parser$get$omit,
        'Kind.Parser.def': Kind$Parser$def,
        'Kind.Parser.goal_rewrite': Kind$Parser$goal_rewrite,
        'Kind.Parser.if': Kind$Parser$if,
        'Kind.Code.backslash': Kind$Code$backslash,
        'Kind.Code.escapes': Kind$Code$escapes,
        'Kind.Parser.char.single': Kind$Parser$char$single,
        'Kind.Parser.char': Kind$Parser$char,
        'String.reverse.go': String$reverse$go,
        'String.reverse': String$reverse,
        'Kind.Parser.string.go': Kind$Parser$string$go,
        'Kind.Parser.string': Kind$Parser$string,
        'Kind.Parser.pair': Kind$Parser$pair,
        'Kind.Parser.sigma.type': Kind$Parser$sigma$type,
        'Kind.Parser.some': Kind$Parser$some,
        'Kind.Parser.not': Kind$Parser$not,
        'Kind.Parser.left': Kind$Parser$left,
        'Kind.Parser.right': Kind$Parser$right,
        'Kind.Parser.apply': Kind$Parser$apply,
        'Kind.Parser.chain': Kind$Parser$chain,
        'Kind.Parser.mirror': Kind$Parser$mirror,
        'Kind.Name.read': Kind$Name$read,
        'Kind.Parser.list': Kind$Parser$list,
        'Kind.Parser.map': Kind$Parser$map,
        'Kind.Parser.log': Kind$Parser$log,
        'Kind.Parser.do.statements': Kind$Parser$do$statements,
        'Kind.Parser.do': Kind$Parser$do,
        'Parser.try': Parser$try,
        'Parser.fail': Parser$fail,
        'Parser.avoiding': Parser$avoiding,
        'Maybe.default': Maybe$default,
        'Kind.Term.unroll_nat': Kind$Term$unroll_nat,
        'Word.to_bits': Word$to_bits,
        'U16.to_bits': U16$to_bits,
        'Kind.Term.unroll_chr.bits': Kind$Term$unroll_chr$bits,
        'Kind.Term.unroll_chr': Kind$Term$unroll_chr,
        'Kind.Term.unroll_str': Kind$Term$unroll_str,
        'Kind.Term.reduce': Kind$Term$reduce,
        'Kind.Term.extract_name': Kind$Term$extract_name,
        'Kind.Ann.new': Kind$Ann$new,
        'Kind.Parser.case.with': Kind$Parser$case$with,
        'Kind.Parser.case.case': Kind$Parser$case$case,
        'Debug.log': Debug$log,
        'Kind.Parser.case.group': Kind$Parser$case$group,
        'BitsMap.map': BitsMap$map,
        'Kind.Map.map': Kind$Map$map,
        'Kind.Term.cse': Kind$Term$cse,
        'Kind.Parser.case.build': Kind$Parser$case$build,
        'Kind.Parser.case': Kind$Parser$case,
        'Kind.Parser.open': Kind$Parser$open,
        'Kind.Parser.without': Kind$Parser$without,
        'Kind.Parser.switch.case': Kind$Parser$switch$case,
        'Kind.Parser.switch': Kind$Parser$switch,
        'Bits.tail': Bits$tail,
        'Bits.inc': Bits$inc,
        'Nat.to_bits': Nat$to_bits,
        'Maybe.is_some': Maybe$is_some,
        'Kind.Term.gol': Kind$Term$gol,
        'Kind.Parser.goal': Kind$Parser$goal,
        'Kind.Parser.hole': Kind$Parser$hole,
        'Kind.Parser.float.sign': Kind$Parser$float$sign,
        'List.any': List$any,
        'Kind.Parser.float.str_digit': Kind$Parser$float$str_digit,
        'String.from_list': String$from_list,
        'Kind.Parser.float.64': Kind$Parser$float$64,
        'Kind.Parser.float.32': Kind$Parser$float$32,
        'Either': Either,
        'Either.left': Either$left,
        'Either.right': Either$right,
        'Nat.sub_rem': Nat$sub_rem,
        'Nat.div_mod.go': Nat$div_mod$go,
        'Nat.div_mod': Nat$div_mod,
        'Nat.to_base.go': Nat$to_base$go,
        'Nat.to_base': Nat$to_base,
        'Nat.mod.go': Nat$mod$go,
        'Nat.mod': Nat$mod,
        'Nat.lte': Nat$lte,
        'List.at': List$at,
        'Nat.show_digit': Nat$show_digit,
        'Nat.to_string_base': Nat$to_string_base,
        'Nat.show': Nat$show,
        'Kind.Parser.int_pos': Kind$Parser$int_pos,
        'Kind.Parser.int_neg': Kind$Parser$int_neg,
        'Kind.Parser.int': Kind$Parser$int,
        'Kind.Parser.machine_integer.signed': Kind$Parser$machine_integer$signed,
        'Parser.hex_digit': Parser$hex_digit,
        'Parser.hex_nat': Parser$hex_nat,
        'Kind.Parser.nat': Kind$Parser$nat,
        'Kind.Parser.machine_integer.unsigned': Kind$Parser$machine_integer$unsigned,
        'Kind.Parser.u64': Kind$Parser$u64,
        'Kind.Parser.u32': Kind$Parser$u32,
        'Kind.Parser.u16': Kind$Parser$u16,
        'Kind.Parser.u8': Kind$Parser$u8,
        'Kind.Parser.reference': Kind$Parser$reference,
        'List.for': List$for,
        'Kind.Parser.application': Kind$Parser$application,
        'Parser.spaces': Parser$spaces,
        'Parser.spaces_text': Parser$spaces_text,
        'Kind.Parser.application.erased': Kind$Parser$application$erased,
        'Kind.Parser.list_set': Kind$Parser$list_set,
        'Kind.Parser.list_get': Kind$Parser$list_get,
        'Kind.Parser.map_set': Kind$Parser$map_set,
        'Kind.Parser.map_get': Kind$Parser$map_get,
        'Kind.Parser.arrow': Kind$Parser$arrow,
        'Kind.Parser.op': Kind$Parser$op,
        'Kind.Parser.add': Kind$Parser$add,
        'Kind.Parser.sub': Kind$Parser$sub,
        'Kind.Parser.mul': Kind$Parser$mul,
        'Kind.Parser.div': Kind$Parser$div,
        'Kind.Parser.mod': Kind$Parser$mod,
        'Kind.Parser.ltn': Kind$Parser$ltn,
        'Kind.Parser.lte': Kind$Parser$lte,
        'Kind.Parser.eql': Kind$Parser$eql,
        'Kind.Parser.gte': Kind$Parser$gte,
        'Kind.Parser.gtn': Kind$Parser$gtn,
        'Kind.Parser.and': Kind$Parser$and,
        'Kind.Parser.or': Kind$Parser$or,
        'Kind.Parser.default': Kind$Parser$default,
        'Kind.Parser.cons': Kind$Parser$cons,
        'Kind.Parser.concat': Kind$Parser$concat,
        'Kind.Parser.string_concat': Kind$Parser$string_concat,
        'Kind.Parser.sigma': Kind$Parser$sigma,
        'Kind.Parser.equality': Kind$Parser$equality,
        'Kind.Parser.inequality': Kind$Parser$inequality,
        'Kind.Parser.rewrite': Kind$Parser$rewrite,
        'Kind.Parser.annotation': Kind$Parser$annotation,
        'Kind.Parser.application.hole': Kind$Parser$application$hole,
        'Kind.Parser.suffix': Kind$Parser$suffix,
        'Kind.Parser.term': Kind$Parser$term,
        'Kind.Parser.name_term': Kind$Parser$name_term,
        'Kind.Binder.new': Kind$Binder$new,
        'Kind.Parser.binder.homo': Kind$Parser$binder$homo,
        'List.concat': List$concat,
        'List.flatten': List$flatten,
        'Kind.Parser.binder': Kind$Parser$binder,
        'List.length': List$length,
        'Kind.Parser.make_forall': Kind$Parser$make_forall,
        'List.at_last': List$at_last,
        'Kind.Term.var': Kind$Term$var,
        'Kind.Context.get_name_skips': Kind$Context$get_name_skips,
        'Kind.Name.eql': Kind$Name$eql,
        'Kind.Context.find.go': Kind$Context$find$go,
        'Kind.Context.find': Kind$Context$find,
        'Kind.Path.o': Kind$Path$o,
        'Kind.Path.i': Kind$Path$i,
        'Kind.Path.to_bits': Kind$Path$to_bits,
        'Kind.Term.bind': Kind$Term$bind,
        'Trampoline.call': Trampoline$call,
        'Trampoline': Trampoline,
        'Trampoline.wrap': Trampoline$wrap,
        'BitsMap.set_if_empty.cps.go': BitsMap$set_if_empty$cps$go,
        'Trampoline.done': Trampoline$done,
        'BitsMap.set_if_empty.cps': BitsMap$set_if_empty$cps,
        'BitsMap.set_if_empty': BitsMap$set_if_empty,
        'Kind.Map.set_if_empty': Kind$Map$set_if_empty,
        'Kind.Status.init': Kind$Status$init,
        'Kind.Map.def': Kind$Map$def,
        'Kind.Parser.file.def': Kind$Parser$file$def,
        'Kind.Constructor.new': Kind$Constructor$new,
        'Kind.Parser.constructor': Kind$Parser$constructor,
        'Kind.Datatype.new': Kind$Datatype$new,
        'Kind.Parser.datatype': Kind$Parser$datatype,
        'Kind.Datatype.build_term.motive.go': Kind$Datatype$build_term$motive$go,
        'Kind.Datatype.build_term.motive': Kind$Datatype$build_term$motive,
        'Kind.Datatype.build_term.constructor.go': Kind$Datatype$build_term$constructor$go,
        'Kind.Datatype.build_term.constructor': Kind$Datatype$build_term$constructor,
        'Kind.Datatype.build_term.constructors.go': Kind$Datatype$build_term$constructors$go,
        'Kind.Datatype.build_term.constructors': Kind$Datatype$build_term$constructors,
        'Kind.Datatype.build_term.go': Kind$Datatype$build_term$go,
        'Kind.Datatype.build_term': Kind$Datatype$build_term,
        'Kind.Datatype.build_type.go': Kind$Datatype$build_type$go,
        'Kind.Datatype.build_type': Kind$Datatype$build_type,
        'Kind.Constructor.build_term.opt.go': Kind$Constructor$build_term$opt$go,
        'Kind.Constructor.build_term.opt': Kind$Constructor$build_term$opt,
        'Kind.Constructor.build_term.go': Kind$Constructor$build_term$go,
        'Kind.Constructor.build_term': Kind$Constructor$build_term,
        'Kind.Constructor.build_type.go': Kind$Constructor$build_type$go,
        'Kind.Constructor.build_type': Kind$Constructor$build_type,
        'Kind.Parser.file.adt': Kind$Parser$file$adt,
        'Kind.Parser.file.end': Kind$Parser$file$end,
        'Kind.Parser.file': Kind$Parser$file,
        'String.join.go': String$join$go,
        'String.join': String$join,
        'Kind.Code.highlight.end': Kind$Code$highlight$end,
        'Maybe.extract': Maybe$extract,
        'Nat.is_zero': Nat$is_zero,
        'Nat.double': Nat$double,
        'String.pad_right': String$pad_right,
        'String.pad_left': String$pad_left,
        'Kind.Code.color': Kind$Code$color,
        'List.take': List$take,
        'Kind.Code.highlight.go': Kind$Code$highlight$go,
        'Kind.Code.highlight': Kind$Code$highlight,
        'Kind.Defs.read': Kind$Defs$read,
        'Kind.Synth.load.go': Kind$Synth$load$go,
        'Kind.Synth.files_of.make': Kind$Synth$files_of$make,
        'String.length.go': String$length$go,
        'String.length': String$length,
        'String.split.go': String$split$go,
        'String.split': String$split,
        'Kind.Synth.files_of': Kind$Synth$files_of,
        'Kind.Synth.load': Kind$Synth$load,
        'Kind.Status.wait': Kind$Status$wait,
        'Kind.Check': Kind$Check,
        'Kind.Check.result': Kind$Check$result,
        'Kind.Error.undefined_reference': Kind$Error$undefined_reference,
        'Kind.Error.waiting': Kind$Error$waiting,
        'Kind.Error.indirect': Kind$Error$indirect,
        'Maybe.mapped': Maybe$mapped,
        'Kind.MPath.o': Kind$MPath$o,
        'Kind.MPath.i': Kind$MPath$i,
        'Kind.Error.patch': Kind$Error$patch,
        'Kind.MPath.to_bits': Kind$MPath$to_bits,
        'Kind.Error.type_mismatch': Kind$Error$type_mismatch,
        'Kind.Error.show_goal': Kind$Error$show_goal,
        'Kind.Term.check.infer_with_types': Kind$Term$check$infer_with_types,
        'Kind.Term.normalize': Kind$Term$normalize,
        'Kind.Term.desugar_cse.motive.go': Kind$Term$desugar_cse$motive$go,
        'List.tail': List$tail,
        'Kind.Term.SmartMotive.vals.cont': Kind$Term$SmartMotive$vals$cont,
        'Kind.Term.SmartMotive.vals': Kind$Term$SmartMotive$vals,
        'Kind.Term.SmartMotive.nams.cont': Kind$Term$SmartMotive$nams$cont,
        'Kind.Term.SmartMotive.nams': Kind$Term$SmartMotive$nams,
        'List.zip': List$zip,
        'Nat.gte': Nat$gte,
        'Bits.concat': Bits$concat,
        'Nat.sub': Nat$sub,
        'Kind.Term.serialize.go': Kind$Term$serialize$go,
        'Kind.Term.serialize': Kind$Term$serialize,
        'Bits.eql': Bits$eql,
        'Kind.Term.identical': Kind$Term$identical,
        'Kind.Term.SmartMotive.replace': Kind$Term$SmartMotive$replace,
        'Kind.Term.SmartMotive.make': Kind$Term$SmartMotive$make,
        'Kind.Term.desugar_cse.motive': Kind$Term$desugar_cse$motive,
        'Kind.Term.desugar_cse.argument': Kind$Term$desugar_cse$argument,
        'Maybe.or': Maybe$or,
        'Kind.Term.desugar_cse.cases': Kind$Term$desugar_cse$cases,
        'Kind.Term.desugar_cse': Kind$Term$desugar_cse,
        'Kind.Error.cant_infer': Kind$Error$cant_infer,
        'BitsSet.has': BitsSet$has,
        'BitsSet.mut.has': BitsSet$mut$has,
        'Kind.Term.equal.extra_holes.funari': Kind$Term$equal$extra_holes$funari,
        'Kind.Term.has_holes': Kind$Term$has_holes,
        'Kind.Term.equal.hole': Kind$Term$equal$hole,
        'Kind.Term.equal.extra_holes.filler': Kind$Term$equal$extra_holes$filler,
        'Kind.Term.equal.extra_holes': Kind$Term$equal$extra_holes,
        'BitsSet.set': BitsSet$set,
        'BitsSet.mut.set': BitsSet$mut$set,
        'Bool.eql': Bool$eql,
        'Kind.Term.equal.go': Kind$Term$equal$go,
        'BitsSet.new': BitsSet$new,
        'BitsSet.mut.new': BitsSet$mut$new,
        'Kind.Term.check': Kind$Term$check,
        'Kind.Path.nil': Kind$Path$nil,
        'Kind.MPath.nil': Kind$MPath$nil,
        'List.is_empty': List$is_empty,
        'Kind.Term.patch_at': Kind$Term$patch_at,
        'Kind.Synth.fix': Kind$Synth$fix,
        'Kind.Status.fail': Kind$Status$fail,
        'Kind.Synth.one': Kind$Synth$one,
        'BitsMap.from_list': BitsMap$from_list,
        'Kind.Term.inline.names': Kind$Term$inline$names,
        'Kind.Term.inline.reduce': Kind$Term$inline$reduce,
        'Kind.Term.inline': Kind$Term$inline,
        'BitsMap.values.go': BitsMap$values$go,
        'BitsMap.values': BitsMap$values,
        'Kind.Core.var_name': Kind$Core$var_name,
        'Kind.Name.show': Kind$Name$show,
        'Bits.to_nat': Bits$to_nat,
        'U16.show_hex': U16$show_hex,
        'Kind.Code.escape.char': Kind$Code$escape$char,
        'Kind.Code.escape.go': Kind$Code$escape$go,
        'Kind.Code.escape': Kind$Code$escape,
        'Kind.Core.show.go': Kind$Core$show$go,
        'Kind.Core.show': Kind$Core$show,
        'Kind.Defs.core': Kind$Defs$core,
        'Kind.api.io.term_to_core': Kind$api$io$term_to_core,
        'BitsMap.keys.go': BitsMap$keys$go,
        'BitsMap.keys': BitsMap$keys,
        'Kind.Synth.many': Kind$Synth$many,
        'Kind.Synth.file': Kind$Synth$file,
        'IO.put_string': IO$put_string,
        'IO.print': IO$print,
        'Kind.Term.show.as_nat.go': Kind$Term$show$as_nat$go,
        'Kind.Term.show.as_nat': Kind$Term$show$as_nat,
        'Kind.Term.show.is_ref': Kind$Term$show$is_ref,
        'Kind.Term.show.app.done': Kind$Term$show$app$done,
        'Kind.Term.show.app': Kind$Term$show$app,
        'BitsMap.to_list': BitsMap$to_list,
        'Kind.Term.show.go': Kind$Term$show$go,
        'Kind.Term.show': Kind$Term$show,
        'Kind.Defs.report.types': Kind$Defs$report$types,
        'List.filter': List$filter,
        'Kind.Error.is_undef': Kind$Error$is_undef,
        'Kind.Error.is_mistake': Kind$Error$is_mistake,
        'Kind.Error.is_goal': Kind$Error$is_goal,
        'Kind.Error.relevant': Kind$Error$relevant,
        'Map': Map,
        'String.to_bits': String$to_bits,
        'Map.from_list': Map$from_list,
        'Kind.Context.show': Kind$Context$show,
        'Kind.Term.expand_at': Kind$Term$expand_at,
        'Kind.Term.expand_ct': Kind$Term$expand_ct,
        'Kind.Term.expand': Kind$Term$expand,
        'Kind.Error.show': Kind$Error$show,
        'Kind.Error.origin': Kind$Error$origin,
        'Kind.Defs.report.errors': Kind$Defs$report$errors,
        'Kind.Defs.report': Kind$Defs$report,
        'IO.set_file': IO$set_file,
        'Bool.show': Bool$show,
        'Kind.Defs.cache.go': Kind$Defs$cache$go,
        'Kind.Defs.cache': Kind$Defs$cache,
        'Kind.api.io.check_file': Kind$api$io$check_file,
        'Kind.Synth.files.go': Kind$Synth$files$go,
        'Kind.Synth.remove_duplicate_names': Kind$Synth$remove_duplicate_names,
        'Kind.Synth.files': Kind$Synth$files,
        'Kind.api.io.check_files': Kind$api$io$check_files,
        'Kind.api.io.check_term': Kind$api$io$check_term,
        'Kind.api.io.show_term': Kind$api$io$show_term,
        'Kind.api.io.show_term_normal': Kind$api$io$show_term_normal,
        'IO.purify': IO$purify,
        'Kind.api.check_code': Kind$api$check_code,
        'Kind.Term.read': Kind$Term$read,
        'Kind.api.export': Kind$api$export,
    };
})();