type App.KL.Global.State {
  new(
    game: Maybe<App.KL.Game> // game state
  )
}

type App.KL.Global.Event {
  void
  join_room
  set_team(team: App.Kl.Game.Team)
  // Will store draft info (player / hero / team)
  // [App.Kaelin.Drafted.new("0x01babFc", App.Kaelin.Hero.Zeralul, App.Kaelin.Team.Blue)]
  //start_game   ( players: List<App.Kaelin.Player> )
  //create_user  ( player: App.Kaelin.Player )
  //create_hero  ( hero_id: U8 )
  //user_input   ( player: String, coord: App.Kaelin.Coord, action: App.Kaelin.Action )
  //exe_skill    ( player: String, target_pos: App.Kaelin.Coord, key: Char )
  //save_skill   ( player: String, target_pos: App.Kaelin.Coord, key: Char, team: App.Kaelin.Team )
  //remove_skill ( player: String, target_pos: App.Kaelin.Coord, key: Char, team: App.Kaelin.Team )
  //end_action
  //draft_hero   ( hero: U8)
  //draft_coord  ( coord: App.Kaelin.Coord)
  //draft_team   ( team: U8)
  //draft_ready  ( ready: U8)
  //control_map  
} deriving (serializer, deserializer)

App.KL.Global.Event.serialize_post(ev: App.KL.Global.Event): String
  "0x" | String.pad_right_exact(64, '0', Bits.hex.encode(Serializer.run!(App.KL.Global.Event.serializer, ev)))

App.KL.Global.Event.deserialize_post(hex: String): App.KL.Global.Event
  Deserializer.run!(App.KL.Global.Event.deserializer, Bits.hex.decode(String.drop(2,hex))) <> App.KL.Global.Event.void

// Global ticker: not used
App.KL.Global.tick: App.Tick<App.KL.State>
  (tick, glob)
  glob

// Global visitor: counts posts to room_zero
App.KL.Global.post: App.Post<App.KL.State>
  (time, room, addr, data, glob)
  log("Event: " | room | " " | data)
  case App.KL.Global.Event.deserialize_post(data) as event {
    void: glob
    join_room:
      log("- join_room")
      open glob
      let glob.game = glob.game <> App.KL.Game.start
      let glob.game = glob.game@players <- Map.set!(addr, App.KL.Game.Player.new(none, none, App.KL.Game.Team.neutral, false), glob.game@players)
      glob@game <- some(glob.game)
    set_team:
      log("- set_team")
      open glob
      case glob.game as game {
        none: glob
        some:
          let glob.game = game.value@players <- Map.set!(addr, App.KL.Game.Player.new(none, none, event.team, false), game.value@players)
          glob@game <- some(glob.game)
      }
  }
