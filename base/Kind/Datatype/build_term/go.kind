Kind.Datatype.build_term.go(
  type: Kind.Datatype,
  name: Kind.Name,
  pars: List(Kind.Binder),
  inds: List(Kind.Binder),
): Kind.Term
  case pars {
    cons: case pars.head {
      new:
        def par_name = pars.head.name;
        def par_body = (x) Kind.Datatype.build_term.go(type, name, pars.tail, inds);
        Kind.Term.lam(par_name, par_body),
    },
    nil: case inds {
      cons: case inds.head {
        new:
          def ind_name = inds.head.name;
          def ind_body = (x) Kind.Datatype.build_term.go(type, name, pars, inds.tail);
          Kind.Term.lam(ind_name, ind_body),
      },
      nil: 
        def moti = Kind.Datatype.build_term.motive(type);
        def body = (s,x) Kind.Datatype.build_term.constructors(type); // TODO
        Kind.Term.all(Bool.true, String.concat(name,".Self"), Kind.Name.read("P"), moti, body)
    }
  }