type User.caotic.Encode.ABI.Coder {
    uint_256(value : String)
    bytes(value : String)
    bytes32(value : String)
    andress(value : String)
}


User.caotic.Encode.ABI.Coder.stringfy(coder : User.caotic.Encode.ABI.Coder) : String
  case coder {
    uint_256 : "uint_256"
    bytes32 : "bytes32"
    andress : "andress"
    bytes : "bytes"
  }

 type User.caotic.Encode.ABI.Method {
   new(
     name : String,
     inputs : List<User.caotic.Encode.ABI.Coder>
   //  output : List<User.caotic.Encode.ABI.Coder>
   //  constant : List<Bool>,
   //  payable : List<Bool>
   )
 }

//Bits.pad.correcly_semantics(n : Nat, x : Bits) :
//   Bits.to_nat(Bits.pad(n, x)) == Bits.to_nat(x)
//  ?a // padding a Bit do not change the semantic in Nat

User.caotic.ABI.encode_(coder : User.caotic.Encode.ABI.Coder) : Pair<String, Bool> 
  case coder {
    bytes :
      let length = String.length(coder.value) - 1 // change after to bits.length
      let nextMul32 = (((length - 1) / 64) + 1) * 64
      let lengthEncoded = User.caotic.ABI.encode_(User.caotic.Encode.ABI.Coder.uint_256(Nat.hex.encode(length)))
      open lengthEncoded
      let bytesEncoded = String.pad_right(nextMul32 - 1, '0', "0" | coder.value)
      {lengthEncoded.fst | bytesEncoded, true}
  } default 
      {String.pad_left(64, '0', coder.value), false}

User.caotic.ABI.methodData(method : User.caotic.Encode.ABI.Method) : _
  open method
  let joinMethods = List.map!!((x) User.caotic.Encode.ABI.Coder.stringfy(x), method.inputs)
  let methodSig = method.name | "(" | String.join(",", joinMethods) | ")"
  let methodHash = Crypto.Keccak.hash(methodSig)
  let encodeInputs = List.map!!((x) User.caotic.ABI.encode_(x), method.inputs)
  let encodeSize = List.length!(encodeInputs)
  let hexs = Pair.new!!("", "")

  for coder in encodeInputs with hexs :
    let {dataBlock, headBlock} = hexs
    open coder
    if coder.snd then
      let dataLoc = (encodeSize*32) + String.length(dataBlock)
      headBlock = headBlock | String.pad_left(64, '0', Nat.hex.encode(dataLoc))
      dataBlock = dataBlock | coder.fst
      {dataBlock, headBlock}
    else
      dataBlock = dataBlock | coder.fst
      {dataBlock, headBlock}
  methodHash | Pair.snd!!(hexs) | Pair.fst!!(hexs)


uint_len_refinment(x : Nat) : Type
  Pair<(x <=? 256) == true, Nat.divides(8, x)>

bytes_len_refinments(x : Maybe<Nat>) : Type
  case x {
    some : (x.value >? 0) == true
    none : Unit
  }

type Method.Type {
  bytes(len : Maybe<Nat>, value : Bits, refinment : bytes_len_refinments(len)),
  uint(len : Nat, value : Bits, refinment : uint_len_refinment(len))
  int(value : Bits)
  bool(value : Bits)
  array(value : List<Method.Type>)
}

Bits.to_hex(value : Bits) : String
  String.pad_left(64, '0', String.reverse(Bits.hex.encode(value)))

Bool.to_bytes(b : Bool) : Bits
  if b then Bits.i(Bits.e) else Bits.o(Bits.e)

String.to_bits2(str: String): Bits
  case str{
    nil : Bits.e
    cons: Bits.concat(Bits.o(U16.to_bits(str.head)), String.to_bits(str.tail))
  }

User.caotic.encode(coder : List<Method.Type>) : Pair<List<String>, List<String>>
  case coder {
    cons : case coder.head as bytes {
      bytes : case bytes.len {
        some : {[], []}
        none : 
          let {static, dynamic} = User.caotic.encode(coder.tail)
          let dynamic_location = Nat.to_bits((List.length!(static) + 2) * 32) // + size of queue dynamic
          let bytes_size = Nat.to_bits(Bits.size(bytes.value))
          {Bits.to_hex(dynamic_location) & static, Bits.to_hex(bytes_size) & Bits.to_hex(bytes.value) & dynamic}
      }
      array : {[], []}
    } default 
        let {static, dynamic} = User.caotic.encode(coder.tail)
        {Bits.to_hex(bytes.value) & static, dynamic}
  } default {[], []}

User.caotic.ABI.encode : _

  log(Bits.show(String.to_bits2("ab")))
//  let paramsTest = [
  //    Method.Type.uint(32, U32.to_bits(69), {refl, Sigma.new!!(4, refl)})
  //    Method.Type.bool(Bool.to_bytes(true))
   // ]

  let paramsTest = [
    Method.Type.bytes(none, String.to_bits("dave"), Unit.new),
    Method.Type.bool(Bool.to_bytes(true))
  ]

  let test = User.caotic.encode(paramsTest)
  Pair.show!!(List.show!(Function.id!), List.show!(Function.id!), test)